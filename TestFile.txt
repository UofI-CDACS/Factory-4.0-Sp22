// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\Jacob\Documents\GitHub\Factory-4.0-Sp22\TestFile.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
d425a528bb12625ba9b36ecfbccc39f68885635efddc7e4d1b72e26bdaf4feb8503884a02e06d737
9a21b260ba701387103d4889eb54c2c5cbc21ffde59e4a3b0386f39bf5cbb13c3d2ee7b3b941e148
04ef801d009b147a2b7e38873725669640c37cade71958b6274957da08f89d223b9b5b6672bdb859
12a5719d449fe0f46bf7f109422cd128054ba5ef62c7e29099cc8c06cc236511ba87b424dd890e5c
5212ef1630537388ce842c9a0ecb28d36772eb97cbd8994cb1dc8679e07ce088febf404c382c0614
613042240498af17ff2f7e11269d7edfeae09ff91ca810a76bb1a7ed5cd15d9f671bd44a96457ded
d12c250df295908d455e362940a06eb8ee88e73b9cc0c874b86358c7881be0a0bb8b473487a18a58
203cfd6a0bac6bef8032cf978e9eb0ce1e68428f55b728b9144dfd02cd9bd7f99f44ec07d3fa3f67
04a31bd12125064d0578e5950f56146c91d90c837e280dd04f20727f26532e9ef61e6ca30215a067
943e8a7b735084362a6ee816e0678c33ef5801ba3605511c937349a444b118d3e07ea6196fcb492d
988166b65a8bae2fb18418d478b723866c2086256e57c0ad665947950adb109aa2bbe5857db52fb8
925d95d3b56ab79b08ab45d05300cc4c09cfe0ed59ef1402d6847981478f913d79586603434a7527
c7e17bf9b858a4276a1368d69d1905ada728b1532309d7f801bf0a060426939fa66a9c69ae22b0d0
14e1d83468586d28eb1a3efdfa15a3ec8ec99e98d7c7d4eab6983b2a97a5f1bd2ab0af658f131002
125179a388dcbf5af9cd5b13275d0b07cd59584b36492613dcb1c29563b53a65a3a1b5f7dbd0a67e
a246ee9effa72f3b32f2223e332bbc8854769f26fbb7d6dc542c4b227d7278547bfc923e780472c4
58e075a9e8480e4bc247564043a5118af5bc4002143bbd58f033371622231d928621fe7b456c127a
df80a9ff2906d6a3a3c7d09a75c120284bd4aacd63add107f03ff1f75f836a5a4473173cbfc6e2a3
269b36b9d4722513556cc0ce6b0cf48b59fb7a448a80df7423ef3280138ee59c1224d107e50dd272
c1aa48152091c4b009ade2d45089a120a7506f6150ab41c9b03c3bcd6e3560925ff01cd8ba75c230
4f90862a0b76f3a3d8d74c621453604db8d621f98a6b08c8e2fab9600f915626e5b37c2c09e1c65c
a91cf4d89ac28cd9f79e1a62c083a9c3c4a29057e10a5a7f085defbf6672bed5d312c171da29e815
fc15923d991feddfc31eca2c1673277bc691ef3841d4e3b4bec435217f2c2bfd634e71ba45abd48d
83d5b7b56fe5420c7b290382e93256e7402b68eefd6b775cff1d2f091ac81ea87ce316a9ef78b939
c434ee391d086ea80bb69bd15aab740a12e5b5832028b5f0b213603f3850179d8ad7ef12d48a923d
b267b8d36744b64a3c58d9e807f33c0cb9e55ac6b30c0a82de00662ce8343b6ae552108381de2091
8db71caccd029e9f938a5d4bd07fce31e03ec14d92cf8ca423edb98d3468052de656c74afe1cca89
f25bbc35b93c2c0799e113375c395f5723f4aff775dc6cf4c8547fcb6bcaa50d1bc6a06a3b8a4507
f5bf98b999b030e7c19469eae7b5d93df3b5968988d5f3989592d822ce462e7e05618cadfcdea1bb
e4367cf69afa570a6f8c07985ee05561e1f718627e84f55d7a6a0d620d6a819e5b202e5c566d377f
1a345c548389d427d710f564da522aee29df4701a717eba5d74401ec05caa81d411578c13f4d6d82
1c380074177656635f9892ec0c045b077f19413e08cdb4cb70948d36699be179526bab2d3fb68584
d5ce88e5c74473a9f258e3ed256c91d1fdff1cc1a2a59e9be6d2c8fece144fe5212fe7ae53133f5d
46cfb587b81c816bc018e3c46999696cb10ae94b0feaaa30a8a16de3351561b191c6ecd395f66be7
62d98f6a2a0b306400a7323e0f450efa5512a43b47be30aafcf016a4a7f73ac2957e5a0d29c8f9a5
dbb9aa3ae47bdbab29e7cebe907a0fabf468211a3d813e2e4e1ad699c0eb9df0b2305642714b83c2
9fb695dc86ff3a57f83f41ecd58d98d65f44494a63f94a0b3c495137fed75d67ca369e6bd1f87a00
7c864338b7d89082817d12d0af1138e2711d737b70bfd750b766aad7f4cf36be81c436d990c08c98
85e67887fd2720748f0ea256f91d8bab445ede32fd9959efb4175de72c352c42479f031c58514f0f
6b202dc0003e3d9901343c660ec85afa4cb7ad257676c1d97759e8a480132811b8e18910a7bee32a
6249656571c7600a6ededb70b6d1db97220789999864f81e26023b9176290e3b254e89aab3adcd88
feffd29f746988760022bc02bc07e7f099c628787c263a8a33dbd392aca263ff5a5d5a3693c803f4
0a709f2174b1788bf94096758611bae76f169ba3cd442bd5f4302aa1c9786e59c431c71fa1347b84
019b051855087a31b30f7a52ffa6a2305103904b46aeb961864f06da5494631f91bd7f0300d62fe7
4ad3e55daef08a0c15e631c6a750a28d325cbe5ef21dae509ec842bfd99e53b02902ea518aebdd63
1684e7c3103017f2643fd027b76d41c5546563319e011f12e11b59db50291d0773fa49a1e86a16dd
ae3761b811948e83e8fa5662e5fc718a07079ad5400b76aa600950bdb19906b0adf0622a65d1564e
a38788bb5260bbe5686437148e2e7ff53c44d7bd53f61d15882f5872b17985b5111ff5ed682842af
a6eeb5f60f28259918465e087b3bf044c3fbd6afc71314f178a0efa8ebcd50f3dee70de352506e16
df2998803e90d2e74aaa980b79fc1ca84bf068686a140a12ebe9552e103e8021cb59a828d59a70c4
0a86d44c4811b0718fa364b92733b4d3857718188babd9bad5ade45846b0f576e823eaced3395ba0
ac369b47680bee565a1afcfc93c01f5ed3a29781a96da34eb1d292efd2d5ba4406f46f1c3d7dfc14
d5bf9426e3c493d58b391a8e86e0d97c81c5b4cee7256ae1004f9333cfc7d8226825e009df6e8976
afdd30765a38fcd695f0da3287ed431c46599bcac9522dd9d76cea22d60fed78584db641c2eb91e0
426568766f05663af09d3cc382fd9d686dd44c455535e387991fa44d48f57881b85529a255e84178
05d4124944727ca5aeddfd1698edf2d40cb2bb95e103d36767481603904e8ff4fa8e07245489c74a
76af7aca4f159b6d78838dc48cb9c03cdccfab7afea36f883419a2664151746d1bb5bd50cb8890b2
1b150a0afd5f5f65b68636ec1e2eea56d74b4fbd8d6f1787249f00df59bc647c78b3c79d9434b30f
f424f966117b101493d19c2839bebedc434f61fe7250cd67e124f1a8ea162c1d3eab4e0038be754e
d0b4211d7b396d1109c3aaaa5dfffff9ec0e5d423d367557bd69a6a0354bd84c7326849fa97e9ee3
84a7870acadd95f8e39fcdc59821e9d66235afd4bef6e4e7d3fbfed4f5e3f689a77aefaf0ab93301
cd099674bc02101447d833afca08fa3ca079a9141d736a676bc9f178dcf57059786e7b7af4e4a8d4
c7eaff6decb2178f0d89c1241896eff84205da0ca7458ca7170c60ffb386cb0226c4a6c7bb39815a
bad18f95d5d3a3509106065f1f80cb2c3ebd123a2c16a93b69172c5916e3c8c3a1d21972f5b145ba
1020310af72f47163ea3bbef2e3d71e9f5410f88de571e8db288d75c04d431f6847ab8d35bc1712c
7f386bf4dde23a9a376832d4c6922b0451cb30958c51ed75d8cf20fade56cc7c5d4ef20ada5e0dd8
7fb21f41f75d81274d397818464cab82763c847beb8b9b1631291989ba2a872af7bce4603f96e2bc
83c126340c59ca8f028b5dbf8890b09d11a07889e09eb79661d59a4f0cc5e1036f8eff218374be35
8d5abf780aea28dff1a5f34c5febbd220b34e7c7a1708cc2455c0534ea48bf35be2e347472827253
c7c79ede7c5f5587012624399187bd5a7387cf46a5ddb1a042296b7131373f4c2b79ad2d31bff49e
2a672ef0a677390cc7e3c1bce98f0db56eb80315429f54493bac6bf4f76eef4aad911fa6bbddd6b0
52a17bd3382175b44706440bc2e6047293456e6507b0db0d5a874c01f1d023a90312f4be0b44308e
23feb52da0bd40fe8d6cc7bfd3c2600b0180fa673ccf2ed0ad9ebb0ffcdabb514e36e3d4a635deda
4b8b2dfe424f26c9aeb1ba7d9a87c5f846669ba15ac837614e8de93e046437761db1192c6ffdda9d
c39176f4bed9807cd78934d16ad674b316372ef8dfea667c1a9e572cd101dd24a86ca30451d767c0
26df33aa74a324c136769a587eae4e8a19f67dbac9ab4d1bf8b8d9d1ff656a00bf6af0f3ba070147
472ec8f5544356214f79d9d21179de2ee22424fff832a2601a856df1408cd71805c0dae1ce6425c3
42821451ecfdfeccab007828b9e85d0384e809be658770864de67c73da26d03c5997106d594a1e7d
8543e2f03cefc7da2f91fa1b2e303595696516f63d71e7ccf324848900ec09e99bf91d4b2e29c07b
b12a258c9067911e9349f9d8ca1e3c350a3ef1ddacb57c5cbed8396c7376d6eae84117a79c54046d
ba50435b101f04a6fd846da8fa612921d7156ea9a6021bd5b8e084e2e2233f6ad6a63338ad2b908c
9bc4aa16b47493be9feefb1291c45ae0198c59703b3a165fb7680cf7e9c5962481cabe6ba8f8ef8c
cd3512852eb98110f760e6703808ff27ab354267c5a871e875d2873b0688f7dca710a6506ec3cfb1
5b771e35dd94c597ffeb46c82ea74a372762e90fecb3797e13771b3a4035d9d8e9e670b65f580a12
3d5a91e4abe608069772a22192789421fd87c5fcba397b4eb7cfff1a5b0451e0cf36967d3c2a4dc6
2463ad11de2622b6cc40762e04777c544d9daabdda51b34f14bc6c7505cd9598b9dfe90afd91abe1
7543bda4f636a34b2e40722d56736a02316b7db874108fafb8b268a658908945e6caaa3f9f4068be
fe0c1fae611d448db0e00e158197ca5232fc5f274ccc6a7e43fcd6af3fd59d2165e63488af56ebea
c5a3957681424869545a202380e4fa4817ff570cff443e140137630891c506d8106fb38d352a14e5
96f5fe5d41f545d3df12320c1fd2552e8df5a9f0b8970273fc2308d80f120bd169a787a3b4644cb7
ceb8aca857b74e8d1583f4fe107c81ef4db493e2b8fc393386d8ce894992b19e056aeb9425df0020
6b5e1a4da5cda3c44c90eb2078a0da7c5550eb329489fc7e5aff787dd17a27502719055f78f4be71
737be5645f2cf3231eebe3eed3e4c830bf72e131e5f8d95ec12b1bbd3efc7b3c5b7735c869ca0487
b6b6484961553071941921bc2c67a8a4653f9a5cae2ccabf404aa4e4b315b992ad84efbf2d426f04
01cb1977dc72754302d2c231b7856978a6835ce62645292c9c81c02b63e4825c7313a05443599039
bd8e4cb5f8ecdd714f72c7f0bb38d01bf26f9fa412e9ff2445defc5ad743305ac8aea22797e842b2
8225e8ebb585c6dc6dd861d98fab44fe5a8d281b13763f6e744e53a1fb87e1048c19df9561d83bc8
a12254ab870e8e6c000a4c7c38eb71c6e8819f7b457f470917bf7084863debc486538189565cb560
ba76e4f154ae07e2f823b8f231c94de51baa4456a9b47568d4cd003b47ec45b89e9aac74ff87f454
9bd747d55d99941e6784b5a154e761ea3fa3ff66cf8e24b1556138163a8215ee2f8ed154474f01e8
1bc5b914236138fb81f4c5265c7c5d5e4be85c781d28fcad71756d65cc93c70a36e366b5b894f886
c790caa88ed500bddd28a05bdd985e610c3395fba3a1f91ce04059bf631aed3f8f172bbf1d527a21
81085e7a9cb6a1431a10f64fd7e1fc3646b3d2106946380024f6557791d9dc87f1b3cc53ee621c83
e21a5268583f4ff9f367877df73da102830ea443fa9d0fae8acaac2d99cc8be5fc04ba3840542e84
aaf4bbf35a2543b97d3d00aa05a155da50164d5441876b23f5c72429f59421843ad045a042e041cb
63e406dd1d4cfdc5f73a8f8c21707a049c1096298c0949e5f75c4ce9d2ef484a05a37fe597ec0f00
a3bd7b0cebd52b570fe11bcca87d7fe044adc94f4b3759dc7518f7992af8a08ff45863827e4d83c8
220b9af3b11c7bf7a9a44a5c452a8014e3395f22413459c953cce2608a149b0822097ed909165d3d
604e7d4b29c561c098e54c697e54e016c9a9b29c6a17bb9ca0b72dffa0d09c59346bc66a6530a3c6
46342b295bb477b9fabb5cf377c99765645e1d456d61eb2b8ac537eed5d1508d411efb505436fb33
014bf59037f4cab88748cf498cd75b64965087876fc33507dcafdbcf01069e5a44b5a2cfff107879
63a6c1ac460525be269ab0b80554512142117b6c160c6981dd84401d7a632abaa8e88378110ad885
909a32ae0d38d86a40acdc8c7c28125185a8209fa92235b8a10602c674064d4ffebcd95ac3fb72ab
1ea9d32cc9ecbc6a9490a19ed3c66c96eac2d32e85a911819fcd16e768a826a8e4a2f693e98fbadc
564b7fe48f2e7306ba14dd42831d47df9caa1a214d201966f008723e671273271d744ace1f3eed11
357e283f71b10c9f4e8e1bbc667c42d28924a18b604a42a1488dad1d7886322150a785d2781ed4fe
da293bd2ceb0d994dbc72b81ef46539795129421b5c316326c61aabd10922ae2c204388433a73ea2
53e9b7b8d0bafaa37ac14970e3dbe280fa81c715cc433f7ef5795f109d37f79afd0c3d62963cc457
c6ff495b5fdd194cf2f37615cbf09ca1259c1bfad2cdf1f9ca9fc12e8569c3a05243dcad849554a3
a62367356b9591fd2810c033f234802148ebc8ff4f09e970679cc3f98c80edfde07305d969a00c8e
71ab3b3df6d16770fa0e96aace6b179f2ec110fbfe82de105091c56c7a1706f4bd2e11f236230acf
5bc311eb39ea47e2dec69727de71f30c029e18caed5bac26d25228804b31357036a45015f7e50f81
b3938aeafde2f631e84ee6c1f6935b244b9dbdd6b0a3aa90294cc04fbb4758f2394744c188da84f4
640858c1f9c8af0452138b0efa42df40aa8b2c0bc639068ede1f74687a018541c9c2fc817e588192
ac65ed715971656b0e30a9f18bf9550ad713852e60148e0edd4727412f9fce5033541d40f2b282ce
c82449e0d724e1decd8939771d9f501b540f9fb9df2cf99508f6a35a6cf020e5bc1a41aa1d7ce225
59a0d5ae83e3067710d0f82e95dd6f2f0e14562fe5d267b21dd40bb79c78fe8e98649b9080aba345
505e6700eee8039bad73726aeaaea2a856965d5028e667e89be1b248cb6dc5f18a9d4ff27cb17a0e
54b87849e7b3f01b7438209ed9cc4f6bd2e00c81bcd1a24b9a6bac89bc2a8f65879f03a719f7dbd7
d519bb6236bd823a6b334c8974ebc453d337d01cfb0d71e6b57d7d81721ee3e5aecaa65936e49c00
251e320f7e60a74aab52153b46ed0096b4e0fcae727492a75cea75e1697e35e09c515531a4196c55
4aaa272664adf6f0d52f2693c0f01a322c0f2fd27e687054d279b19efa734590b64bca76c4d8330f
9a3c8ea27f7de499998c16a7d5e6d146bb52a0f490b826536bb38191be0c14a2833e3615c7fd2a60
6af51b5e29061c6cd31904bb1d3015108943838d8793438fa99586bf894fc1a473aee9e9d95b12d1
ab1f2a5126a4428e68f0a9f0647f2ca6a75ccdb34f84a5031fbf755c1b2316a6f18f24547a7f6aad
4435b473e491f325a7223b633540d0f6a0051a2d64ac635dcfa2aaef79265fd6ead389b58d635f8c
b0578836871dad55486795ad5b05a29ae770ccd9d424ef38fb98f9255507f9a963e1b6654227dd36
91aeb8df04b2000784aef0d78bf5c1e6d07180a92635feecd6b30fb887fc4c435c615473a13fbca4
2ad6a550254efd5ab33f62c17b8b3ba1eb5d6fd334cc606fe9c0848e5b6676308f15abf773869b6d
bc1040e616739aed948149ca1db33c30bac5776b651b64b169d0f951316ee3f9e325d6c459a0f192
2ad5d74a03a0da510ec2808382e26402bab4acf7a4fa6a8dbc93cf7bf4b01451080d11604f60a25d
a4cb9e042ffe7699d6ce9b076512026f7e121c408f5c692021e0dd32f01499096fc97fb2591eab97
c8eeb6413a87d487825cb3dd1d9c9f6553c54dcf356c3eff9ce3242979dec508a163bbddd84bee5e
5485898f73d50444006e1406d8cb2cef3b582ace061a59d9598c62406a1ce9acab991f407c6fc025
ea5b8059661def0a1a3978b03ec8130c9d382b01c5b8bc3d3c5b5130561ec05a50b4599854820bcf
7ec725f860e4cd0f4c7968010d6714067b008d42512978f5582c0ec32b520745683e56dfbd4806f9
81bad13182e8609983610ca5c76def1ffc2e6524b5946dafdfcd8004fb219fef7357e81876a89755
bf326e0d6f725a54e9458d4cdbb00cafae22884bfb0e71cd308f8ceca878c6b5eb95e2db09ce9728
9fd501f607a8a1064597aeb5dbc02280825880b51de2f1f4567aeb01bf11c1d696c9190c6a741f12
b5db433feb3082f558211cb7d53236de143324227c6829dc3cb916a18df440b811c526b5a66f5dd3
1ee74f5b314c316675cc5813bda73be774d6fb4a20ba99358bfcd275b6b62cdf35ca53716ba86757
6e2a5b16e11720bce2b9e25a103464f0da942a74fb457312f70dbaf7587268b2618000fb877cd621
ab40d4ef21f0c8ffab56b8354ea350d36fe51a0498736e0859f070a0c8d8ab36640d1897277fa912
31456ba8d5b096cde583bd539a518573df9a1533d80129a93f031024a2d2c7d6f5071560ba2d6bf7
4bde956f40c5add9b2954b7154e7113c67bb3e29bc17c355a8b849c85f67d9343ba0a690d8470386
5f98415854c0b8e327322996c4e9d8518e6d71dbd5b4bbffbd30b688998d652a8a34a4d32c0370f2
96ed2b409202a5e328cbecae5327d55036f87938f8302d5bfb93a632c8a196218591610343ce86e9
f4de762cbc54277b285713b9d03166f6ca08663e26492424b6620230d77390e51386645cb5665c5d
72dccda2cfb3df69e0a4b0b5c76944e4eebd586e6d43dc27400dbacadf110441d6bd21aeb60c44c9
94e7d6025abdaada6f0f9fcef6d50b2663f00275c1a48e66170a005845e5cb25021e2a8be34cf2c8
6c735e85819b4bcfe34de1551b3784d2c947b60191f6587aa488ad9eccb60061d9b8bd521bb5a73f
f8e8aa2a9e9eb433cd142325f0deba4dfa4d9ff9e01699bf54742d2b9caaa2a06feb781807307340
47264afc1e61e8199ddd62c23c4c4d5abc9b81a4c2d2f0e225dd845af1790156e8067206f596945c
6bb832bc81248b857445f78e936a683416bc209fb0b4e36f8a892c286bb7330c3c3509bf6957f1ca
63400dd3c7ca13a8682c94308c68e225fa3f39364457ddd06d357bc8f9f6c27c3cbc72a12da795ac
195e426170e327b03a629dec9de5d53edf42fea5a8b0fa711de587ea33627d292bf9ea075b283b50
2f520f00401a696c1a283fa9de709b74f0fa89ae7faf755d9e23e0096790e0a120900a3df51147ba
c7e13aea0ec8e88c42babe00cf4de2e396f7139db424108a3e6347be100defde251042666530f43e
866b631ef92856f4aba690350b4b6f08f7b50172f57191c93b06946f714cd97f82253802e3e21f3d
0e1d9c5d9228792e61dfd51e59a5e5d14b0acd6f335b9c481e87879cb8daff2f7daef9635708836f
c4d4f984c8a854f1c4871c6f9e5f1e706f00533fd1ec7baf49469d3f518833626468a93dade4e1fd
7a78252273582598015aa429777ac5e735c3378b67083378792d8fd81b5af24466a5dd7f40722b06
25d2459055ec7c4771c2362e539232e6239aed9424cb3e0de85d8586f758a4ba4bbe9247d1bbefee
e8d900cee2e6b6825f4283bb790ca638e99bd070607002d0ed34309556ca56797e2a9b55b5a4a128
47ac277873bd9be9168c633c0805297cedb75de6e3c514d30b97ec6d2b5d322e37d0707b68fa02b7
ce5968a78e9d710d2fb5d3a38bfa465ad17c3e3e772f9b7b9ca6896b65811ba8671cc5447bfc7989
feff867604aeb4cffabcb734156b5fa1f48a6370008b3fe0ffdbb3b91a9cd8c16271bf69714ccb14
c4e045aa11a0fa887e0598d7504fd42f3559e1efee65766d81ef19c98f1d459894b13653b74c2856
230be2a536788b4bfd0ec62319eb797e7212ea67eb1cf7b4a84ca2312368cdc97cb29b4969c7a267
ec891371a3c77ce532e5a21b383eb895a82fbc6f33b880f2c8ce03a25cbbf7705dc378b768a0e5db
6db2947261708313d19fcb133169c448f15a0ea146a69967e57b52bd08a3e500870330cd762b2e7a
06c266b1a3ee26509c0043ce318ccc622aad56cb8dfed8b4f92623fb525935fdb7076b123d17a5dd
697ce52ec397bb42dca3d7831aedacc4b0cd0722c95b1e309f9a94c5a3c619438caa7349f6b25842
199b6ec7824b44778170de5f60fe82d54756570749bd53a164634a12e4eb1a4d7bbb118fe4c0fc5a
0e323b1db71a7d2e1f7c593c27e68bd759af92250e56525783aa0cbc0190f60c6a599d6416a8cfa6
a3719b41545016f8dd398ef3a4853fdf98a620c66a94c92c388b9fcf9e98787f0621de35a4fd0941
c9bf8c68c9779a7e7a7b601d8b17747a03bfac0af6d3eaa82b6623c1a073917406b4f5924b87416c
2d1c50781d6d261c33087f383ad6b8395d3abdca6a73ad1e1bad68fbda6f2f7e4ece96d1240a829a
64d7da7d8c1def057929158c656905c1d3856ec22cb96520131855f34ffe714dd31994795aa3e515
9ad01c5cd5ec566caffe0f9539b0bf7a9f576c73e85de74a2d6228dab51c1541b798c59b2c0e6bce
6c3aa1d51b3239e329268db88796e16a8c8a69be04d66fa497901fd197e897d26a7262cc1ace102e
296528cdf40f17bd969e43f4f9568d8e1f08c3f37c3f39920e5055ecbb0a20adfcd2dcc424e4e4bc
22b86cd8fe2706bfba55c2064d76a4aa78f5356d9b34ed15a2a7fc41c6a7eaf94c035bb6cd80353a
360d35dee8e0a3b7b47f32d564fc0f247c87d6dc980bcc7d4fd412ce891d29aacbb03b08be420d6c
2a9fce401f730e306a2c1e6add267bddfed593a3644d15d5a2ea7f10cb7a098b6de73371a71154ea
7391eeba397d1acb0cde64e536c3f03767f2fb6c21d0415b4a22997d3fe530f74e43d32940742bb0
ac9218db405e076ffbd97b20f519d8dfe79cfa5d4bcc8f0a066b55af844467f9913c91a923beca5b
6cbe581076294b9401110f23cb582896bb9a879eebd3ab9f1a8c896029baa090bd1531a8779bd270
7d6d782507515eb57f74d6dcdca666c23a25a5edd870c7faae2647996ba3925de185145218a573f0
119409dd4c36858fcd16cbaff363d343782e9ee0f8c8862e803d333aa61c5baf93570e1bc83ee34a
d2cbb2ffbdb27899d7e420ad816df5226d0138e30fd9e8935d0fc401e78a99f9f5ca10c8a76dd1a0
8ccc1bdd8f91659c203cc542afeab7d41d675a12c81615a4c1172d483acb1ce7aa2b48692c6a6120
920e7ac70aa2e315f5c6443f1bff36517d2fa59a560398db0bc18ad501506d65ba7ddcaadec35849
a248d9ad51b88b318375621d3d9b81f146a7077f9465d14e35fa0f58005cb3e38b9c632775a22423
842fe2c258a929658c462adec211693034c92e8646f695e574c45348b6cb2c2906834a7fe59bbeb6
08426f49b4840a13a3d1b5129eeebc0dd342ee98ccc601c9bfedfff41706f3a2cf26a13c1e29aa80
a0502afe57864463e2cb7a232a729890c3c1ac2280615e0248ddce14fd4a88e77f628cd4c601a04c
6bd8e0e2da523c9249e6f0bdba84a20e12766a1bc2d45b6d6b12e5f0262d024c009bfb473745f1db
fcebd91d0003afc643c4a79b4d82b4b87dd0ca6d478befa9c61183770d1d8f52a369469161edb909
f11fe701a2f83b3029394a6dab8ce4b29a75b4512f6f6bfd4f959f4f2030ed1b3025da8e1f773d54
82867b5bf0e88484d8ce082280a59cb6977f31900edb8bd4c61fa7278bb11f02c43796fdb74a76fe
8ba0175ba905bda6e1d1cb5d2f5f0bb7a6e2a76a7b0f3bc58713c58e6143b29cf92e206c81a587b7
034c723c46da585b5945e0ba6e58015484aece39468398b42698c357018c64ae2a7c6e19cdb6f9ae
22f8f61c574077614850e4c669a84b537270359f3086f80e4d8a0236201745185c40f613179b4943
d364db3dd1c7484a25dbb9b1d5eb416b2ac61fe6b48e47c94215a913bbd910d82d6d6b590031f7ff
a31ecd35b0e246c15fb1816a46cc115ff7787e6176998afb5c9cbc7992d0082f43def83f16e99c0d
206f6535a88934c72abce8684423c75d7bee8fcca83ea0acb63f3d28f176422fab4411553835bdcc
0b85f7df971bab687eff150a11aa0285703229c19299d3a8c2abbef44c5f8fed3dbc7eb97136e0c2
aa0e2a4b38dfce471048f79e03eb4dfeca7bc5ea6ab12050beaf86916da206f1b9b07d493400b64a
f81f0c7f16bf5cdc0775581f0018e2f867160809fbdd31e60a4d5cb9f23888e5a1ab7a7bc7cc28a9
19becbf63afc0b154ef0a351a8375db3d0d7c487f760799c3fe0433f4d9d304521552d714acef36c
28107d67ab9f1438a698326b3027e4c6d71f8eda7bc19b19e9a013891654b85936e1a44de9dc2e71
3e4e476542b7103490018d3a3fc10f2147b2199f867306e2f2be8951ae0915d25650a979157840b9
cfd1212d3d5ccd95390c8e4199b0eb01bddecddd31d613711046af3412f3910dd35981c2886e6572
841244d758aa8201500b3dd2595d162d99a3a66c1253a1e99fadeb4da3ea72d9d8ab91164c8a9a3b
24e9934170b09c218b28a170f52f9bf36392aa09658f6a13bc5aa82e42bb821be3d62b24c48b5d78
047cec7481e04cb52389f2487090da60067a70f9608d3913a7a8882124d8c9360bbcbf0c0c071f00
cba01215f43493705c9e62c48d5d1bef067404049ebcdd97c6dbfc46d76564bbbf2b777518808935
a68c0cac78f0972c87209080efe0bef572b8630fc83b82dab3b7fe21ddfd730ab95c22e15478ace9
1b01e0b4
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State_F <Virtual>  0
 VGR_Suction_F <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 HBW_Copy_State_F <Virtual>  0
 All_Copy_States <Virtual>  0
 HBW_Manual_F <Virtual>  0
 MPO_Manual <Virtual>  0
 SLD_Manual <Virtual>  0
 SSC_Manual <Virtual>  0
 VGR_Manual_F <Virtual>  0
 HBW_get_X_Z <Virtual>  0
 HBW_lift_seq <Virtual>  0
 HBW_load_convyr <Virtual>  0
 HBW_PWM_On <Virtual>  0
 HBW_Reset_Flags <Virtual>  0
 HBW_rst_switches <Virtual>  0
 HBW_Unload_Conv <Virtual>  0
 HBW_Unload_Rack <Virtual>  0
 VGR_vacuum_drop <Virtual>  0
 VGR_dropoff <Virtual>  0
 VGR_home_reset <Virtual>  0
 VGR_pickup <Virtual>  0
 VGR_PWM_ON <Virtual>  0
 VGR_Reset_Flags <Virtual>  0
 VGR_Rotate_To <Virtual>  0
 VGR_rst_switches <Virtual>  0
 PWM_ramp_UP <Virtual>  0
#END

// Beginning of Code Block VGR_Copy_State_F
$LGCMOD VGR_Copy_State_F

// Rung VGR_Copy_State_F#1
// Offset 0
STR ST1
AND C2000
COPY 0x1 "4 0x0 MC20 C20 20"

// Rung VGR_Copy_State_F#2
// Offset 9
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C20
OR C21
AND C2000
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 50
OUT Y88

// Rung VGR_Copy_State_F#3
// Offset 27
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C20
AND Y88
ANDN X25
AND C2000
OUT Y22

// Rung VGR_Copy_State_F#4
// Offset 32
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C21
AND Y88
AND C2000
OUT Y23

// Rung VGR_Copy_State_F#5
// Offset 36
#BEGIN FMT_COMMENT 
"horizontal PWM"
#END

STR C22
OR C23
AND C2000
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 50
OUT Y89

// Rung VGR_Copy_State_F#6
// Offset 54
#BEGIN FMT_COMMENT 
"horizontal BACK"
#END

STR C22
AND Y89
ANDN X26
AND C2000
OUT Y24

// Rung VGR_Copy_State_F#7
// Offset 59
#BEGIN FMT_COMMENT 
"horizontal FORW"
#END

STR C23
AND Y89
AND C2000
OUT Y25

// Rung VGR_Copy_State_F#8
// Offset 63
#BEGIN FMT_COMMENT 
"rotation axis PWM"
#END

STR C24
OR C25
AND C2000
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 50
OUT Y90

// Rung VGR_Copy_State_F#9
// Offset 81
#BEGIN FMT_COMMENT 
"rotate CW"
#END

STR Y90
AND C24
ANDN X27
AND C2000
OUT Y26

// Rung VGR_Copy_State_F#10
// Offset 86
#BEGIN FMT_COMMENT 
"rotate CCW"
#END

STR Y90
AND C25
AND C2000
OUT Y27

// Rung VGR_Copy_State_F#11
// Offset 90
NOP

// Rung VGR_Copy_State_F#12
// Offset 91
#BEGIN FMT_COMMENT 
"Compressor ON/OFF"
#END

STR C26
AND C2000
OUT Y28

// Rung VGR_Copy_State_F#13
// Offset 94
#BEGIN FMT_COMMENT 
"Vacuum Valve"
#END

STR C27
AND C2000
OUT Y29

// Rung VGR_Copy_State_F#14
// Offset 97
NOP

// Rung VGR_Copy_State_F#15
// Offset 98
NOP

// Rung VGR_Copy_State_F#16
// Offset 99
#BEGIN FMT_COMMENT 
"This is suspect -%3E<br> <br>"
"Need to check if its really x57-59  or 28-31"
#END

STR ST1
AND C2001
COPY 0x1 "4 0x0 Y22 MI200 1 0x0 Y23 MI201 1 0x0 Y24 MI202 1 0x0 Y25 MI203 1 0x0 Y26 MI204 1 0x0 Y27 MI205 1 0x0 Y28 MI206 1 0x0 Y29 MI207 1 0x0 Y88 MI208 1 0x0 Y89 MI209 1 0x0 Y90 MI210 1 0x0 X25 MI211 1 0x0 X26 MI212 1 0x0 X27 MI213 1 0x0 X56 MI214 1 0x0 X57 MI215 1 0x0 X58 MI216 1 0x0 X59 MI217 1 0x0 X60 MI218 1 0x0 X61 MI219 1"

// Rung VGR_Copy_State_F#17
// Offset 145
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC200 C400 8"
POPBOOL
DUPBOOL
AND X26
COPY 0x1 "4 0x0 0 MC203 1"
POPBOOL
DUPBOOL
AND X25
COPY 0x1 "4 0x0 0 MC200 1"
POPBOOL
AND X27
COPY 0x1 "4 0x0 0 MC204 1"

// Rung VGR_Copy_State_F#18
// Offset 178
STR C2000
COPY 0x1 "4 0x0 0 MC200 8"

// Rung VGR_Copy_State_F#19
// Offset 185
RET

// End of Code Block VGR_Copy_State_F
$LGCEND VGR_Copy_State_F

// Beginning of Code Block VGR_Suction_F
$LGCMOD VGR_Suction_F

// Rung VGR_Suction_F#1
// Offset 0
#BEGIN FMT_COMMENT 
"Keep on for duration of function"
#END

STR ST1
OUT Y28

// Rung VGR_Suction_F#2
// Offset 2
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Suction_F#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_Suction_F#4
// Offset 29
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_Suction_F#5
// Offset 35
STRGE $VGR_Encoder_Y.Acc N1002
SET C550
RST C611

// Rung VGR_Suction_F#6
// Offset 41
#BEGIN FMT_COMMENT 
"Set Vaccum this should only need to be set once then it "
"holds vacuum until released"
#END

STR C550
OUT Y29
SET C612

// Rung VGR_Suction_F#7
// Offset 44
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_Suction_F#8
// Offset 50
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_Suction_F#9
// Offset 56
NOP

// Rung VGR_Suction_F#10
// Offset 57
RET

// End of Code Block VGR_Suction_F
$LGCEND VGR_Suction_F

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
#BEGIN FMT_COMMENT 
"Enable the vaccum and turn on the valve to hold suction "
"when we are inisde and in the oven reset stage of MPO "
"Program."
#END

STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
OR MPO_Program.S8
OR MPO_Program.S13
OR MPO_Program.S9
OR MPO_Program.S11
AND C2000
OUT Y17

// Rung MPO_Suction#2
// Offset 14
NOP

// Rung MPO_Suction#3
// Offset 15
STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
AND C2000
AND Y17
OUT Y20

// Rung MPO_Suction#4
// Offset 26
NOP

// Rung MPO_Suction#5
// Offset 27
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y45 MI400 1 0x0 Y46 MI401 1 0x0 Y47 MI402 1 0x0 Y43 MI403 1 0x0 Y44 MI404 1 0x0 Y52 MI405 1 0x0 Y53 MI406 1 0x0 Y15 MI407 1 0x0 Y16 MI408 1 0x0 Y17 MI409 1 0x0 Y18 MI410 1 0x0 Y19 MI411 1 0x0 Y20 MI412 1 0x0 Y21 MI413 1 0x0 Y13 MI414 1 0x0 Y91 MI415 1 0x0 X12 MI416 1 0x0 X13 MI417 1 0x0 X14 MI418 1 0x0 X15 MI419 1 0x0 X16 MI420 1 0x0 X17 MI421 1 0x0 X18 MI422 1 0x0 X19 MI423 1 0x0 X24 MI424 1 0x0 MHR440 V1600 1 0x0 MC440 C840 1 0x0 C841 MC441 1 0x0 MC442 C842 1"

// Rung MPO_Copy_State#2
// Offset 63
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC400 C800 14"
POPBOOL
DUPBOOL
AND X16
COPY 0x1 "4 0x0 0 MC407 1"
POPBOOL
DUPBOOL
AND X19
COPY 0x1 "4 0x0 0 MC406 1"
POPBOOL
DUPBOOL
AND X13
COPY 0x1 "4 0x0 0 MC400 1"
POPBOOL
DUPBOOL
AND X12
COPY 0x1 "4 0x0 0 MC401 1"
POPBOOL
DUPBOOL
STR X17
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC404 1"
POPBOOL
STR X18
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC405 1"

// Rung MPO_Copy_State#3
// Offset 124
STR C2000
COPY 0x1 "4 0x0 0 MC400 14 0x0 0 C800 14"

// Rung MPO_Copy_State#4
// Offset 133
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y30 MI800 1 0x0 Y31 MI801 1 0x0 Y32 MI802 1 0x0 Y33 MI803 1 0x0 Y34 MI804 1 0x0 X34 MI805 1 0x0 X35 MI806 1 0x0 X36 MI807 1 0x0 V3200 MHR1600 1 0x0 X37 MI809 1 0x0 X38 MI810 1 0x0 X39 MI811 1"

// Rung SLD_Copy_State#2
// Offset 29
STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Copy_State#3
// Offset 34
STR C2001
COPY 0x1 "4 0x0 MC800 C1600 5"

// Rung SLD_Copy_State#4
// Offset 42
STR C2000
COPY 0x1 "4 0x0 0 MC800 5"

// Rung SLD_Copy_State#5
// Offset 49
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
STR SLD_Program.S3
OUT Y31

// Rung SLD_Suction#2
// Offset 2
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block All_Copy_States
$LGCMOD All_Copy_States

// Rung All_Copy_States#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC1000 C2000 1 0x0 MC56 C56 1"

// Rung All_Copy_States#2
// Offset 9
STR C2000
RST C2001

// Rung All_Copy_States#3
// Offset 11
STRN C2000
SET C2001
COPY 0x1 "4 0x0 0 MC56 1"
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung All_Copy_States#4
// Offset 25
STR ST1
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#5
// Offset 33
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#6
// Offset 41
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#7
// Offset 49
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#8
// Offset 57
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#9
// Offset 65
RET

// End of Code Block All_Copy_States
$LGCEND All_Copy_States

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y35 MI600 1 0x0 Y36 MI601 1 0x0 Y37 MI602 1 0x0 Y38 MI603 1 0x0 Y39 MI604 1 0x0 Y40 MI605 1 0x0 Y41 MI606 1 0x0 Y42 MI607 1 0x0 X40 MI610 1 0x0 X41 MI611 1 0x0 X42 MI612 1 0x0 X43 MI613 1 0x0 V2400 MHR1200 1 0x0 X44 MI615 1 0x0 X45 MI616 1 0x0 X46 MI617 1 0x0 X47 MI618 1"

// Rung SSC_Copy_State#2
// Offset 39
STR ST1
SUBSCRIB "4 WX1 V2400 1 0x4"

// Rung SSC_Copy_State#3
// Offset 44
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC600 C1200 8"
POPBOOL
AND X40
COPY 0x1 "4 0x0 0 MC601 1"

// Rung SSC_Copy_State#4
// Offset 61
STR C2000
COPY 0x1 "4 0x0 0 MC600 8"

// Rung SSC_Copy_State#5
// Offset 68
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_get_X_Z
$LGCMOD HBW_get_X_Z

// Rung HBW_get_X_Z#1
// Offset 0
NOP

// Rung HBW_get_X_Z#2
// Offset 1
#BEGIN FMT_COMMENT 
"Get Column, right digit"
#END

STR ST1
MATH N201 "N200 % 10"

// Rung HBW_get_X_Z#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get Row, left digit"
#END

STR ST1
MATH N202 "(N200 - N201) / 10"

// Rung HBW_get_X_Z#4
// Offset 21
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 1
COPY 0x1 "4 0x0 7650 N203 1"

// Rung HBW_get_X_Z#5
// Offset 31
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 2
COPY 0x1 "4 0x0 5331 N203 1"

// Rung HBW_get_X_Z#6
// Offset 41
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 3
COPY 0x1 "4 0x0 3000 N203 1"

// Rung HBW_get_X_Z#7
// Offset 51
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 1
COPY 0x1 "4 0x0 425 N204 1"

// Rung HBW_get_X_Z#8
// Offset 61
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 2
COPY 0x1 "4 0x0 1750 N204 1"

// Rung HBW_get_X_Z#9
// Offset 71
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 3
COPY 0x1 "4 0x0 3300 N204 1"

// Rung HBW_get_X_Z#10
// Offset 81
RET

// End of Code Block HBW_get_X_Z
$LGCEND HBW_get_X_Z

// Beginning of Code Block HBW_Manual_F
$LGCMOD HBW_Manual_F

// Rung HBW_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C2
AND C1
STRN C1
AND C2
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 500 60
POPBOOL
DUPBOOL
AND C1
OUT Y48
POPBOOL
AND C2
OUT Y49

// Rung HBW_Manual_F#2
// Offset 29
STR ST1
DUPBOOL
STRN C4
AND C3
STRN C3
AND C4
ANDN X0
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
POPBOOL
DUPBOOL
AND C3
OUT Y50
POPBOOL
AND C4
ANDN X0
OUT Y51

// Rung HBW_Manual_F#3
// Offset 60
STR ST1
DUPBOOL
STRN C6
AND C5
ANDN X3
STRN C5
AND C6
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
POPBOOL
DUPBOOL
AND C5
ANDN X3
OUT Y5
POPBOOL
AND C6
OUT Y4

// Rung HBW_Manual_F#4
// Offset 91
STR ST1
DUPBOOL
STRN C8
AND C7
ANDN X10
STRN C7
AND C8
ANDN X11
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
POPBOOL
DUPBOOL
AND C7
ANDN X10
OUT Y6
POPBOOL
AND C8
ANDN X11
OUT Y7

// Rung HBW_Manual_F#5
// Offset 124
RET

// End of Code Block HBW_Manual_F
$LGCEND HBW_Manual_F

// Beginning of Code Block MPO_Manual
$LGCMOD MPO_Manual

// Rung MPO_Manual#1
// Offset 0
STR C800
ANDN X13
OUT Y45

// Rung MPO_Manual#2
// Offset 3
STR C801
ANDN X12
OUT Y46

// Rung MPO_Manual#3
// Offset 6
STR C802
OUT Y47

// Rung MPO_Manual#4
// Offset 8
STR C803
OUT Y43

// Rung MPO_Manual#5
// Offset 10
STR C804
AND Y20
ANDN X17
OUT Y44

// Rung MPO_Manual#6
// Offset 14
STR C805
AND Y20
ANDN X18
OUT Y52

// Rung MPO_Manual#7
// Offset 18
STR ST1
DUPBOOL
STRN C807
AND C806
ANDN X19
STRN C806
AND C807
ANDN X16
ORSTR
ANDSTR
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
POPBOOL
DUPBOOL
AND C806
ANDN X19
OUT Y53
POPBOOL
AND C807
ANDN X16
OUT Y15

// Rung MPO_Manual#8
// Offset 51
STR C808
OUT Y16

// Rung MPO_Manual#9
// Offset 53
STR C809
OUT Y17

// Rung MPO_Manual#10
// Offset 55
STR C810
OUT Y18

// Rung MPO_Manual#11
// Offset 57
STR C811
OUT Y19

// Rung MPO_Manual#12
// Offset 59
STR C812
OUT Y20

// Rung MPO_Manual#13
// Offset 61
STR C813
OUT Y21

// Rung MPO_Manual#14
// Offset 63
RET

// End of Code Block MPO_Manual
$LGCEND MPO_Manual

// Beginning of Code Block SLD_Manual
$LGCMOD SLD_Manual

// Rung SLD_Manual#1
// Offset 0
STR C1600
OUT Y30

// Rung SLD_Manual#2
// Offset 2
STR C1601
OUT Y31

// Rung SLD_Manual#3
// Offset 4
STR C1602
OUT Y32

// Rung SLD_Manual#4
// Offset 6
STR C1603
OUT Y33

// Rung SLD_Manual#5
// Offset 8
STR C1604
OUT Y34

// Rung SLD_Manual#6
// Offset 10
RET

// End of Code Block SLD_Manual
$LGCEND SLD_Manual

// Beginning of Code Block HBW_Copy_State_F
$LGCMOD HBW_Copy_State_F

// Rung HBW_Copy_State_F#1
// Offset 0
STR ST1
AND C2000
COPY 0x1 "4 0x0 MC1 C1 27 0x0 X6 MI7 4"

// Rung HBW_Copy_State_F#2
// Offset 12
NOP

// Rung HBW_Copy_State_F#3
// Offset 13
STR ST1
DUPBOOL
ANDN C56
AND HBW_Program.S97
COPY 0x1 "4 0x0 MHR1 N300 1 0x0 400 V400 1"
POPBOOL
DUPBOOL
ANDN C56
ANDN HBW_Program.S97
COPY 0x1 "4 0x0 0 MHR1 1"
POPBOOL
AND C56
COPY 0x1 "4 0x0 0 MHR1 1"

// Rung HBW_Copy_State_F#4
// Offset 43
#BEGIN FMT_COMMENT 
"Sensor data, and Auto/Manual switch<br>"
#END

STR ST1
AND C2001
COPY 0x1 "4 0x0 Y48 MI1 1 0x0 Y49 MI2 1 0x0 Y50 MI3 1 0x0 Y51 MI4 1 0x0 Y4 MI5 1 0x0 Y5 MI6 1 0x0 Y6 MI7 1 0x0 Y7 MI8 1 0x0 Y80 MI9 1 0x0 Y81 MI10 1 0x0 Y82 MI11 1 0x0 Y83 MI12 1 0x0 X0 MI13 1 0x0 X1 MI14 1 0x0 X2 MI15 1 0x0 X3 MI16 1 0x0 X4 MI17 1 0x0 X5 MI18 1 0x0 X6 MI19 1 0x0 X7 MI20 1 0x0 X8 MI21 1 0x0 X9 MI22 1 0x0 X10 MI23 1 0x0 X11 MI24 1 0x0 0 MHR1 1"
RST C300

// Rung HBW_Copy_State_F#5
// Offset 100
#BEGIN FMT_COMMENT 
"Manual mode enabled. Coil data is copied from the switch "
"position on the HMI<br> <br>"
"Sends a 0 to the Modbus coil output to disable the switch "
"for reference switches"
#END

STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC1 C1 8"
POPBOOL
DUPBOOL
AND X0
COPY 0x1 "4 0x0 0 MC4 1"
POPBOOL
DUPBOOL
AND X3
COPY 0x1 "4 0x0 0 MC5 1"
POPBOOL
DUPBOOL
AND X10
COPY 0x1 "4 0x0 0 MC7 1"
POPBOOL
AND X11
COPY 0x1 "4 0x0 0 MC8 1"

// Rung HBW_Copy_State_F#6
// Offset 141
#BEGIN FMT_COMMENT 
"Auto mode enabled. This turns off all coils on the HMI."
#END

STR C2000
COPY 0x1 "4 0x0 0 MC1 8"

// Rung HBW_Copy_State_F#7
// Offset 148
RET

// End of Code Block HBW_Copy_State_F
$LGCEND HBW_Copy_State_F

// Beginning of Code Block HBW_lift_seq
$LGCMOD HBW_lift_seq

// Rung HBW_lift_seq#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_lift_seq#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_lift_seq#3
// Offset 5
STR X10
OUT C200

// Rung HBW_lift_seq#4
// Offset 7
STR ST1
MATH N203 "N202 - 400"

// Rung HBW_lift_seq#5
// Offset 16
STRLE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_lift_seq#6
// Offset 22
STRN X3
AND C200
OUT Y5

// Rung HBW_lift_seq#7
// Offset 25
STRN X11
AND C201
OUT Y7

// Rung HBW_lift_seq#8
// Offset 28
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_lift_seq#9
// Offset 33
NOP

// Rung HBW_lift_seq#10
// Offset 34
RET

// End of Code Block HBW_lift_seq
$LGCEND HBW_lift_seq

// Beginning of Code Block SSC_Manual
$LGCMOD SSC_Manual

// Rung SSC_Manual#1
// Offset 0
STR C1200
OUT Y35

// Rung SSC_Manual#2
// Offset 2
STR C1201
ANDN X40
OUT Y36

// Rung SSC_Manual#3
// Offset 5
STR C1202
OUT Y37

// Rung SSC_Manual#4
// Offset 7
STR C1203
OUT Y38

// Rung SSC_Manual#5
// Offset 9
STR C1204
OUT Y39

// Rung SSC_Manual#6
// Offset 11
STR C1205
OUT Y40

// Rung SSC_Manual#7
// Offset 13
STR C1206
OUT Y41

// Rung SSC_Manual#8
// Offset 15
STR C1207
OUT Y42

// Rung SSC_Manual#9
// Offset 17
RET

// End of Code Block SSC_Manual
$LGCEND SSC_Manual

// Beginning of Code Block VGR_Manual_F
$LGCMOD VGR_Manual_F

// Rung VGR_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C401
AND C400
ANDN X25
STRN C400
AND C401
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 60
POPBOOL
DUPBOOL
AND C400
ANDN X25
OUT Y22
POPBOOL
AND C401
OUT Y23

// Rung VGR_Manual_F#2
// Offset 31
STR ST1
DUPBOOL
STRN C403
AND C402
STRN C402
AND C403
ANDN X26
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 60
POPBOOL
DUPBOOL
AND C402
OUT Y25
POPBOOL
AND C403
ANDN X26
OUT Y24

// Rung VGR_Manual_F#3
// Offset 62
STR ST1
DUPBOOL
STRN C405
AND C404
ANDN X27
STRN C404
AND C405
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 60
POPBOOL
DUPBOOL
AND C404
ANDN X27
OUT Y26
POPBOOL
AND C405
OUT Y27

// Rung VGR_Manual_F#4
// Offset 93
STR C406
OUT Y28

// Rung VGR_Manual_F#5
// Offset 95
STR C407
OUT Y29

// Rung VGR_Manual_F#6
// Offset 97
RET

// End of Code Block VGR_Manual_F
$LGCEND VGR_Manual_F

// Beginning of Code Block HBW_load_convyr
$LGCMOD HBW_load_convyr

// Rung HBW_load_convyr#1
// Offset 0
NOP

// Rung HBW_load_convyr#2
// Offset 1
#BEGIN FMT_COMMENT 
"Horizontal PWM Motor"
#END

STRLE 80 $HBW_Encoder_X.Acc
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 150 R101

// Rung HBW_load_convyr#3
// Offset 19
#BEGIN FMT_COMMENT 
"Vertical PWM Motor"
#END

STRLE 2620 $HBW_Encoder_Z.Acc
ORGE 2580 $HBW_Encoder_Z.Acc
OR C200
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_load_convyr#4
// Offset 42
#BEGIN FMT_COMMENT 
"Cantilever PWM Motor"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_load_convyr#5
// Offset 57
STRN X10
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDGE 2620 $HBW_Encoder_Z.Acc
ANDGE 80 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_load_convyr#6
// Offset 71
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_load_convyr#7
// Offset 73
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 80 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_load_convyr#8
// Offset 79
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDGE 3000 $HBW_Encoder_Z.Acc
STRN C200
ANDGE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y4

// Rung HBW_load_convyr#9
// Offset 92
STRN C200
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_load_convyr#10
// Offset 103
STR C200
ANDLE 3000 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_load_convyr#11
// Offset 110
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDLE 2620 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y5

// Rung HBW_load_convyr#12
// Offset 117
STRN X11
AND C201
OUT Y7

// Rung HBW_load_convyr#13
// Offset 120
STR X11
AND C201
OUT C203
RST C201
RST C204

// Rung HBW_load_convyr#14
// Offset 125
NOP

// Rung HBW_load_convyr#15
// Offset 126
RET

// End of Code Block HBW_load_convyr
$LGCEND HBW_load_convyr

// Beginning of Code Block HBW_PWM_On
$LGCMOD HBW_PWM_On

// Rung HBW_PWM_On#1
// Offset 0
STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_PWM_On#2
// Offset 15
STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 R101

// Rung HBW_PWM_On#3
// Offset 30
STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_PWM_On#4
// Offset 45
STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_PWM_On#5
// Offset 60
RET

// End of Code Block HBW_PWM_On
$LGCEND HBW_PWM_On

// Beginning of Code Block HBW_Reset_Flags
$LGCMOD HBW_Reset_Flags

// Rung HBW_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C100 5 0x0 0 C200 15"

// Rung HBW_Reset_Flags#2
// Offset 9
NOP

// Rung HBW_Reset_Flags#3
// Offset 10
NOP

// Rung HBW_Reset_Flags#4
// Offset 11
RET

// End of Code Block HBW_Reset_Flags
$LGCEND HBW_Reset_Flags

// Beginning of Code Block HBW_rst_switches
$LGCMOD HBW_rst_switches

// Rung HBW_rst_switches#1
// Offset 0
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_rst_switches#2
// Offset 2
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_rst_switches#3
// Offset 4
STR X0
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_rst_switches#4
// Offset 6
STR X3
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_rst_switches#5
// Offset 8
NOP

// Rung HBW_rst_switches#6
// Offset 9
RET

// End of Code Block HBW_rst_switches
$LGCEND HBW_rst_switches

// Beginning of Code Block HBW_Unload_Conv
$LGCMOD HBW_Unload_Conv

// Rung HBW_Unload_Conv#1
// Offset 0
STRN X10
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDGE 3030 $HBW_Encoder_Z.Acc
ANDGE 40 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_Unload_Conv#2
// Offset 14
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_Unload_Conv#3
// Offset 16
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 40 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_Unload_Conv#4
// Offset 22
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDLE 2620 $HBW_Encoder_Z.Acc
STRN C200
ANDLE 3030 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y5

// Rung HBW_Unload_Conv#5
// Offset 35
STRN C200
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 3030 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_Unload_Conv#6
// Offset 46
STR C200
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_Unload_Conv#7
// Offset 53
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDGE 2980 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y4

// Rung HBW_Unload_Conv#8
// Offset 60
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Conv#9
// Offset 63
STR X11
AND C201
OUT C205
RST C201
RST C204

// Rung HBW_Unload_Conv#10
// Offset 68
NOP

// Rung HBW_Unload_Conv#11
// Offset 69
NOP

// Rung HBW_Unload_Conv#12
// Offset 70
RET

// End of Code Block HBW_Unload_Conv
$LGCEND HBW_Unload_Conv

// Beginning of Code Block HBW_Unload_Rack
$LGCMOD HBW_Unload_Rack

// Rung HBW_Unload_Rack#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Unload_Rack#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_Unload_Rack#3
// Offset 5
STR X10
SET C200

// Rung HBW_Unload_Rack#4
// Offset 7
STR ST1
MATH N203 "N202 + 400"

// Rung HBW_Unload_Rack#5
// Offset 16
STRGE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_Unload_Rack#6
// Offset 22
STR C200
OUT Y4

// Rung HBW_Unload_Rack#7
// Offset 24
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Rack#8
// Offset 27
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_Unload_Rack#9
// Offset 32
NOP

// Rung HBW_Unload_Rack#10
// Offset 33
NOP

// Rung HBW_Unload_Rack#11
// Offset 34
RET

// End of Code Block HBW_Unload_Rack
$LGCEND HBW_Unload_Rack

// Beginning of Code Block VGR_vacuum_drop
$LGCMOD VGR_vacuum_drop

// Rung VGR_vacuum_drop#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_vacuum_drop#2
// Offset 8
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_vacuum_drop#3
// Offset 27
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_vacuum_drop#4
// Offset 33
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_vacuum_drop#5
// Offset 39
#BEGIN FMT_COMMENT 
"Turn off vacuum, this is run in VGR program, so no need to "
"run in this submodule"
#END

STRGE $VGR_Encoder_Y.Acc N1002
RST C550
RST C611
SET C612

// Rung VGR_vacuum_drop#6
// Offset 46
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_vacuum_drop#7
// Offset 52
NOP

// Rung VGR_vacuum_drop#8
// Offset 53
NOP

// Rung VGR_vacuum_drop#9
// Offset 54
RET

// End of Code Block VGR_vacuum_drop
$LGCEND VGR_vacuum_drop

// Beginning of Code Block VGR_dropoff
$LGCMOD VGR_dropoff

// Rung VGR_dropoff#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 450 N1005 1 0x0 420 N1006 1 0x0 268 N1007 1 0x0 298 N1008 1 0x0 2320 N1009 1"

// Rung VGR_dropoff#2
// Offset 16
STR X25
SET C600

// Rung VGR_dropoff#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_dropoff#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_dropoff#5
// Offset 23
STR X26
SET C601

// Rung VGR_dropoff#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_dropoff#7
// Offset 31
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_dropoff#8
// Offset 37
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_dropoff#9
// Offset 46
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_dropoff#10
// Offset 54
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_dropoff#11
// Offset 63
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_dropoff#12
// Offset 75
STR C604
ANDN X26
OUT Y24

// Rung VGR_dropoff#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_dropoff#14
// Offset 81
NOP

// Rung VGR_dropoff#15
// Offset 82
RET

// End of Code Block VGR_dropoff
$LGCEND VGR_dropoff

// Beginning of Code Block VGR_home_reset
$LGCMOD VGR_home_reset

// Rung VGR_home_reset#1
// Offset 0
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_home_reset#2
// Offset 2
STR X25
SET C600

// Rung VGR_home_reset#3
// Offset 4
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_home_reset#4
// Offset 7
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_home_reset#5
// Offset 11
#BEGIN FMT_COMMENT 
"Return to home position on rotation facing train depot"
#END

STR C601
ANDN X27
OUT Y26

// Rung VGR_home_reset#6
// Offset 14
#BEGIN FMT_COMMENT 
"C602 is the DONE flag for this function"
#END

STR X27
SET C602
RST C601

// Rung VGR_home_reset#7
// Offset 17
RET

// End of Code Block VGR_home_reset
$LGCEND VGR_home_reset

// Beginning of Code Block VGR_pickup
$LGCMOD VGR_pickup

// Rung VGR_pickup#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 40 N1007 1 0x0 70 N1008 1 0x0 2350 N1009 1"

// Rung VGR_pickup#2
// Offset 16
STR X25
SET C600

// Rung VGR_pickup#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_pickup#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_pickup#5
// Offset 23
STR X26
SET C601

// Rung VGR_pickup#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_pickup#7
// Offset 31
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_pickup#8
// Offset 37
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_pickup#9
// Offset 46
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_pickup#10
// Offset 54
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_pickup#11
// Offset 63
STR C603
CALL VGR_Suction_F 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_pickup#12
// Offset 75
STR C604
ANDN X26
OUT Y24

// Rung VGR_pickup#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_pickup#14
// Offset 81
NOP

// Rung VGR_pickup#15
// Offset 82
NOP

// Rung VGR_pickup#16
// Offset 83
RET

// End of Code Block VGR_pickup
$LGCEND VGR_pickup

// Beginning of Code Block VGR_PWM_ON
$LGCMOD VGR_PWM_ON

// Rung VGR_PWM_ON#1
// Offset 0
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R900

// Rung VGR_PWM_ON#2
// Offset 15
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 R901

// Rung VGR_PWM_ON#3
// Offset 30
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 R902

// Rung VGR_PWM_ON#4
// Offset 45
RET

// End of Code Block VGR_PWM_ON
$LGCEND VGR_PWM_ON

// Beginning of Code Block VGR_Reset_Flags
$LGCMOD VGR_Reset_Flags

// Rung VGR_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C500 10 0x0 0 C600 20"

// Rung VGR_Reset_Flags#2
// Offset 9
NOP

// Rung VGR_Reset_Flags#3
// Offset 10
RET

// End of Code Block VGR_Reset_Flags
$LGCEND VGR_Reset_Flags

// Beginning of Code Block VGR_Rotate_To
$LGCMOD VGR_Rotate_To

// Rung VGR_Rotate_To#1
// Offset 0
STR ST1
MATH N1001 "N1000 - 15"
MATH N1002 "N1000 + 15"

// Rung VGR_Rotate_To#2
// Offset 17
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_Rotate_To#3
// Offset 19
STR X25
SET C600

// Rung VGR_Rotate_To#4
// Offset 21
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_Rotate_To#5
// Offset 24
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_Rotate_To#6
// Offset 28
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDLE $VGR_Encoder_Rot.Acc N1001
OUT Y27

// Rung VGR_Rotate_To#7
// Offset 34
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDGE $VGR_Encoder_Rot.Acc N1002
OUT Y26

// Rung VGR_Rotate_To#8
// Offset 40
#BEGIN FMT_COMMENT 
"Desired Rotation Reached, C602 is DONE flag for this function"
#END

STRLE $VGR_Encoder_Rot.Acc N1002
ANDGE $VGR_Encoder_Rot.Acc N1001
AND C601
SET C602

// Rung VGR_Rotate_To#9
// Offset 50
RET

// End of Code Block VGR_Rotate_To
$LGCEND VGR_Rotate_To

// Beginning of Code Block VGR_rst_switches
$LGCMOD VGR_rst_switches

// Rung VGR_rst_switches#1
// Offset 0
STR ST1
OUT $VGR_Encoder_Rot.EnableCapture

// Rung VGR_rst_switches#2
// Offset 2
STR ST1
OUT $VGR_Encoder_X.EnableCapture

// Rung VGR_rst_switches#3
// Offset 4
STR ST1
OUT $VGR_Encoder_Y.EnableCapture

// Rung VGR_rst_switches#4
// Offset 6
NOP

// Rung VGR_rst_switches#5
// Offset 7
STR X25
OUT $VGR_Encoder_Y.ResetLevel

// Rung VGR_rst_switches#6
// Offset 9
STR X26
OUT $VGR_Encoder_X.ResetLevel

// Rung VGR_rst_switches#7
// Offset 11
STR X27
OUT $VGR_Encoder_Rot.ResetLevel

// Rung VGR_rst_switches#8
// Offset 13
RET

// End of Code Block VGR_rst_switches
$LGCEND VGR_rst_switches

// Beginning of Code Block PWM_ramp_UP
$LGCMOD PWM_ramp_UP

// Rung PWM_ramp_UP#1
// Offset 0
NOP

// Rung PWM_ramp_UP#2
// Offset 1
STR ST1
INC D1000

// Rung PWM_ramp_UP#3
// Offset 3
STR ST1
MATH R1000 "(((R1002 - R1001) * D1000) / D1001) + R1001"

// Rung PWM_ramp_UP#4
// Offset 18
RET

// End of Code Block PWM_ramp_UP
$LGCEND PWM_ramp_UP

// Beginning of Code Block $tFirstScan
$TSK $tFirstScan

// Rung $tFirstScan#1
// Offset 0
NOP

// Rung $tFirstScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Variables only initialized once"
#END

STR ST1
INIT "3 N800 N1599 0 MHR1 ST1023 0 C1 C799 0 R100 R100 40 R101 R101 90 R102 R102 52 R103 R103 50 R900 R900 90 R901 R901 90 R902 R902 50"

// Rung $tFirstScan#3
// Offset 33
STR ST1
INIT "3 V400 ST1023 400 N400 ST1023 11 N401 ST1023 12 N402 ST1023 13 N403 ST1023 21 N404 ST1023 22 N405 ST1023 23 N406 ST1023 31 N407 ST1023 32 N408 ST1023 33"

// Rung $tFirstScan#4
// Offset 57
STR ST1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// End of Code Block $tFirstScan
$TSKEND $tFirstScan

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Spring 2022 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 02/14/22"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Call all copy_states"
#END

STR ST1
CALL All_Copy_States 0x1 DST511 "3" "3"

// Rung $Main#3
// Offset 9
STR ST1
AND C2000
RUN HBW_Program

// Rung $Main#4
// Offset 13
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL HBW_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#5
// Offset 25
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
AND C2000
RUN VGR_Program

// Rung $Main#6
// Offset 29
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL VGR_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#7
// Offset 41
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
AND C2000
RUN MPO_Program

// Rung $Main#8
// Offset 45
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL MPO_Manual 0x1 DST511 "3" "3"

// Rung $Main#9
// Offset 57
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
AND C2000
RUN SSC_Program

// Rung $Main#10
// Offset 61
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL SSC_Manual 0x1 DST511 "3" "3"

// Rung $Main#11
// Offset 73
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
AND C2000
RUN SLD_Program

// Rung $Main#12
// Offset 77
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL SLD_Manual 0x1 DST511 "3" "3"

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program<br>"
#END

STR C2001
EXIT

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
CALL VGR_rst_switches 0x1 DST511 "3" "3"

// Rung VGR_Program#4
// Offset 18
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Program#5
// Offset 26
#BEGIN FMT_COMMENT 
"Have on for duration of function"
#END

STR C550
OUT Y29

// Rung VGR_Program#6
// Offset 28
#BEGIN FMT_COMMENT 
"Home position at program start, up, back rotation safest order"
#END

SG VGR_Program.S99

// Rung VGR_Program#7
// Offset 30
STR ST1
AND ST2
JMP VGR_Program.S100

// Rung VGR_Program#8
// Offset 33
STR ST1
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C500 1"

// Rung VGR_Program#9
// Offset 43
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#10
// Offset 52
SG VGR_Program.S7

// Rung VGR_Program#11
// Offset 54
STR C300
JMP VGR_Program.S0
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#12
// Offset 63
STR C39
JMP VGR_Program.S11
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#13
// Offset 72
NOP

// Rung VGR_Program#14
// Offset 73
#BEGIN FMT_COMMENT 
"Pickup material from HBW"
#END

SG VGR_Program.S0

// Rung VGR_Program#15
// Offset 75
STR C300
CALL VGR_pickup 0x1 DST511 "3 5370 N1005 1 5310 N1006 1 730 N1007 1 895 N1008 1 545 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#16
// Offset 95
STR C500
JMP VGR_Program.S1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C300

// Rung VGR_Program#17
// Offset 105
#BEGIN FMT_COMMENT 
"Dropoff Raw material at MPO station"
#END

SG VGR_Program.S1

// Rung VGR_Program#18
// Offset 107
STR ST1
CALL VGR_dropoff 0x1 DST511 "3 3500 N1005 1 3490 N1006 1 3300 N1007 1 3330 N1008 1 2000 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#19
// Offset 127
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C701

// Rung VGR_Program#20
// Offset 137
SG VGR_Program.S11

// Rung VGR_Program#21
// Offset 139
STR ST1
CALL VGR_Rotate_To 0x1 DST511 "3 2500 N1000 1" "3 C601 C500 1"

// Rung VGR_Program#22
// Offset 151
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C39

// Rung VGR_Program#23
// Offset 161
SG VGR_Program.S20

// Rung VGR_Program#24
// Offset 163
NOP

// Rung VGR_Program#25
// Offset 164
NOP

// Rung VGR_Program#26
// Offset 165
STRPD C409
AND ST2
INIT "3 N800 ST1023 1 N801 ST1023 1000"

// Rung VGR_Program#27
// Offset 175
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#28
// Offset 183
#BEGIN FMT_COMMENT 
"Accelerate from min/max PWM rate per sub_routine"
#END

STR C409
ANDLE N800 N801
CALL PWM_ramp_UP 0x1 DST511 "3 N800 N1000 2 20.0 R1001 1 50.0 R1002 1" "3 R1000 R800 1 N1000 N800 1"

// Rung VGR_Program#29
// Offset 208
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C409
OR C410
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R800
OUT Y88

// Rung VGR_Program#30
// Offset 225
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C409
AND Y88
ANDN CT50.Done
OUT Y22

// Rung VGR_Program#31
// Offset 229
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C410
AND Y88
ANDN CT50.Done
OUT Y23

// Rung VGR_Program#32
// Offset 233
NOP

// Rung VGR_Program#33
// Offset 234
SG VGR_Program.S100

// Rung VGR_Program#34
// Offset 236
NOP

// Rung VGR_Program#35
// Offset 237
STR ST1
AND ST2
OUT Y15

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"MPO Program"
#END

STR C2001
EXIT

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL MPO_Suction 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 14
STR C842
SGRSTR MPO_Program.S1 MPO_Program.S19
SGSET MPO_Program.S0
COPY 0x1 "4 0x0 0 MC442 1"

// Rung MPO_Program#4
// Offset 23
STR MPO_Program.S1
AND MPO_Program.S2
AND MPO_Program.S3
ANDN MPO_Program.S12
SET C841

// Rung MPO_Program#5
// Offset 28
SG MPO_Program.S0

// Rung MPO_Program#6
// Offset 30
RST C900

// Rung MPO_Program#7
// Offset 31
STR ST1
AND C2000
ANDN MPO_Program.S1
ANDN MPO_Program.S2
ANDN MPO_Program.S3
SGDIVRG "1 MPO_Program.S1 MPO_Program.S2 MPO_Program.S3"
RST C900
RST C901
RST Y18
SET C841

// Rung MPO_Program#8
// Offset 44
SG MPO_Program.S1

// Rung MPO_Program#9
// Offset 46
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X18
ONDTMR T0 1000 Y52

// Rung MPO_Program#10
// Offset 50
STRN X24
JMP MPO_Program.S4
RST C841

// Rung MPO_Program#11
// Offset 53
SG MPO_Program.S4

// Rung MPO_Program#12
// Offset 55
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X17
ONDTMR T1 3000 Y44

// Rung MPO_Program#13
// Offset 59
STR X17
JMP MPO_Program.S7

// Rung MPO_Program#14
// Offset 61
SG MPO_Program.S7

// Rung MPO_Program#15
// Offset 63
TMRDOWN T2 5000
OUT Y16

// Rung MPO_Program#16
// Offset 66
STR T2.Done
JMP MPO_Program.S10

// Rung MPO_Program#17
// Offset 68
SG MPO_Program.S10

// Rung MPO_Program#18
// Offset 70
STRN X18
ONDTMR T5 1000 Y52

// Rung MPO_Program#19
// Offset 74
STR X18
AND MPO_Program.S11
TMRDOWN T3 1000

// Rung MPO_Program#20
// Offset 78
STR T3.Done
JMP MPO_Program.S1

// Rung MPO_Program#21
// Offset 80
SG MPO_Program.S2

// Rung MPO_Program#22
// Offset 82
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y15

// Rung MPO_Program#23
// Offset 98
#BEGIN FMT_COMMENT 
"Move to the oven when the item is baking<br>"
#END

STR MPO_Program.S7
JMP MPO_Program.S5

// Rung MPO_Program#24
// Offset 100
SG MPO_Program.S5

// Rung MPO_Program#25
// Offset 102
STRN X19
AND C701
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y53

// Rung MPO_Program#26
// Offset 119
STRN MPO_Program.S7
AND X19
JMP MPO_Program.S8

// Rung MPO_Program#27
// Offset 122
SG MPO_Program.S8

// Rung MPO_Program#28
// Offset 124
STR X18
TMRDOWN T6 1000
OUT Y19

// Rung MPO_Program#29
// Offset 128
STR T6.Done
SET Y18
JMP MPO_Program.S11

// Rung MPO_Program#30
// Offset 131
SG MPO_Program.S11

// Rung MPO_Program#31
// Offset 133
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
OUT Y15

// Rung MPO_Program#32
// Offset 149
STR MPO_Program.S3
AND X16
JMP MPO_Program.S13

// Rung MPO_Program#33
// Offset 152
SG MPO_Program.S13

// Rung MPO_Program#34
// Offset 154
STR X16
OUT Y19
TMRDOWN T4 1000

// Rung MPO_Program#35
// Offset 158
STR T4.Done
RST Y18
TMRDOWN T10 250

// Rung MPO_Program#36
// Offset 162
STR T10.Done
JMP MPO_Program.S2

// Rung MPO_Program#37
// Offset 164
SG MPO_Program.S3

// Rung MPO_Program#38
// Offset 166
STRN X12
OUT Y46

// Rung MPO_Program#39
// Offset 168
STRND MPO_Program.S13
SET C900

// Rung MPO_Program#40
// Offset 171
STR C900
TMRDOWN T9 1000

// Rung MPO_Program#41
// Offset 174
STR T9.Done
AND ST1
RST C900
JMP MPO_Program.S6

// Rung MPO_Program#42
// Offset 178
SG MPO_Program.S6

// Rung MPO_Program#43
// Offset 180
STRN X15
OUT Y45

// Rung MPO_Program#44
// Offset 182
STR X15
TMRDOWN T7 3000
OUT Y43

// Rung MPO_Program#45
// Offset 186
STR T7.Done
JMP MPO_Program.S9

// Rung MPO_Program#46
// Offset 188
SG MPO_Program.S9

// Rung MPO_Program#47
// Offset 190
STRN X13
OUT Y45

// Rung MPO_Program#48
// Offset 192
STR X13
TMRDOWN T8 1000
OUT Y21

// Rung MPO_Program#49
// Offset 196
STR T8.Done
JMP MPO_Program.S12

// Rung MPO_Program#50
// Offset 198
SG MPO_Program.S12

// Rung MPO_Program#51
// Offset 200
OUT Y47

// Rung MPO_Program#52
// Offset 201
STRN X14
SET C901

// Rung MPO_Program#53
// Offset 203
STR C901
AND C1706
JMP MPO_Program.S3
RST C901

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program<br>"
#END

STR C2001
EXIT

// Rung SLD_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL SLD_Suction 0x1 DST511 "3" "3"

// Rung SLD_Program#3
// Offset 14
NOP

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S0

// Rung SLD_Program#5
// Offset 17
STR C2000
ANDN SLD_Program.S4
JMP SLD_Program.S4
RST C1700
RST C1701
RST C1702
RST C1703
RST C1704
RST C1705
RST C1706
RST C1707
RST C1708
RST C1709
COPY 0x1 "4 0x0 30000 V3201 1"

// Rung SLD_Program#6
// Offset 36
SG SLD_Program.S4

// Rung SLD_Program#7
// Offset 38
STR C901
JMP SLD_Program.S1

// Rung SLD_Program#8
// Offset 40
SG SLD_Program.S1

// Rung SLD_Program#9
// Offset 42
OUT Y30

// Rung SLD_Program#10
// Offset 43
STRN X35
SET C1703

// Rung SLD_Program#11
// Offset 45
STR C1703
ANDPD X35
SET C1704

// Rung SLD_Program#12
// Offset 49
STRN X36
SET C1705

// Rung SLD_Program#13
// Offset 51
STRLE V3200 V3201
COPY 0x1 "4 0x0 V3200 V3201 1"

// Rung SLD_Program#14
// Offset 61
NOP

// Rung SLD_Program#15
// Offset 62
STR C1705
JMP SLD_Program.S2

// Rung SLD_Program#16
// Offset 64
NOP

// Rung SLD_Program#17
// Offset 65
SG SLD_Program.S2

// Rung SLD_Program#18
// Offset 67
STRGE V3201 18000
ANDLE V3201 21000
SET C1707

// Rung SLD_Program#19
// Offset 76
STRGE V3201 6000
ANDLE V3201 10000
SET C1708

// Rung SLD_Program#20
// Offset 85
STRGE V3201 21500
ANDLE V3201 25000
SET C1709

// Rung SLD_Program#21
// Offset 94
STR C1707
OR C1708
OR C1709
JMP SLD_Program.S3

// Rung SLD_Program#22
// Offset 98
SG SLD_Program.S3

// Rung SLD_Program#23
// Offset 100
STRN Y34
ANDN Y33
ANDN Y32
OUT Y30

// Rung SLD_Program#24
// Offset 104
STR C1705
ANDPD X36
SET C1706

// Rung SLD_Program#25
// Offset 108
STR C1706
AND C1708
ANDN MC450
SET C1701

// Rung SLD_Program#26
// Offset 112
STR C1706
AND C1708
OUT Y32

// Rung SLD_Program#27
// Offset 115
STR C1706
AND C1707
TMRDOWN T16 1100

// Rung SLD_Program#28
// Offset 119
STR T16.Done
ANDN MC450
SET C1700

// Rung SLD_Program#29
// Offset 122
STR T16.Done
OUT Y33

// Rung SLD_Program#30
// Offset 124
STR C1706
AND C1709
TMRDOWN T17 2200

// Rung SLD_Program#31
// Offset 128
STR T17.Done
ANDN MC450
SET C1702

// Rung SLD_Program#32
// Offset 131
STR T17.Done
OUT Y34

// Rung SLD_Program#33
// Offset 133
STR Y32
OR Y33
OR Y34
TMRDOWN T13 1000

// Rung SLD_Program#34
// Offset 138
STR T13.Done
JMP SLD_Program.S0

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SSC Program"
#END

NOP

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program<br>"
#END

STR C2001
EXIT

// Rung HBW_Program#2
// Offset 2
STR ST1
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung HBW_Program#3
// Offset 10
STR ST1
ANDNE N300 0
ANDN C56
CALL HBW_get_X_Z 0x1 DST511 "3 N300 N200 1" "3 N203 N101 1 N204 N102 1"

// Rung HBW_Program#4
// Offset 29
STR ST1
CALL HBW_PWM_On 0x1 DST511 "3" "3"

// Rung HBW_Program#5
// Offset 37
NOP

// Rung HBW_Program#6
// Offset 38
NOP

// Rung HBW_Program#7
// Offset 39
#BEGIN FMT_COMMENT 
"Return to home location, UP/Right to zero encoders at the "
"start of program.  Ideally should already be close to this "
"when program ended if not already there."
#END

SG HBW_Program.S99

// Rung HBW_Program#8
// Offset 41
STRN X11
OUT Y7

// Rung HBW_Program#9
// Offset 43
STR X11
SET C110

// Rung HBW_Program#10
// Offset 45
STRN X0
AND C110
OUT Y51

// Rung HBW_Program#11
// Offset 48
STRN X3
AND C110
OUT Y5

// Rung HBW_Program#12
// Offset 51
STR X0
AND C110
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_Program#13
// Offset 54
STR X3
AND C110
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_Program#14
// Offset 57
STR X0
AND X3
JMP HBW_Program.S97

// Rung HBW_Program#15
// Offset 60
NOP

// Rung HBW_Program#16
// Offset 61
#BEGIN FMT_COMMENT 
"WAIT for new input should get here at the beginning and "
"after finishing a loading sequence"
#END

SG HBW_Program.S97

// Rung HBW_Program#17
// Offset 63
STR C56
ANDGE V400 400
ANDLE V400 408
CALL HBW_get_X_Z 0x1 DST511 "3 N[V400] N200 1" "3 N203 N101 1 N204 N102 1"
INC V400
JMP HBW_Program.S0

// Rung HBW_Program#18
// Offset 88
STRNE N300 0
ANDN C56
JMP HBW_Program.S0
COPY 0x1 "4 0x0 0 MHR1 1 0x0 0 N300 1"

// Rung HBW_Program#19
// Offset 102
SG HBW_Program.S0

// Rung HBW_Program#20
// Offset 104
#BEGIN FMT_COMMENT 
"move left until X value reached assume lift in at this point"
#END

NOP

// Rung HBW_Program#21
// Offset 105
STRN C100
OUT Y50

// Rung HBW_Program#22
// Offset 107
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#23
// Offset 109
STRLE N101 $HBW_Encoder_X.Acc
SET C100

// Rung HBW_Program#24
// Offset 114
STR C100
JMP HBW_Program.S1
RST C100

// Rung HBW_Program#25
// Offset 117
#BEGIN FMT_COMMENT 
"Go to Item on Rack for Pickup"
#END

SG HBW_Program.S1

// Rung HBW_Program#26
// Offset 119
NOP

// Rung HBW_Program#27
// Offset 120
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#28
// Offset 122
STRLE $HBW_Encoder_Z.Acc N102
OUT Y4

// Rung HBW_Program#29
// Offset 127
STRGE $HBW_Encoder_Z.Acc N102
JMP HBW_Program.S2

// Rung HBW_Program#30
// Offset 132
#BEGIN FMT_COMMENT 
"Lift Sequence Rack"
#END

SG HBW_Program.S2

// Rung HBW_Program#31
// Offset 134
STR ST1
ANDN C102
CALL HBW_lift_seq 0x1 DST511 "3 N102 N202 1" "3 C202 C102 1"

// Rung HBW_Program#32
// Offset 147
STR X11
AND C102
JMP HBW_Program.S3
RST C102
RST C202

// Rung HBW_Program#33
// Offset 152
#BEGIN FMT_COMMENT 
"Load Conveyor"
#END

SG HBW_Program.S3

// Rung HBW_Program#34
// Offset 154
STR ST1
ANDN C103
CALL HBW_load_convyr 0x1 DST511 "3" "3 C203 C103 1"

// Rung HBW_Program#35
// Offset 165
STR C103
JMP HBW_Program.S4
RST C103
COPY 0x1 "4 0x0 0 N202 1"

// Rung HBW_Program#36
// Offset 174
#BEGIN FMT_COMMENT 
"Conveyor Factory"
#END

SG HBW_Program.S4

// Rung HBW_Program#37
// Offset 176
STR X2
OUT Y48

// Rung HBW_Program#38
// Offset 178
STRN X2
JMP HBW_Program.S5
SET C300

// Rung HBW_Program#39
// Offset 181
#BEGIN FMT_COMMENT 
"Conveyor Warehouse"
#END

SG HBW_Program.S5

// Rung HBW_Program#40
// Offset 183
STR X1
ANDN C300
OUT Y49

// Rung HBW_Program#41
// Offset 186
STRN X1
JMP HBW_Program.S6

// Rung HBW_Program#42
// Offset 188
#BEGIN FMT_COMMENT 
"Unload Conveyor Sequence"
#END

SG HBW_Program.S6

// Rung HBW_Program#43
// Offset 190
STR ST1
ANDN C103
CALL HBW_Unload_Conv 0x1 DST511 "3" "3 C205 C103 1"

// Rung HBW_Program#44
// Offset 201
STR C103
JMP HBW_Program.S7
RST C103

// Rung HBW_Program#45
// Offset 204
NOP

// Rung HBW_Program#46
// Offset 205
NOP

// Rung HBW_Program#47
// Offset 206
#BEGIN FMT_COMMENT 
"Go to open rack spot X-location for Unload Sequence"
#END

SG HBW_Program.S7

// Rung HBW_Program#48
// Offset 208
STRN C100
OUT Y50

// Rung HBW_Program#49
// Offset 210
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#50
// Offset 212
STRLE N101 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#51
// Offset 217
STR C100
JMP HBW_Program.S8

// Rung HBW_Program#52
// Offset 219
#BEGIN FMT_COMMENT 
"Go to open rack spot Z-height for Unload Sequence"
#END

SG HBW_Program.S8

// Rung HBW_Program#53
// Offset 221
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#54
// Offset 223
STR ST1
MATH N103 "N102 - 380"
MATH N104 "N102 - 390"

// Rung HBW_Program#55
// Offset 240
STRLE $HBW_Encoder_Z.Acc N104
OUT Y4

// Rung HBW_Program#56
// Offset 245
STRGE $HBW_Encoder_Z.Acc N103
OUT Y5

// Rung HBW_Program#57
// Offset 250
STRGE $HBW_Encoder_Z.Acc N104
ANDLE $HBW_Encoder_Z.Acc N103
JMP HBW_Program.S9

// Rung HBW_Program#58
// Offset 259
SG HBW_Program.S9

// Rung HBW_Program#59
// Offset 261
STRN C103
CALL HBW_Unload_Rack 0x1 DST511 "3 N104 N202 1" "3 C202 C103 1"

// Rung HBW_Program#60
// Offset 273
STR C103
JMP HBW_Program.S99
RST C103
RST C202
COPY 0x1 "4 0x0 0 N202 1"

// End of Code Block HBW_Program
$PGMEND HBW_Program

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C10","","","Software STOP"
"C28","stg","",""
"C31","","","SLD White Puck Ready for Pickup"
"C32","","","SLD Red Puck Ready for Pickup"
"C33","","","SLD Blue Puck Ready for Pickup"
"C34","","","Deliver puck HBW"
"C35","","","Deliver puck train depot"
"C36","","","Pickup from Train Depot"
"C37","","","Deliver to SSC"
"C38","","","Pickup SSC"
"C39","","","GoTo Standby Location"
"C56","Hands_Free_Mode","","Enables hands free autonomous operation"
"C100","","","Manual Horiz. Limit"
"C101","","","Manual Vert. Limit"
"C102","","","End of Lift Sequence Prg."
"C200","","","Lift Forward"
"C201","","","Retract Lift"
"C202","","","End of Lift Sequence Sub."
"C203","","","End of Conveyor Load Sub."
"C204","","","End Vertical Prep."
"C205","","","End Conveyor Unload Sequence"
"C300","","","HBW Raw Material on Conveyor Factory"
"C500","","","VGR programflag 1"
"C501","","","VGR programflag 2"
"C502","set","","VGR programflag 3"
"C550","","","Vacuum On"
"C600","","","VGR subflag 1"
"C601","","","VGR subflag 2"
"C602","","","VGR subflag 3"
"C603","","","VGR subflag 4"
"C604","","","VGR subflag 5"
"C605","","","VGR subflag 6"
"C610","","","VGR subflag 11"
"C611","","","VGR subflag 12"
"C612","","","VGR subflag 13"
"C613","","","VGR subflag 14"
"C700","","","Puck in MPO oven"
"C701","","","VGR clear of MPO pickup"
"C702","","","Puck at SSC color sensor"
"C703","","","Puck at train depot"
"C840","Saw_Enable","",""
"C841","MPO_Ready","",""
"C842","MPO_Reset","",""
"C900","Vacuum_Unloaded","","Set to on when the vacuum leaves the unload state. Reset once we jump from the turn table Idle state"
"C901","Entered_End_Belt","",""
"C1700","Color_Red","","SLD Red Puck Ready for Pickup"
"C1701","Color_White","","SLD White Puck Ready for Pickup"
"C1702","Color_Blue","","SLD Blue Puck Ready for Pickup"
"C1703","Entered_Inlet","",""
"C1704","Exit_Inlet","",""
"C1705","Color_Outlet_Ent","",""
"C1706","Color_Outlet_Exi","",""
"C1707","Local_Color_Red","",""
"C1708","Local_Color_Whit","",""
"C1709","Local_Color_Blue","",""
"C2000","Auto_Mode","","Automatic Mode Enabled"
"C2001","Manual_Mode","","Manual Mode Enabled"
"V400","Hands_Free_Index","","Index for the hands free array N400-408"
"V1600","Oven_Bake_Time","",""
"V3200","Color_Sensor_SLD","",""
"V3201","Low_Color_SLD","",""
"N101","","","HBW Col Encoder Value"
"N102","","","HBW Row Encoder Value"
"N400","","","Hands Free Array Row 1 Col 1"
"N401","","","Hands Free Array Row 1 Col 2"
"N402","","","Hands Free Array Row 1 Col 3"
"N403","","","Hands Free Array Row 2 Col 1"
"N404","","","Hands Free Array Row 2 Col 2"
"N405","","","Hands Free Array Row 2 Col 3"
"N406","","","Hands Free Array Row 3 Col 1"
"N407","","","Hands Free Array Row 3 Col 2"
"N408","","","Hands Free Array Row 3 Col 3"
"N1000","","","VGR subshort_int_1"
"N1001","","","VGR subshort_int_2"
"N1002","","","VGR subshort_int_3"
"R100","","","PWM HBW Conveyor Duty Cycle"
"R101","","","PWM HBW Horizontal Duty Cycle"
"R102","","","PWM HBW Vertical Duty Cycle"
"R103","","","PWM HBW Cantilever Duty Cycle"
"R900","","","PWM VGR Vertical Duty Cycle"
"R901","","","PWM VGR Horizontal Duty Cycle"
"R902","","","PWM VGR Rotate Duty Cycle"
"VGR_Program.S0","","","HBW Pickup"
"VGR_Program.S1","","","MPO Dropoff"
"VGR_Program.S2","","","SLD White Pickup"
"VGR_Program.S3","","","SLD Red Pickup"
"VGR_Program.S4","","","SLD Blue Pickup"
"VGR_Program.S5","","","Deliver puck HBW"
"VGR_Program.S6","","","Deliver puck train depot"
"VGR_Program.S7","","","Next_command_Queue"
"VGR_Program.S8","","","Pickup from Train Depot"
"VGR_Program.S9","","","Deliver to SSC"
"VGR_Program.S10","","","Pickup SSC"
"VGR_Program.S11","","","GoTo Standby Location"
"VGR_Program.S99","","","VGR Home"
"VGR_Program.S100","","","VGR Manual Mode"
"MPO_Program.S0","Init_MPO","",""
"MPO_Program.S1","Oven_Reset","",""
"MPO_Program.S2","Vacuum_Reset","",""
"MPO_Program.S3","TurnTable_Reset","",""
"MPO_Program.S4","Oven_Load","",""
"MPO_Program.S5","Vacuum_Move_Oven","",""
"MPO_Program.S6","TurnTable_Saw","",""
"MPO_Program.S7","Oven_Bake","",""
"MPO_Program.S8","Vacuum_Load","",""
"MPO_Program.S9","TurnTable_Unload","",""
"MPO_Program.S10","Oven_Unload","",""
"MPO_Program.S11","Vacuum_Move_Turn","",""
"MPO_Program.S12","TurnTable_Belt","",""
"MPO_Program.S13","Vacuum_Unload","",""
"SLD_Program.S0","Init_Sorter","",""
"SLD_Program.S1","Sorter_Belt","",""
"SLD_Program.S2","Sorter_Color","",""
"SLD_Program.S3","Sorter_Push","",""
"SLD_Program.S4","Sorter_Reset","",""
#END

