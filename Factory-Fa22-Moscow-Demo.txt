// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\Jacob\Documents\GitHub\Factory-4.0-Sp22\Factory-Fa22-Moscow-Demo.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
b849c944d77e0e37c5df02a3d0a0559ae4e90f3291b01221771e8e07b69892d43c54e8cc426abb5b
f64dde0cd61c7feb7c5124e58738aea9a7ae739189f226576fea9ff799a7dd5051428bdfd52d8d24
6883ec716cf77816471254eb5b490afa2caf10c18b7534da4b253bb66494f14e57f7370a1ed1d435
7ec91df128f38c98079b9d652e40bd446927c9830eab8efcf5a0e06aa04f097dd6ebd848b1e56230
3e7e837a5c3f1fe4a2e840f662a744bf0b1e87fba7b4f520ddb0ea158c108ce492d32c2054406a78
0d5c2e4868f4c37b9343127d4af112b3868cf39570c47ccb07ddcb8130bd31f30b77b826fa291181
bd4049619ef9fce129325a452ccc02d482e48b57f0aca418d40f34abe4778cccd7e72b58ebcde634
4c50910667c00783ec5ea3fbe2f2dca272042ee339db44d57821916ea1f7bb95f328806bbf96530b
68cf77bd4d496a21691489f9633a7800fdb560ef124461bc234c1e134a3f42f29a7200cf6e79cc0b
f852e6171f3ce85a4602847a8c0be05f83346dd65a693d70ff1f25c828dd74bf8c12ca7503a72541
f4ed0ada36e7c243dde874b814db4fea004cea49023bacc10a352bf966b77cf6ced789e911d943d4
fe31f9bfd906dbf764c729bc3f6ca02065a38c813583786ebae815ed2be3fd5115340a6f2f26194b
ab8d1795d434c84b067f04baf17569c1cb44dd3f4f65bb946dd3666a684afff3ca06f005c24edcbc
788db45804340144877652919679cf80e2a5f2f4bbabb886daf45746fbc99dd146dcc309e37f7c6e
7e3d15cfe4b0d33695a1377f4b31676ba13534275a254a7fb0ddaef90fd95609cfcdd99bb7bcca12
ce2a82f293cb43575e9e4e525f47d0e4381af34a97dbbab03840274e111e14381790fe5214681ea8
348c19c584246227ae2b3a2c2fc97de699d02c6e7857d1349c5f5b7a4e4f71feea4d921729007e16
b3ecc593456abacfcfabbcf619ad4c4427b8c6a10fc1bd6b9c539d9b33ef0636281f7b50d3aa8ecf
4af75ad5b81e497f3900aca2076098e735971628e6ecb3184f835eec7fe289f07e48bd6b8961be1e
adc624794cfda8dc65c18eb83ce5cd4ccb3c030d3cc72da5dc5057a102590cfe339c70b4d619ae5c
23fcea46671a9fcfb4bb200e783f0c21d4ba4d95e60764a48e96d50c63fd3a4a89df1040658daa30
c57098b4f6aee0b59bf2760eacefc5afa8cefc3b8d663613643183d30a1ed2b9bf7ead1db6458479
9079fe51f57381b3af72a6407a1f4b17aafd83542db88fd8d2a8594d134047910f221dd629c7b8e1
efb9dbd903892e6017456fee855e3a8b2c47048291071b309371436576a472c4108f7ac58314d555
a8588255716402c467daf7bd36c718667e89d9ef4c44d99cde7f0c53543c7bf1e6bb837eb8e6fe51
de0bd4bf0b28da265034b5846b9f5060d58936aadf6066eeb26c0a4084585706893e7cefedb24cfd
e1db70c0a16ef2f3ffe63127bc13a25d8c52ad21fea3e0c84f81d5e1580469418a3aab269270a6e5
9e37d059d550406bf58d7f5b3055333b4f98c39b19b00098a43813a707a6c96177aacc0657e6296b
99d3f4d5f5dc5c8badf805868bd9b5519fd9fae5e4b99ff4f9feb44ea22a4212690de0c190b2cdd7
885a109af6963b6603e06bf4328c390d8d9b740e12e899311606610e6106edf2374c42303a015b13
76583038efe5b84bbb7c9908b63e468245b32b6dcb7b87c9bb286d8069a6c4712d7914ad532101ee
70546c187b1a3a0f33f4fe806068376b13752d5264a1d8a71cf8e15a05f78d153e07c74153dae9e8
b9a2e489ab281fc59e348f814900fdbd919370adcec9f2f78abea492a27823894d438bc23f7f5331
2aa3d9ebd470ed07ac748fa805f50500dd6685276386c65cc4cd018f59790dddfdaa80bff99a078b
0eb5e30646675c086ccb5e5263296296397ec8572bd25cc6909c7ac8cb9b56aef912366145a495c9
b7d5c6568817b7c7458ba2d2fc1663c798044d7651ed52422276baf5ac87f19cde5c3a2e1d27efae
f3daf9b0ea93563b94532d80b9e1f4ba332825260f95266750253d5b92bb310ba65af207bd94166c
10ea2f54dbb4fceeed117ebcc37d548e1d711f171cd3bb3cdb0ac6bb98a35ad2eda85ab5fcace0f4
e98a14eb914b4c18e362ce3a9571e7c72832b25e91f53583d87b318b4059402e2bf36f70343d2363
074c41ac6c5251f56d58500a62a4369620dbc1491a1aadb51b3584c8ec7f447dd48de57ccbd28f46
0e2509091dab0c6602b2b71cdabdb7fb4e6be5f5f40894724a6e57fd1a4562574922e5c6dfc1a1e4
9293bef31805e41a6c4ed06ed06b8b9cf5aa4414104a56e65fb7bffec0ce0f933631365affa46f98
661cf34d18dd14e7952cfa19ea7dd68b037af7cfa12847b9985c46cda5140235a85dab73cd5817e8
6df769743964165ddf63163e93cace5c3d6ffc272ac2d50dea236ab638f80f73fdd1136f6cba438b
26bf8931c29ce660798a5daacb3ccee15e30d2329e71c23cf2a42ed3b5f23fdc456e863de687b10f
7ae88baf7c5c7b9e0853bc4bdb012da938090f5df26d737e8d7735b73c45716b1f9625cd84067ab1
c25b0dd47df8e2ef84963a0e89901de66b6bf6b92c671ac60c653cd1ddf56adcc19c0e4609bd3a22
cfebe4d73e0cd78904085b78e24213995028bbd13f9a7179e443341edd15e9d97d73998104442ec3
ca82d99a634449f5742a326417579c28af97bac3ab7f789d14cc83c487a13c9fb28b618f3e3c027a
b345f4ec52fcbe8b26c6f467159070c4279c04040678667e878539427c52ec4da735c444b9f61ca8
66eab820247ddc1de3cf08d54b5fd8bfe91b7474e7c7b5d6b9c188342adc991a844f86a2bf5537cc
c05af72b0467823a36769090ffac7332bfcefbedc501cf22ddbefe83beb9d6286a98037051119078
b9d3f84a8fa8ffb9e75576e2ea8cb510eda9d8a28b49068d6c23ff5fa3abb44e04498c65b302e51a
c3b15c1a365490baf99cb65eeb812f702a35f7a6a53e41b5bb00864eba6381143421da2dae87fd8c
2e09041a03690a569cf150afee91f10401b8202939598febf573c821249914edd43945ce39842d14
69b87e25281e10c9c2b1917af4819eb860ded7f98d6fbf0b0b247a6ffc22e39896e26b4838e5ab26
1ac316a62379f70114efe1a8e0d5ac50b0a3c71692cf03e45875ce0a2d3d180177d9d13ca7e4fcde
7779666691333309daea5a807242863abb2723d1e1037beb48f36cb335d0081014dfabf1f858df63
9848950a7d177c78ffbdf04455d2d2b02f230d921e3ca10b8d489dc4867a407152c7226c54d21922
bcd84d711755017d65afc6c6319393958062312e515a193bd105cacc5927b4201f4ae8f3c512f28f
e8cbeb66a6b1f9948ff3a1a9f44d85ba0e59c3b8d29a888bbf9792b8998f9ae5cb1683c366d55f6d
a165fa18d06e7c782bb45fc3a6649650cc15c578711f060b07a59d14b0991c35140217169888c4b8
ab86930180de7be361e5ad4874fa83942e69b660cb29e0cb7b600c93dfeaa76e4aa8caabd755ed36
d6bde3f9b9bfcf3cfd6a6a3373eca74052d17e56407ac557057b40357a8fa4afcdbe751e99dd29d6
7c4c5d669b432b7a52cfd78342511d85992d63e4b23b72e1dee4bb3068b85d9ae816d4bf37ad1d40
13540798b18e56f65b045eb8aafe47683da75cf9e03d8119b4a34c96b23aa01031229e66b63261b4
13de732d9b31ed4b215514742a20c7ee1a50e81787e7f77a5d4575e5d646eb469bd0880c53fa8ed0
efad4a586035a6e36ee731d3e4fcdcf17dcc14e58cf2dbfa0db9f62360a98d6f03e2934def18d259
e136d314668644b39dc99f203387d14e67588babcd1ce0ae293069588624d359d24258181eee1e3f
ababf2b2103339eb6d4a4855fdebd1361feba32ac9b1ddcc2e45071d5d5b53204715c1415dd398f2
460b429cca1b5560ab8fadd085e361d902d46f792ef3382557c007989b028326c1fd73cad7b1badc
3ecd17bf544d19d82b6a2867ae8a681eff2902096bdcb76136eb206d9dbc4fc56f7e98d267285ce2
4f92d941ccd12c92e100abd3bfae0c676dec960b50a342bcc1f2d76390b6d73d225a8fb8ca59b2b6
27e741922e234aa5c2ddd611f6eba9942a0af7cd36a45b0d22e1855268085b1a71dd75400391b6f1
affd1a98d2b5ec10bbe558bd06ba18df7a5b4294b3860a1076f23b40bd6db148c400cf683dbb0bac
4ab35fc618cf48ad5a1af63412c222e6759a11d6a5c7217794d4b5bd9309066cd3069c9fd66b6d2b
2b42a499382f3a4d2315b5be7d15b2428e484893945ece0c76e9019d2ce0bb7469acb68da20849af
2eee783d809192a0c76c1444d584316fe88465d209eb1cea218a101fb64abc5035fb7c0135267211
e92f8e9c5083abb643fd9677425c59f905097a9a511d8ba09f48e8e56c806585f79571274245ac17
dd4649e0fc0bfd72ff2595b4a672505966529db1c0d91030d2b455001f1aba86842d7bcbf0386801
d63c2f377c7368ca91e801c4960d454dbb7902c5ca6e77b9d48ce88e8e4f5306baca5f54c147fce0
f7a8c67ad818ffd2f382977efda8368c75e0351c57567a33db04609b85a9fa48eda6d207c49483e0
a1597ee942d5ed7c9b0c8a1c5464934bc7592e0ba9c41d8419beeb576ae49bb0cb7cca3c02afa3dd
371b7259b1f8a9fb93872aa442cb265b4b0e856380df15127f1b77562c59b5b4858a1cda3334667e
5136fd88c78a646afb1ece4dfe14f84d91eba990d6551722dba3937637683d8ca35afa11504621aa
480fc17db24a4edaa02c1a42681b103821f1c6d1b63ddf2378d0001969a1f9f4d5b3856691fdc78d
192fd1c89a5acf27422c1e413a1f066e5d0711d4187ce3c3d4de04ca34fce5298aa6c653f32c04d2
926073c20d7128e1dc8c6279edfba63e5e90334b20a006122f90bac353b9f14d098a58e4c33a8786
a9cff91aed2e240538364c4fec8896247b933b60932852786d5b0f64fda96ab47c03dfe159467889
fa9992312d9929bfb37e5e6073be3942e199c59cd4fb6e1f904f64b4637e67bd05cbebcfd80820db
a2d4c0c43bdb22e179ef98927c10ed8321d8ff8ed490555feab4a2e525feddf2690687f849b36c4c
07327621c9a1cfa820fc874c14ccb610393c875ef8e5901236931411bd164b3c4b7569331498d21d
1f17890833409f4f72878f82bf88a45cd31e8d5d8994b532ad4777d152901750371b59a405a668eb
dada24250d395c1df8754dd0400bc4c80953f630c240a6d32c26c888df79d5fec1e883d3412e0368
6da7751bb01e192f6ebeae5ddbe90514caef308a4a294540f0edac470f88ee301f7fcc382f35fc55
d1e220d99480b11d231eab9cd754bc779e03f3c87e85934829b29036bb2f5c36a4c2ce4bfb842ede
ee498487d9e9aab001b40db5e3c7289236e144777f1a530218223fcd97eb8d68e075b3f90db457a4
cd4e38c7eb62e2006c66201054871daa84edf31729132b657bd31ce8ea5187a8ea3fede53a30d90c
d61a889d38c26b8e944fd49e5da5218977c6283ac5d81904b8a16c572b8029d4f2f6c01893eb9838
f7bb2bb931f5f8720be8d9cd388b0d8653cf930aa3e248dd390d547a56ee798243e2bd382b236d84
77a9d5784f0d5497ed98a94a3010313227843014714490c11d190109a0ffab665a8f0ad9d4f894ea
abfca6c4e2b96cd1b144cc37b1f4320d605ff997cfcd95708c2c35d30f768153e37b47d3713e164d
ed643216f0dacd2f767c9a23bb8d905a2adfbe7c052a546c489a391bfdb5b0eb9ddfa03f820e70ef
8e763e04345323959f0beb119b51cd6eef62c82f96f163c2e6a6c041f5a0e7899068d6542c3842e8
c698d79f36492fd511516cc669cd39b63c7a21382deb074f99ab484599f84de856bc29cc2e8c2da7
0f886ab1712091a99b56e3e04d1c1668f07cfa45e06525899b302085be83242669cf1389fb80636c
cfd1176087b9473b638d77a0c411138c28c1a523275b35b019749bf54694cce398340fee1221efa4
4e67f69fdd70179bc5c826302946ec788f55334e2d5835a53fa08e0ce678f7644e6512b5657a3151
0c22112745a90dacf489200512388c7aa5c5def0067bd7f0ccdb4193ccbcf0355807aa06095ccfaa
2a58474537d81bd596d7309f1ba5fb0908327129010d8747e6a95b82b9bd3ce12d72973c385a975f
6d2799fc5b98a6d4eb24a325e0bb3708fa3cebeb03af596bb0c3b7a36d6af23628d9cea3937c1415
0fcaadc02a6949d24af6dcd469383d4d2e7d17007a6005edb1e82c71160f46d6c484ef147d66b4e9
fcf65ec26154b4062cc0b0e010447e3de9c44cf3c54e59d4cd6a6eaa186a212392d0b536af971ec7
72c5bf40a580d006f8fccdf2bfaa00fa86aebf42e9c57dedf3a17a8b04c44ac488ce9aff85e3d6b0
3a271388e3421f6ad678b12eef712bb3f0c6764d214c750a9c641e520b7e1f4b711826a27352817d
591244531ddd60f322e277d00a102ebee548cde70c262ecd24e1c17114ea5e4d3ccbe9be1472b892
b64557bea2dcb5f8b7ab47ed832a3ffbf97ef84dd9af7a5e000dc6d17cfe468eae6854e85fcb52ce
3f85dbd4bcd696cf16ad251c8fb78eec96edab79a02f53129915337cf15b9bf69160510efa50a83b
aa93253733b175209e9f1a79a79cf0cd49f07796bea19d95a6f3ad42e905afcc3e2fb0c1e8f938cf
ca4f0b5907f9fd91447cac5f9e58ec4d2487a4932365851c0bf0af95e0ec81918c1f69b505cc60e2
1dc757519abd0b1c9662fac6a2077bf342ad7c9792eeb27c3cfda900167b6a98d1427d9e5a4f66a3
37af7d8755862b8eb2aafb4bb21d9f606ef274a68137c04abe3e44ec275d591c5ac83c799b8963ed
dfffe686918e9a5d84228aad9aff374827f1d1badccfc6fc4520ac23d72b349e552b28ade4b6e898
086434ad95a4c3683e7fe762962eb32cc6e74067aa556ae2b2731804166de92da5ae90ed1234edfe
c009811d351d0907625cc59de7953966bb7fe9420c78e262b12b4b2d43f3a23c5f38712c9edeeea2
a448258cbb488db2a1e5551b71f33c773863f3d5b34095f9649acf36009c4c89d0762dc671108e49
35ccb9c2ef8f6a1b7cbc9442f9b1034362783a4389be0bde71b867dbf01492e2f408f7fcecc7cf29
3c320b6c82846ff7c11f1e0686c2cec43afa313c448a0b84f78dde24a701a99de6f1239e10dd1662
38d414258bdf9c7718544cf2b5a02307be8c60edd0bdce27f607c0e5d046e309ebf36fcb759bb7bb
b975d70e5ad1ee56075f20e51887a83fbf5bbc7097611d8ad91111ed1e728f89c2a6ca355a88f06c
49725e63120ccb26c73e79572a816cfad88c90c21e18fecb3086198d0512598cf03d395dc8750039
26c64b4a08c19a9cb9434affac9c765e406343be12041c38be15ddf2961f29fcda27a61aa8b45f63
f650e2ce131188f5f5e07acbb98abd2ad73ecc98fcd44a3f07dfedfdd26078ceef525a79ab91460c
06997732456a7000bf7568d7715c797ce52fefe1ebff2fe3c5f9ead3e523adc81fc28585b5377ebd
c773463d4ac82ee2049cc59c081340cacb30a1df23e8c96f73d31930774f7aca9de34838161306c1
2859d81f88fd9f49cb4e570f592cbc9acc69764108c00f31a3cec683154a33ba86bfe5d9e10f33e0
dc3be45aeb71c139240bf9c13769cef68b1ca0b5b848835497f49549396b95c50f8dda092e4bb15a
fdc2d4b368de6c6be8c29cbbe799ad8abc1decc54a599280badf63d4eb90202f300d381fcd53d0c8
46bac93c49229136df530ead17e757cd873103bf58a00c0385ace8e2370a1a5ce379c79b1feaf701
d07c2c8a7a1ff681f8ed25a671df505cd6a91b07097708dd05bc953d5d028f958f49baa835cc9dfe
46b9bb266fccb63d62aeecefee8e086ed6d8c09bc89606e1d0ffa31798dc783d64617d0c230cce31
c8a7f26843921af5baa2f76b097e6e03127e702ce330054c4d8cb15e9c78f56503a513de3572c7fb
a482da2d56ebb8ebee30dfb171f0f3093fa921a359005293f08f484515b2a964cd0fd7b1b4278232
38e9e5e31fb968286c02786ab4a74083573446a26a7635b535e00e2c067085c0c7f5732c1003ac49
8637ec350a718366765514dc52a47f60f154476da9d4d05150373d5c3a72ac363cd835f438ee67a3
12ab49940c88a1632015046d610b786a176ce12e3d451499344062af473e6b2904523ab3d1246a95
edd6bd5dee840cf5ef0d60c9ab01837390420948d9f801c3b3a1ec68974df3831f3b84741ac4fb39
d35e0261031e36388529e120b7dc60c3c24ee42797621da15ce3e080c414aad987f98eb765a2fb44
f3b96d9a6bc4cd6a29fbc2d9b7ac4eecee34ecd9718e9d983a16876dd37dadbafaa575600618737e
d9b72f53875cee99344d70dbb95e5ab2785f484e100445b050d57acde1982cd47da94ad9ca0331bf
728b23375d205d0a19a0347fd1cb578b18ba97264cd6f559e790be19dada40b359a63f1d07c40b3b
0246377a8d7b4cd08ed58e367c58089cb6f8461897291f7e9b61d69b341e04de0dec6c97eb10ba4d
c72cb8834d9ca493c73ad45922cf3cbf03897668f41f0264359c1ccca4b4c75a086174fb4b13c57e
5d2907c4b9dcfaa189efd13ff63de91fb3f6795fb46d45c5536f7c48cebeabba996b790cd641079b
27b2f9032ca9c1b5def9271d388b7d500bd75245d07baf39c4d425a4330bb55857cccafcb42b6fea
33f42d3438acd48f4b5e45faa885b43de2011db7b9d8d793d15cdae4f5e10946e658c8bf406f1c9e
fa81472cfe6ec98f44a780c23f4bb93c5a941554945c413797ffca5ea4cdfa4de9fd0d6f2fa2ea85
98b21a40d0384b17443b7fd5bc5d0a9aa6640a524a254848da0e6e5cbb1ffc897fea0830d90a3031
1eb0a1cea3dfb3058cc8dcd9ab05288882d13402012fb04b2c61d6a6b37d682dbad14dc2da6028a5
f88bba6e36d1c6b60363f3a29ab9674a0f9c6e19adc8e20a7b666c342989a7496e7246e78f209ea4
001f32e9edf727a38f218d39775be8bea52bda6dfd9a3416c8e4c1f2a0da6c0db5d4d13e77d9cb53
9484c646f2f2d85fa1784f499cb2d6219621f3958c7af5d338184147f0c6cecc038714746b5c1f2c
2b4a2690720d8475f1b10eae50202136d0f7edc8aebe9c8e49b1e8369d156d3a846a1e6a99faf830
07d45ed0ed48e7e918299be2ff0604587ad04cf3dcd88f03e6e5404407db5f60505965d3053b9da6
0f2c61bfaba67fc40440f85ce0048e499653555a283bb1bc015917a4959aae1050d01ecd41cbf9c0
75322e0d1c8f4bdc560ef180f189b952b32e92c9c4dc961d7189eb865f0e11454795866b3744573c
433e636c2c760500764453c5b21cf7189c96e5c213c31931f24f8c650bfc8ccd4cfc6651997d2bd6
ab8d568662a484e02ed6d26ca3218e8ffa9b7ff1d8487ce6520f2bd27c6183b2497c2e0a095c9852
ea070f7295443a98c7cafc59672703649bd96d1e991dfda5576af8031d20b513ee49546e8f8e7351
6271f031fe4415420db3b97235c989bd2766a1035f37f02472ebebf0d4b6934311c2950f3b64ef03
a8b895e8a4c4389da8eb7003f233721c036c3f53bd8017c3252af1533de45f0e0804c551c1888d91
1614494e1f3449f46d36c8451b16a98b59af5be70b645f141541e3b477369e280ac9b1132c1e476a
49be29fc3980102b1dae5a423ffe5e8a4ff681f848a752618431e9ea9b34c8d627d2fe2bbdd78382
84b56ca28e8adaee332eefd71560ca5485f7bc1c0c1c6ebc81585cf93aa63a151246f739d9c8cd44
2bc04b141fd1f7857ae00f506469451081db318a8fa978bf67fb800147315e425bbc1c1704966edb
a23504cbe2f11d6143d9bfcfe7962a36bd1052521b43f717f0cae50709ed77c40b70a928179015e5
9293ea1a68c2d8a396d0db58790733cd98e60f1c6ce7538c93b7dfd576f0b4ad0e1dd3051d20a778
a88c29c67dcc96e41269f4bb3c23b84359358d8382091a01ed8375a5e37129f4f8dd5a3fdb20443a
4f678ec95a14e7279162aa4f758715121e7e860b87709bd8c420ce5d4f04a1a510def72505abce0b
80e57f1dcfab10895e89ce775452d4f9c443d0035fd4ec9ea4a26fce30d79b1c31af14db04cc89b7
01def81e0d1cef7fbdf3a77f5d05a8249d3662cd2acaf50b89173ed164cf896ceb6f5ca11a474216
6aae0addcf824a3cf06c2fa25de0a00e46c13aa7e192b4d8954a4f973e355991db6b077e517bc9b1
05108942affbd72eb0cfbbef7681c0a8dca16b4ea537725cf3f6f8a9cfaa752fe0c61f259ade342e
75f702abee27281bed1cb2330c92eeb92b3a3b6b25d13fcd080f267e8887762117d77de388ac9036
625e5771db761142731035504b8ae7bb35c3fe49623a3e3befc660d06dfc9a600635f1087ac4a3ca
cf1df72d383c7a94b155e29fc8e953b3f4ca4caa06f8a54054e7f3a3f2f414136a4db259c891652d
a5d3e004a51bf61216170c71e77b18166fd3c0669abf86c4470a4fadcc1ffd186ad899fe27eb2d00
41703c1471014a705f64135456bad4553156d1a6061fc17277c10497b603431222a2fabd4866eef6
08bbb611e0718369154579e0090569adbfe902ae40d5094c7f74399f23921d21bf75f81536cf8979
f6bc7030b9803a00c39263f955dcd316f33b001f84318b26410e44b6d970792ddbf4a9f7406207a2
0056cdb9775e558f454ae1d4ebfa8d06e0e605d268ba03c8fbfc73bdfb84fbbe061e0ea076a27c42
450944a198637bd1faf22f98953ae1e27364af9f105355fe623c3980d7664cc190beb0a8488888d0
4ed400b4924b6ad3d639ae6a211ac8c614995901f7588179cecb902daacb8695206f37daa1ec5956
5a6159b2848ccfdbd8135eb90890634810ebbab0f467a01123b87ea2e57145c6a7dc5764d22e6100
46f3a22c731f625c06407206b14a17b192b9ffcf082179b9ce86137ca71665e7018b5f1dcb7d3886
1ffd82d6551176a760b208895aaf9c5b0b9e97004dbc2d37264ef51153895c9b222fbf452c1847dc
c0fe74b72c326b0397b5174c9975b4b38bf0963127a0e3666a0739c3e8280b95fd50fdc54fd2a637
00d2347c1a4527f86d7d634fa73444fad7f6ebf287bfc7f376e0e50c45d6ccfcd1795dc41bf7be1c
110114496b3d32d91318bab0b0ca0aae5649c981b41cab96c24a2bf507cffe318de9783e74c91f9c
7df865b1205ae9e3a17aa7c39f0fbf2f1442f28c94a4ea42ec515f56ca7037c3ff3b6277a4528f26
bea7de93d1de14f5bb884cc1ed01994e016d548f63b584ff3163a86d8be6f59599a67ca4cb01bdcc
e0a077b1e3fd09f04c50a92ec386dbb8710b367ea47a79c8ad7b412456a7708bc647240540060d4c
fe6216ab66ce8f7999aa285377935a3d1143c9f63a6ff4b767ade6b96d3c0109d611b0c6b2af3425
ce24b5c13dd4e75def190e7151f7ed9d2acb6b13f809bd22599663346c30df8fe7f00f4b19ce484f
e8438eae34c54509e02a46b2ae7d055c58a542ea2a9af98918a83f24daa740456aef261389f7d2da
642e0325d8e8667fcfbdd97ef282d061bf2e82f4a0aa6da5d38193987b6a9fcea34acd507245c6ec
cc3c46923bea280f8ea7164f461ef4fcafadc04eec0d326e24b1a2789126e48b130ee0b8aa6dcc20
07b48c8eb63e50fe258a9cd1d6e8ce627e1a0677aeb83701077e899c4a416e206cf7972b5b299db7
9087b5716c6fc3aa2fa8cbf721eed8d411bca6012be783c5aa7def1b6171e33ecf052afd0d81d565
9d738b6dce94575c45552601c7e088def619d83d4303079123f9f3234c5c81775c49b6e2731b5138
eeea17379c84e8e8b4a2644eecc9f0dafb135dfc62b7e7b8aa73cb4be7dd736ea85bfa91db261a92
e7cc7b37c569d1ca8dbda731433367dbca8ecb06176357a9eb7fa9e20d2fdef095424c00edc9ebdb
6f201e502ab6343735298cd602346d38e8c2a2552aeff4d84af4af3b6de008c246100275a1da95c2
4e949a703b2c1b0d243c88aa05c4273f1e1c59f35cea946221e66e5a4c7b2974302c9a7f7bf7252f
bf08b751bdab242649b7d5ddb9872d0746aa738ad8e22ba52e79c57fd7b57cb4410107356c5d9b93
cf72a159dc8e2aad33dded062aa07d339b14120d1af5e69730f0d015febc64432fb294537a85f061
4c030959c4e558ab46d08404284fab311782e3a0c452ccc0da5351449d1a2e43c7287d395459d1a0
67e99bb3fb77c704129379667dc66ee91c5e45adfef5bfc4aec7d2982033e38151d012d51d5a8cae
c662462754b3a22b7c249bf26f872192a617a98606dd4c3cd2c3eafd01ce6a9dd5dc1125586cda26
947360137ad330b06b1934736c748e940b7a646597b15d8a662130d59e54e489cdc71617aba044c5
75d2a79a56906779229ccf3dc45b31dfbcbba8eb9b0c15f0538c2f5321f15c294d39411d26a29f00
447c110bc7f37854caf45e075c4b88aabb73e2b617adf77585cc7fe57a38d4355a8dc82185b0421d
52222b092edb7c58fc6de15653ad634d2bde75f3ea1f6a8e9ed2e53dc26579be3a3cc51579142cd5
a3bd4d415130a1f95560e22df5dc876dd1b2a1b15dba7f1d7c2ac3587e9ffd61bf35edaee402091e
e87e28bb34c6ee6d3c6751be35317a41f5cfca007e3fcd85f3c18721cf861eb5b4c7fd7a20e6f657
4885ff2d1cdcf04de744cd1c9943f79f0ffec66509e3067fd036c4422ed7ee778fba4748a8e73114
68108018ed8c20d94fe59e241cfcb60c6a161c950ce1557fcbc4e44d48b4a55a67d0d360606b736c
a7cc7e799858ff1c30f20ea8e13177836a186868f2d0b1fbaab7902abb0908d7d3471b1974ece559
cae060c0149cfb40eb4cfcec838cd2991ed40f63a457eeb6dfdb924db1911f66d5304e8d3814c085
776d8cd8
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State_F <Virtual>  0
 VGR_Suction_F <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 HBW_Copy_State_F <Virtual>  0
 All_Copy_States <Virtual>  0
 HBW_Manual_F <Virtual>  0
 MPO_Manual <Virtual>  0
 SLD_Manual <Virtual>  0
 SSC_Manual <Virtual>  0
 VGR_Manual_F <Virtual>  0
 HBW_get_X_Z <Virtual>  0
 HBW_lift_seq <Virtual>  0
 HBW_load_convyr <Virtual>  0
 HBW_PWM_On <Virtual>  0
 HBW_Reset_Flags <Virtual>  0
 HBW_rst_switches <Virtual>  0
 HBW_Unload_Conv <Virtual>  0
 HBW_Unload_Rack <Virtual>  0
 VGR_vacuum_drop <Virtual>  0
 VGR_dropoff <Virtual>  0
 VGR_home_reset <Virtual>  0
 VGR_pickup <Virtual>  0
 VGR_PWM_ON <Virtual>  0
 VGR_Reset_Flags <Virtual>  0
 VGR_Rotate_To <Virtual>  0
 VGR_rst_switches <Virtual>  0
 PWM_ramp_UP <Virtual>  0
#END

// Beginning of Code Block VGR_Copy_State_F
$LGCMOD VGR_Copy_State_F

// Rung VGR_Copy_State_F#1
// Offset 0
NOP

// Rung VGR_Copy_State_F#2
// Offset 1
NOP

// Rung VGR_Copy_State_F#3
// Offset 2
NOP

// Rung VGR_Copy_State_F#4
// Offset 3
#BEGIN FMT_COMMENT 
"This is suspect -%3E<br> <br>"
"Need to check if its really x57-59  or 28-31"
#END

STR ST1
AND C2001
COPY 0x1 "4 0x0 Y22 MI200 1 0x0 Y23 MI201 1 0x0 Y24 MI202 1 0x0 Y25 MI203 1 0x0 Y26 MI204 1 0x0 Y27 MI205 1 0x0 Y28 MI206 1 0x0 Y29 MI207 1 0x0 Y88 MI208 1 0x0 Y89 MI209 1 0x0 Y90 MI210 1 0x0 X25 MI211 1 0x0 X26 MI212 1 0x0 X27 MI213 1 0x0 X56 MI214 1 0x0 X57 MI215 1 0x0 X58 MI216 1 0x0 X59 MI217 1 0x0 X60 MI218 1 0x0 X61 MI219 1"

// Rung VGR_Copy_State_F#5
// Offset 49
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC200 C400 8"
POPBOOL
DUPBOOL
AND X26
COPY 0x1 "4 0x0 0 MC203 1"
POPBOOL
DUPBOOL
AND X25
COPY 0x1 "4 0x0 0 MC200 1"
POPBOOL
AND X27
COPY 0x1 "4 0x0 0 MC204 1"

// Rung VGR_Copy_State_F#6
// Offset 82
STR C2000
COPY 0x1 "4 0x0 0 MC200 8"

// Rung VGR_Copy_State_F#7
// Offset 89
RET

// End of Code Block VGR_Copy_State_F
$LGCEND VGR_Copy_State_F

// Beginning of Code Block VGR_Suction_F
$LGCMOD VGR_Suction_F

// Rung VGR_Suction_F#1
// Offset 0
#BEGIN FMT_COMMENT 
"Keep on for duration of function"
#END

STR ST1
OUT Y28

// Rung VGR_Suction_F#2
// Offset 2
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Suction_F#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_Suction_F#4
// Offset 29
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_Suction_F#5
// Offset 35
STRGE $VGR_Encoder_Y.Acc N1002
SET C550
RST C611

// Rung VGR_Suction_F#6
// Offset 41
#BEGIN FMT_COMMENT 
"Set Vaccum this should only need to be set once then it "
"holds vacuum until released"
#END

STR C550
OUT Y29
SET C612

// Rung VGR_Suction_F#7
// Offset 44
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_Suction_F#8
// Offset 50
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_Suction_F#9
// Offset 56
NOP

// Rung VGR_Suction_F#10
// Offset 57
RET

// End of Code Block VGR_Suction_F
$LGCEND VGR_Suction_F

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
#BEGIN FMT_COMMENT 
"Enable the vaccum and turn on the valve to hold suction "
"when we are inisde and in the oven reset stage of MPO "
"Program."
#END

STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
OR MPO_Program.S8
OR MPO_Program.S13
OR MPO_Program.S9
OR MPO_Program.S11
AND C2000
OUT Y17

// Rung MPO_Suction#2
// Offset 14
NOP

// Rung MPO_Suction#3
// Offset 15
STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
AND C2000
AND Y17
OUT Y20

// Rung MPO_Suction#4
// Offset 26
NOP

// Rung MPO_Suction#5
// Offset 27
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y45 MI400 1 0x0 Y46 MI401 1 0x0 Y47 MI402 1 0x0 Y43 MI403 1 0x0 Y44 MI404 1 0x0 Y52 MI405 1 0x0 Y53 MI406 1 0x0 Y15 MI407 1 0x0 Y16 MI408 1 0x0 Y17 MI409 1 0x0 Y18 MI410 1 0x0 Y19 MI411 1 0x0 Y20 MI412 1 0x0 Y21 MI413 1 0x0 Y13 MI414 1 0x0 Y91 MI415 1 0x0 X12 MI416 1 0x0 X13 MI417 1 0x0 X14 MI418 1 0x0 X15 MI419 1 0x0 X16 MI420 1 0x0 X17 MI421 1 0x0 X18 MI422 1 0x0 X19 MI423 1 0x0 X24 MI424 1 0x0 MHR440 V1600 1 0x0 MC440 C840 1 0x0 C841 MC441 1 0x0 MC442 C842 1"

// Rung MPO_Copy_State#2
// Offset 63
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC400 C800 14"
POPBOOL
DUPBOOL
AND X16
COPY 0x1 "4 0x0 0 MC407 1"
POPBOOL
DUPBOOL
AND X19
COPY 0x1 "4 0x0 0 MC406 1"
POPBOOL
DUPBOOL
AND X13
COPY 0x1 "4 0x0 0 MC400 1"
POPBOOL
DUPBOOL
AND X12
COPY 0x1 "4 0x0 0 MC401 1"
POPBOOL
DUPBOOL
STR X17
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC404 1"
POPBOOL
STR X18
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC405 1"

// Rung MPO_Copy_State#3
// Offset 124
STR C2000
COPY 0x1 "4 0x0 0 MC400 14 0x0 0 C800 14"

// Rung MPO_Copy_State#4
// Offset 133
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y30 MI800 1 0x0 Y31 MI801 1 0x0 Y32 MI802 1 0x0 Y33 MI803 1 0x0 Y34 MI804 1 0x0 X34 MI805 1 0x0 X35 MI806 1 0x0 X36 MI807 1 0x0 V3200 MHR1600 1 0x0 X37 MI809 1 0x0 X38 MI810 1 0x0 X39 MI811 1"

// Rung SLD_Copy_State#2
// Offset 29
STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Copy_State#3
// Offset 34
STR C2001
COPY 0x1 "4 0x0 MC800 C1600 5"

// Rung SLD_Copy_State#4
// Offset 42
STR C2000
COPY 0x1 "4 0x0 0 MC800 5"

// Rung SLD_Copy_State#5
// Offset 49
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
STR SLD_Program.S3
OUT Y31

// Rung SLD_Suction#2
// Offset 2
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block All_Copy_States
$LGCMOD All_Copy_States

// Rung All_Copy_States#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC1000 C2000 1 0x0 MC56 C56 1"

// Rung All_Copy_States#2
// Offset 9
STR C2000
RST C2001

// Rung All_Copy_States#3
// Offset 11
STRN C2000
SET C2001
COPY 0x1 "4 0x0 0 MC56 1"
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung All_Copy_States#4
// Offset 25
STR ST1
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#5
// Offset 33
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#6
// Offset 41
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#7
// Offset 49
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#8
// Offset 57
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#9
// Offset 65
RET

// End of Code Block All_Copy_States
$LGCEND All_Copy_States

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y35 MI600 1 0x0 Y36 MI601 1 0x0 Y37 MI602 1 0x0 Y38 MI603 1 0x0 Y39 MI604 1 0x0 Y40 MI605 1 0x0 Y41 MI606 1 0x0 Y42 MI607 1 0x0 X40 MI610 1 0x0 X41 MI611 1 0x0 X42 MI612 1 0x0 X43 MI613 1 0x0 V2400 MHR1200 1 0x0 X44 MI615 1 0x0 X45 MI616 1 0x0 X46 MI617 1 0x0 X47 MI618 1"

// Rung SSC_Copy_State#2
// Offset 39
STR ST1
SUBSCRIB "4 WX1 V2400 1 0x4"

// Rung SSC_Copy_State#3
// Offset 44
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC600 C1200 8"
POPBOOL
AND X40
COPY 0x1 "4 0x0 0 MC601 1"

// Rung SSC_Copy_State#4
// Offset 61
STR C2000
COPY 0x1 "4 0x0 0 MC600 8"

// Rung SSC_Copy_State#5
// Offset 68
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_get_X_Z
$LGCMOD HBW_get_X_Z

// Rung HBW_get_X_Z#1
// Offset 0
NOP

// Rung HBW_get_X_Z#2
// Offset 1
#BEGIN FMT_COMMENT 
"Get Column, right digit"
#END

STR ST1
MATH N201 "N200 % 10"

// Rung HBW_get_X_Z#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get Row, left digit"
#END

STR ST1
MATH N202 "(N200 - N201) / 10"

// Rung HBW_get_X_Z#4
// Offset 21
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 1
COPY 0x1 "4 0x0 7630 N203 1"

// Rung HBW_get_X_Z#5
// Offset 31
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 2
COPY 0x1 "4 0x0 5310 N203 1"

// Rung HBW_get_X_Z#6
// Offset 41
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 3
COPY 0x1 "4 0x0 2965 N203 1"

// Rung HBW_get_X_Z#7
// Offset 51
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 1
COPY 0x1 "4 0x0 425 N204 1"

// Rung HBW_get_X_Z#8
// Offset 61
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 2
COPY 0x1 "4 0x0 1750 N204 1"

// Rung HBW_get_X_Z#9
// Offset 71
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 3
COPY 0x1 "4 0x0 3300 N204 1"

// Rung HBW_get_X_Z#10
// Offset 81
RET

// End of Code Block HBW_get_X_Z
$LGCEND HBW_get_X_Z

// Beginning of Code Block HBW_Manual_F
$LGCMOD HBW_Manual_F

// Rung HBW_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C2
AND C1
STRN C1
AND C2
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 500 60
POPBOOL
DUPBOOL
AND C1
OUT Y48
POPBOOL
AND C2
OUT Y49

// Rung HBW_Manual_F#2
// Offset 29
STR ST1
DUPBOOL
STRN C4
AND C3
STRN C3
AND C4
ANDN X0
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
POPBOOL
DUPBOOL
AND C3
OUT Y50
POPBOOL
AND C4
ANDN X0
OUT Y51

// Rung HBW_Manual_F#3
// Offset 60
STR ST1
DUPBOOL
STRN C6
AND C5
ANDN X3
STRN C5
AND C6
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
POPBOOL
DUPBOOL
AND C5
ANDN X3
OUT Y5
POPBOOL
AND C6
OUT Y4

// Rung HBW_Manual_F#4
// Offset 91
STR ST1
DUPBOOL
STRN C8
AND C7
ANDN X10
STRN C7
AND C8
ANDN X11
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
POPBOOL
DUPBOOL
AND C7
ANDN X10
OUT Y6
POPBOOL
AND C8
ANDN X11
OUT Y7

// Rung HBW_Manual_F#5
// Offset 124
RET

// End of Code Block HBW_Manual_F
$LGCEND HBW_Manual_F

// Beginning of Code Block MPO_Manual
$LGCMOD MPO_Manual

// Rung MPO_Manual#1
// Offset 0
STR C800
ANDN X13
OUT Y45

// Rung MPO_Manual#2
// Offset 3
STR C801
ANDN X12
OUT Y46

// Rung MPO_Manual#3
// Offset 6
STR C802
OUT Y47

// Rung MPO_Manual#4
// Offset 8
STR C803
OUT Y43

// Rung MPO_Manual#5
// Offset 10
STR C804
AND Y20
ANDN X17
OUT Y44

// Rung MPO_Manual#6
// Offset 14
STR C805
AND Y20
ANDN X18
OUT Y52

// Rung MPO_Manual#7
// Offset 18
STR ST1
DUPBOOL
STRN C807
AND C806
ANDN X19
STRN C806
AND C807
ANDN X16
ORSTR
ANDSTR
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
POPBOOL
DUPBOOL
AND C806
ANDN X19
OUT Y53
POPBOOL
AND C807
ANDN X16
OUT Y15

// Rung MPO_Manual#8
// Offset 51
STR C808
OUT Y16

// Rung MPO_Manual#9
// Offset 53
STR C809
OUT Y17

// Rung MPO_Manual#10
// Offset 55
STR C810
OUT Y18

// Rung MPO_Manual#11
// Offset 57
STR C811
OUT Y19

// Rung MPO_Manual#12
// Offset 59
STR C812
OUT Y20

// Rung MPO_Manual#13
// Offset 61
STR C813
OUT Y21

// Rung MPO_Manual#14
// Offset 63
RET

// End of Code Block MPO_Manual
$LGCEND MPO_Manual

// Beginning of Code Block SLD_Manual
$LGCMOD SLD_Manual

// Rung SLD_Manual#1
// Offset 0
STR C1600
OUT Y30

// Rung SLD_Manual#2
// Offset 2
STR C1601
OUT Y31

// Rung SLD_Manual#3
// Offset 4
STR C1602
OUT Y32

// Rung SLD_Manual#4
// Offset 6
STR C1603
OUT Y33

// Rung SLD_Manual#5
// Offset 8
STR C1604
OUT Y34

// Rung SLD_Manual#6
// Offset 10
RET

// End of Code Block SLD_Manual
$LGCEND SLD_Manual

// Beginning of Code Block HBW_Copy_State_F
$LGCMOD HBW_Copy_State_F

// Rung HBW_Copy_State_F#1
// Offset 0
STR ST1
AND C2000
COPY 0x1 "4 0x0 MC1 C1 27 0x0 X6 MI7 4"

// Rung HBW_Copy_State_F#2
// Offset 12
NOP

// Rung HBW_Copy_State_F#3
// Offset 13
STR ST1
DUPBOOL
ANDN C56
AND HBW_Program.S97
COPY 0x1 "4 0x0 MHR1 N300 1 0x0 400 V400 1"
POPBOOL
DUPBOOL
ANDN C56
ANDN HBW_Program.S97
COPY 0x1 "4 0x0 0 MHR1 1"
POPBOOL
AND C56
COPY 0x1 "4 0x0 0 MHR1 1"

// Rung HBW_Copy_State_F#4
// Offset 43
#BEGIN FMT_COMMENT 
"Sensor data, and Auto/Manual switch<br>"
#END

STR ST1
AND C2001
COPY 0x1 "4 0x0 Y48 MI1 1 0x0 Y49 MI2 1 0x0 Y50 MI3 1 0x0 Y51 MI4 1 0x0 Y4 MI5 1 0x0 Y5 MI6 1 0x0 Y6 MI7 1 0x0 Y7 MI8 1 0x0 Y80 MI9 1 0x0 Y81 MI10 1 0x0 Y82 MI11 1 0x0 Y83 MI12 1 0x0 X0 MI13 1 0x0 X1 MI14 1 0x0 X2 MI15 1 0x0 X3 MI16 1 0x0 X4 MI17 1 0x0 X5 MI18 1 0x0 X6 MI19 1 0x0 X7 MI20 1 0x0 X8 MI21 1 0x0 X9 MI22 1 0x0 X10 MI23 1 0x0 X11 MI24 1 0x0 0 MHR1 1"
RST C300

// Rung HBW_Copy_State_F#5
// Offset 100
#BEGIN FMT_COMMENT 
"Manual mode enabled. Coil data is copied from the switch "
"position on the HMI<br> <br>"
"Sends a 0 to the Modbus coil output to disable the switch "
"for reference switches"
#END

STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC1 C1 8"
POPBOOL
DUPBOOL
AND X0
COPY 0x1 "4 0x0 0 MC4 1"
POPBOOL
DUPBOOL
AND X3
COPY 0x1 "4 0x0 0 MC5 1"
POPBOOL
DUPBOOL
AND X10
COPY 0x1 "4 0x0 0 MC7 1"
POPBOOL
AND X11
COPY 0x1 "4 0x0 0 MC8 1"

// Rung HBW_Copy_State_F#6
// Offset 141
#BEGIN FMT_COMMENT 
"Auto mode enabled. This turns off all coils on the HMI."
#END

STR C2000
COPY 0x1 "4 0x0 0 MC1 8"

// Rung HBW_Copy_State_F#7
// Offset 148
RET

// End of Code Block HBW_Copy_State_F
$LGCEND HBW_Copy_State_F

// Beginning of Code Block HBW_lift_seq
$LGCMOD HBW_lift_seq

// Rung HBW_lift_seq#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_lift_seq#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_lift_seq#3
// Offset 5
STR X10
OUT C200

// Rung HBW_lift_seq#4
// Offset 7
STR ST1
MATH N203 "N202 - 400"

// Rung HBW_lift_seq#5
// Offset 16
STRLE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_lift_seq#6
// Offset 22
STRN X3
AND C200
OUT Y5

// Rung HBW_lift_seq#7
// Offset 25
STRN X11
AND C201
OUT Y7

// Rung HBW_lift_seq#8
// Offset 28
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_lift_seq#9
// Offset 33
NOP

// Rung HBW_lift_seq#10
// Offset 34
RET

// End of Code Block HBW_lift_seq
$LGCEND HBW_lift_seq

// Beginning of Code Block SSC_Manual
$LGCMOD SSC_Manual

// Rung SSC_Manual#1
// Offset 0
STR C1200
OUT Y35

// Rung SSC_Manual#2
// Offset 2
STR C1201
ANDN X40
OUT Y36

// Rung SSC_Manual#3
// Offset 5
STR C1202
OUT Y37

// Rung SSC_Manual#4
// Offset 7
STR C1203
OUT Y38

// Rung SSC_Manual#5
// Offset 9
STR C1204
OUT Y39

// Rung SSC_Manual#6
// Offset 11
STR C1205
OUT Y40

// Rung SSC_Manual#7
// Offset 13
STR C1206
OUT Y41

// Rung SSC_Manual#8
// Offset 15
STR C1207
OUT Y42

// Rung SSC_Manual#9
// Offset 17
RET

// End of Code Block SSC_Manual
$LGCEND SSC_Manual

// Beginning of Code Block VGR_Manual_F
$LGCMOD VGR_Manual_F

// Rung VGR_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C401
AND C400
ANDN X25
STRN C400
AND C401
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 60
POPBOOL
DUPBOOL
AND C400
ANDN X25
OUT Y22
POPBOOL
AND C401
OUT Y23

// Rung VGR_Manual_F#2
// Offset 31
STR ST1
DUPBOOL
STRN C403
AND C402
STRN C402
AND C403
ANDN X26
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 60
POPBOOL
DUPBOOL
AND C402
OUT Y25
POPBOOL
AND C403
ANDN X26
OUT Y24

// Rung VGR_Manual_F#3
// Offset 62
STR ST1
DUPBOOL
STRN C405
AND C404
ANDN X27
STRN C404
AND C405
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 60
POPBOOL
DUPBOOL
AND C404
ANDN X27
OUT Y26
POPBOOL
AND C405
OUT Y27

// Rung VGR_Manual_F#4
// Offset 93
STR C406
OUT Y28

// Rung VGR_Manual_F#5
// Offset 95
STR C407
OUT Y29

// Rung VGR_Manual_F#6
// Offset 97
RET

// End of Code Block VGR_Manual_F
$LGCEND VGR_Manual_F

// Beginning of Code Block HBW_load_convyr
$LGCMOD HBW_load_convyr

// Rung HBW_load_convyr#1
// Offset 0
NOP

// Rung HBW_load_convyr#2
// Offset 1
#BEGIN FMT_COMMENT 
"Horizontal PWM Motor"
#END

STRLE 80 $HBW_Encoder_X.Acc
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 150 R101

// Rung HBW_load_convyr#3
// Offset 19
#BEGIN FMT_COMMENT 
"Vertical PWM Motor"
#END

STRLE 2620 $HBW_Encoder_Z.Acc
ORGE 2580 $HBW_Encoder_Z.Acc
OR C200
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_load_convyr#4
// Offset 42
#BEGIN FMT_COMMENT 
"Cantilever PWM Motor"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_load_convyr#5
// Offset 57
STRN X10
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDGE 2620 $HBW_Encoder_Z.Acc
ANDGE 80 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_load_convyr#6
// Offset 71
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_load_convyr#7
// Offset 73
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 80 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_load_convyr#8
// Offset 79
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDGE 3000 $HBW_Encoder_Z.Acc
STRN C200
ANDGE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y4

// Rung HBW_load_convyr#9
// Offset 92
STRN C200
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_load_convyr#10
// Offset 103
STR C200
ANDLE 3000 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_load_convyr#11
// Offset 110
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDLE 2620 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y5

// Rung HBW_load_convyr#12
// Offset 117
STRN X11
AND C201
OUT Y7

// Rung HBW_load_convyr#13
// Offset 120
STR X11
AND C201
OUT C203
RST C201
RST C204

// Rung HBW_load_convyr#14
// Offset 125
NOP

// Rung HBW_load_convyr#15
// Offset 126
RET

// End of Code Block HBW_load_convyr
$LGCEND HBW_load_convyr

// Beginning of Code Block HBW_PWM_On
$LGCMOD HBW_PWM_On

// Rung HBW_PWM_On#1
// Offset 0
STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_PWM_On#2
// Offset 15
STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 R101

// Rung HBW_PWM_On#3
// Offset 30
STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_PWM_On#4
// Offset 45
STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_PWM_On#5
// Offset 60
RET

// End of Code Block HBW_PWM_On
$LGCEND HBW_PWM_On

// Beginning of Code Block HBW_Reset_Flags
$LGCMOD HBW_Reset_Flags

// Rung HBW_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C100 5 0x0 0 C200 15"

// Rung HBW_Reset_Flags#2
// Offset 9
NOP

// Rung HBW_Reset_Flags#3
// Offset 10
NOP

// Rung HBW_Reset_Flags#4
// Offset 11
RET

// End of Code Block HBW_Reset_Flags
$LGCEND HBW_Reset_Flags

// Beginning of Code Block HBW_rst_switches
$LGCMOD HBW_rst_switches

// Rung HBW_rst_switches#1
// Offset 0
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_rst_switches#2
// Offset 2
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_rst_switches#3
// Offset 4
STR X0
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_rst_switches#4
// Offset 6
STR X3
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_rst_switches#5
// Offset 8
NOP

// Rung HBW_rst_switches#6
// Offset 9
RET

// End of Code Block HBW_rst_switches
$LGCEND HBW_rst_switches

// Beginning of Code Block HBW_Unload_Conv
$LGCMOD HBW_Unload_Conv

// Rung HBW_Unload_Conv#1
// Offset 0
STRN X10
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDGE 3030 $HBW_Encoder_Z.Acc
ANDGE 40 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_Unload_Conv#2
// Offset 14
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_Unload_Conv#3
// Offset 16
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 40 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_Unload_Conv#4
// Offset 22
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDLE 2620 $HBW_Encoder_Z.Acc
STRN C200
ANDLE 3030 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y5

// Rung HBW_Unload_Conv#5
// Offset 35
STRN C200
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 3030 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_Unload_Conv#6
// Offset 46
STR C200
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_Unload_Conv#7
// Offset 53
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDGE 2980 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y4

// Rung HBW_Unload_Conv#8
// Offset 60
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Conv#9
// Offset 63
STR X11
AND C201
OUT C205
RST C201
RST C204

// Rung HBW_Unload_Conv#10
// Offset 68
NOP

// Rung HBW_Unload_Conv#11
// Offset 69
NOP

// Rung HBW_Unload_Conv#12
// Offset 70
RET

// End of Code Block HBW_Unload_Conv
$LGCEND HBW_Unload_Conv

// Beginning of Code Block HBW_Unload_Rack
$LGCMOD HBW_Unload_Rack

// Rung HBW_Unload_Rack#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Unload_Rack#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_Unload_Rack#3
// Offset 5
STR X10
SET C200

// Rung HBW_Unload_Rack#4
// Offset 7
STR ST1
MATH N203 "N202 + 400"

// Rung HBW_Unload_Rack#5
// Offset 16
STRGE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_Unload_Rack#6
// Offset 22
STR C200
OUT Y4

// Rung HBW_Unload_Rack#7
// Offset 24
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Rack#8
// Offset 27
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_Unload_Rack#9
// Offset 32
NOP

// Rung HBW_Unload_Rack#10
// Offset 33
NOP

// Rung HBW_Unload_Rack#11
// Offset 34
RET

// End of Code Block HBW_Unload_Rack
$LGCEND HBW_Unload_Rack

// Beginning of Code Block VGR_vacuum_drop
$LGCMOD VGR_vacuum_drop

// Rung VGR_vacuum_drop#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_vacuum_drop#2
// Offset 8
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_vacuum_drop#3
// Offset 27
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_vacuum_drop#4
// Offset 33
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_vacuum_drop#5
// Offset 39
#BEGIN FMT_COMMENT 
"Turn off vacuum, this is run in VGR program, so no need to "
"run in this submodule"
#END

STRGE $VGR_Encoder_Y.Acc N1002
RST C550
RST C611
SET C612

// Rung VGR_vacuum_drop#6
// Offset 46
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_vacuum_drop#7
// Offset 52
NOP

// Rung VGR_vacuum_drop#8
// Offset 53
NOP

// Rung VGR_vacuum_drop#9
// Offset 54
RET

// End of Code Block VGR_vacuum_drop
$LGCEND VGR_vacuum_drop

// Beginning of Code Block VGR_dropoff
$LGCMOD VGR_dropoff

// Rung VGR_dropoff#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 450 N1005 1 0x0 420 N1006 1 0x0 268 N1007 1 0x0 298 N1008 1 0x0 2320 N1009 1"

// Rung VGR_dropoff#2
// Offset 16
STR X25
SET C600

// Rung VGR_dropoff#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_dropoff#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_dropoff#5
// Offset 23
STR X26
SET C601

// Rung VGR_dropoff#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_dropoff#7
// Offset 31
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_dropoff#8
// Offset 37
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_dropoff#9
// Offset 46
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_dropoff#10
// Offset 54
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_dropoff#11
// Offset 63
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_dropoff#12
// Offset 75
STR C604
ANDN X26
OUT Y24

// Rung VGR_dropoff#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_dropoff#14
// Offset 81
NOP

// Rung VGR_dropoff#15
// Offset 82
RET

// End of Code Block VGR_dropoff
$LGCEND VGR_dropoff

// Beginning of Code Block VGR_home_reset
$LGCMOD VGR_home_reset

// Rung VGR_home_reset#1
// Offset 0
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_home_reset#2
// Offset 2
STR X25
SET C600

// Rung VGR_home_reset#3
// Offset 4
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_home_reset#4
// Offset 7
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_home_reset#5
// Offset 11
#BEGIN FMT_COMMENT 
"Return to home position on rotation facing train depot"
#END

STR C601
ANDN X27
OUT Y26

// Rung VGR_home_reset#6
// Offset 14
#BEGIN FMT_COMMENT 
"C602 is the DONE flag for this function"
#END

STR X27
SET C602
RST C601

// Rung VGR_home_reset#7
// Offset 17
RET

// End of Code Block VGR_home_reset
$LGCEND VGR_home_reset

// Beginning of Code Block VGR_pickup
$LGCMOD VGR_pickup

// Rung VGR_pickup#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 40 N1007 1 0x0 70 N1008 1 0x0 2350 N1009 1"

// Rung VGR_pickup#2
// Offset 16
STR X25
SET C600

// Rung VGR_pickup#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_pickup#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_pickup#5
// Offset 23
STR X26
SET C601

// Rung VGR_pickup#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_pickup#7
// Offset 31
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_pickup#8
// Offset 37
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_pickup#9
// Offset 46
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_pickup#10
// Offset 54
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_pickup#11
// Offset 63
STR C603
CALL VGR_Suction_F 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_pickup#12
// Offset 75
STR C604
ANDN X26
OUT Y24

// Rung VGR_pickup#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_pickup#14
// Offset 81
NOP

// Rung VGR_pickup#15
// Offset 82
NOP

// Rung VGR_pickup#16
// Offset 83
RET

// End of Code Block VGR_pickup
$LGCEND VGR_pickup

// Beginning of Code Block VGR_PWM_ON
$LGCMOD VGR_PWM_ON

// Rung VGR_PWM_ON#1
// Offset 0
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R900

// Rung VGR_PWM_ON#2
// Offset 15
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 R901

// Rung VGR_PWM_ON#3
// Offset 30
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 R902

// Rung VGR_PWM_ON#4
// Offset 45
RET

// End of Code Block VGR_PWM_ON
$LGCEND VGR_PWM_ON

// Beginning of Code Block VGR_Reset_Flags
$LGCMOD VGR_Reset_Flags

// Rung VGR_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C500 10 0x0 0 C600 20"

// Rung VGR_Reset_Flags#2
// Offset 9
NOP

// Rung VGR_Reset_Flags#3
// Offset 10
RET

// End of Code Block VGR_Reset_Flags
$LGCEND VGR_Reset_Flags

// Beginning of Code Block VGR_Rotate_To
$LGCMOD VGR_Rotate_To

// Rung VGR_Rotate_To#1
// Offset 0
STR ST1
MATH N1001 "N1000 - 15"
MATH N1002 "N1000 + 15"

// Rung VGR_Rotate_To#2
// Offset 17
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_Rotate_To#3
// Offset 19
STR X25
SET C600

// Rung VGR_Rotate_To#4
// Offset 21
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_Rotate_To#5
// Offset 24
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_Rotate_To#6
// Offset 28
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDLE $VGR_Encoder_Rot.Acc N1001
OUT Y27

// Rung VGR_Rotate_To#7
// Offset 34
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDGE $VGR_Encoder_Rot.Acc N1002
OUT Y26

// Rung VGR_Rotate_To#8
// Offset 40
#BEGIN FMT_COMMENT 
"Desired Rotation Reached, C602 is DONE flag for this function"
#END

STRLE $VGR_Encoder_Rot.Acc N1002
ANDGE $VGR_Encoder_Rot.Acc N1001
AND C601
SET C602

// Rung VGR_Rotate_To#9
// Offset 50
RET

// End of Code Block VGR_Rotate_To
$LGCEND VGR_Rotate_To

// Beginning of Code Block VGR_rst_switches
$LGCMOD VGR_rst_switches

// Rung VGR_rst_switches#1
// Offset 0
STR ST1
OUT $VGR_Encoder_Rot.EnableCapture

// Rung VGR_rst_switches#2
// Offset 2
STR ST1
OUT $VGR_Encoder_X.EnableCapture

// Rung VGR_rst_switches#3
// Offset 4
STR ST1
OUT $VGR_Encoder_Y.EnableCapture

// Rung VGR_rst_switches#4
// Offset 6
NOP

// Rung VGR_rst_switches#5
// Offset 7
STR X25
OUT $VGR_Encoder_Y.ResetLevel

// Rung VGR_rst_switches#6
// Offset 9
STR X26
OUT $VGR_Encoder_X.ResetLevel

// Rung VGR_rst_switches#7
// Offset 11
STR X27
OUT $VGR_Encoder_Rot.ResetLevel

// Rung VGR_rst_switches#8
// Offset 13
RET

// End of Code Block VGR_rst_switches
$LGCEND VGR_rst_switches

// Beginning of Code Block PWM_ramp_UP
$LGCMOD PWM_ramp_UP

// Rung PWM_ramp_UP#1
// Offset 0
NOP

// Rung PWM_ramp_UP#2
// Offset 1
STR ST1
INC D1000

// Rung PWM_ramp_UP#3
// Offset 3
STR ST1
MATH R1000 "(((R1002 - R1001) * D1000) / D1001) + R1001"

// Rung PWM_ramp_UP#4
// Offset 18
RET

// End of Code Block PWM_ramp_UP
$LGCEND PWM_ramp_UP

// Beginning of Code Block $tFirstScan
$TSK $tFirstScan

// Rung $tFirstScan#1
// Offset 0
NOP

// Rung $tFirstScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Variables only initialized once"
#END

STR ST1
INIT "3 N800 N1599 0 MHR1 ST1023 0 C1 C799 0 R100 R100 40 R101 R101 90 R102 R102 60 R103 R103 55 R900 R900 90 R901 R901 90 R902 R902 50"

// Rung $tFirstScan#3
// Offset 33
STR ST1
INIT "3 V400 ST1023 400 N400 ST1023 11 N401 ST1023 12 N402 ST1023 13 N403 ST1023 21 N404 ST1023 22 N405 ST1023 23 N406 ST1023 31 N407 ST1023 32 N408 ST1023 33"

// Rung $tFirstScan#4
// Offset 57
STR ST1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// End of Code Block $tFirstScan
$TSKEND $tFirstScan

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Spring 2022 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 02/14/22"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Call all copy_states"
#END

STR ST1
CALL All_Copy_States 0x1 DST511 "3" "3"

// Rung $Main#3
// Offset 9
STR ST1
AND C2000
RUN HBW_Program

// Rung $Main#4
// Offset 13
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL HBW_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#5
// Offset 25
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
AND C2000
RUN VGR_Program

// Rung $Main#6
// Offset 29
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL VGR_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#7
// Offset 41
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
AND C2000
RUN MPO_Program

// Rung $Main#8
// Offset 45
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL MPO_Manual 0x1 DST511 "3" "3"

// Rung $Main#9
// Offset 57
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
AND C2000
RUN SSC_Program

// Rung $Main#10
// Offset 61
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL SSC_Manual 0x1 DST511 "3" "3"

// Rung $Main#11
// Offset 73
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
AND C2000
RUN SLD_Program

// Rung $Main#12
// Offset 77
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL SLD_Manual 0x1 DST511 "3" "3"

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program<br>"
#END

STR C2001
EXIT

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
CALL VGR_rst_switches 0x1 DST511 "3" "3"

// Rung VGR_Program#4
// Offset 18
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Program#5
// Offset 26
#BEGIN FMT_COMMENT 
"Have on for duration of function"
#END

STR C550
OUT Y29
OUT Y28

// Rung VGR_Program#6
// Offset 29
#BEGIN FMT_COMMENT 
"Home position at program start, up, back rotation safest order"
#END

SG VGR_Program.S99

// Rung VGR_Program#7
// Offset 31
STR ST1
AND ST2
JMP VGR_Program.S100

// Rung VGR_Program#8
// Offset 34
STR ST1
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C500 1"

// Rung VGR_Program#9
// Offset 44
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#10
// Offset 53
SG VGR_Program.S7

// Rung VGR_Program#11
// Offset 55
STR C300
JMP VGR_Program.S0
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#12
// Offset 64
STR C39
JMP VGR_Program.S11
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#13
// Offset 73
NOP

// Rung VGR_Program#14
// Offset 74
#BEGIN FMT_COMMENT 
"Pickup material from HBW"
#END

SG VGR_Program.S0

// Rung VGR_Program#15
// Offset 76
STR C300
CALL VGR_pickup 0x1 DST511 "3 5370 N1005 1 5310 N1006 1 730 N1007 1 895 N1008 1 545 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#16
// Offset 96
STR C500
JMP VGR_Program.S1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C300

// Rung VGR_Program#17
// Offset 106
#BEGIN FMT_COMMENT 
"Dropoff Raw material at MPO station"
#END

SG VGR_Program.S1

// Rung VGR_Program#18
// Offset 108
STR ST1
CALL VGR_dropoff 0x1 DST511 "3 3500 N1005 1 3490 N1006 1 3300 N1007 1 3330 N1008 1 2000 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#19
// Offset 128
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C701

// Rung VGR_Program#20
// Offset 138
SG VGR_Program.S11

// Rung VGR_Program#21
// Offset 140
STR ST1
CALL VGR_Rotate_To 0x1 DST511 "3 2500 N1000 1" "3 C601 C500 1"

// Rung VGR_Program#22
// Offset 152
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C39

// Rung VGR_Program#23
// Offset 162
SG VGR_Program.S20

// Rung VGR_Program#24
// Offset 164
NOP

// Rung VGR_Program#25
// Offset 165
NOP

// Rung VGR_Program#26
// Offset 166
STRPD C409
AND ST2
INIT "3 N800 ST1023 1 N801 ST1023 1000"

// Rung VGR_Program#27
// Offset 176
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#28
// Offset 184
#BEGIN FMT_COMMENT 
"Accelerate from min/max PWM rate per sub_routine"
#END

STR C409
ANDLE N800 N801
CALL PWM_ramp_UP 0x1 DST511 "3 N800 N1000 2 20.0 R1001 1 50.0 R1002 1" "3 R1000 R800 1 N1000 N800 1"

// Rung VGR_Program#29
// Offset 209
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C409
OR C410
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R800
OUT Y88

// Rung VGR_Program#30
// Offset 226
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C409
AND Y88
ANDN CT50.Done
OUT Y22

// Rung VGR_Program#31
// Offset 230
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C410
AND Y88
ANDN CT50.Done
OUT Y23

// Rung VGR_Program#32
// Offset 234
NOP

// Rung VGR_Program#33
// Offset 235
SG VGR_Program.S100

// Rung VGR_Program#34
// Offset 237
NOP

// Rung VGR_Program#35
// Offset 238
STR ST1
AND ST2
OUT Y15

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"MPO Program"
#END

STR C2001
EXIT

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL MPO_Suction 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 14
STR C842
SGRSTR MPO_Program.S1 MPO_Program.S19
SGSET MPO_Program.S0
COPY 0x1 "4 0x0 0 MC442 1"

// Rung MPO_Program#4
// Offset 23
STR MPO_Program.S1
AND MPO_Program.S2
AND MPO_Program.S3
ANDN MPO_Program.S12
SET C841

// Rung MPO_Program#5
// Offset 28
SG MPO_Program.S0

// Rung MPO_Program#6
// Offset 30
RST C900

// Rung MPO_Program#7
// Offset 31
STR ST1
AND C2000
ANDN MPO_Program.S1
ANDN MPO_Program.S2
ANDN MPO_Program.S3
SGDIVRG "1 MPO_Program.S1 MPO_Program.S2 MPO_Program.S3"
RST C900
RST C901
RST Y18
SET C841

// Rung MPO_Program#8
// Offset 44
SG MPO_Program.S1

// Rung MPO_Program#9
// Offset 46
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X18
ONDTMR T0 1000 Y52

// Rung MPO_Program#10
// Offset 50
STRN X24
JMP MPO_Program.S4
RST C841

// Rung MPO_Program#11
// Offset 53
SG MPO_Program.S4

// Rung MPO_Program#12
// Offset 55
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X17
ONDTMR T1 3000 Y44

// Rung MPO_Program#13
// Offset 59
STR X17
JMP MPO_Program.S7

// Rung MPO_Program#14
// Offset 61
SG MPO_Program.S7

// Rung MPO_Program#15
// Offset 63
TMRDOWN T2 5000
OUT Y16

// Rung MPO_Program#16
// Offset 66
STR T2.Done
JMP MPO_Program.S10

// Rung MPO_Program#17
// Offset 68
SG MPO_Program.S10

// Rung MPO_Program#18
// Offset 70
STRN X18
ONDTMR T5 1000 Y52

// Rung MPO_Program#19
// Offset 74
STR X18
AND MPO_Program.S11
TMRDOWN T3 1000

// Rung MPO_Program#20
// Offset 78
STR T3.Done
JMP MPO_Program.S1

// Rung MPO_Program#21
// Offset 80
SG MPO_Program.S2

// Rung MPO_Program#22
// Offset 82
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y15

// Rung MPO_Program#23
// Offset 98
#BEGIN FMT_COMMENT 
"Move to the oven when the item is baking<br>"
#END

STR MPO_Program.S7
JMP MPO_Program.S5

// Rung MPO_Program#24
// Offset 100
SG MPO_Program.S5

// Rung MPO_Program#25
// Offset 102
STRN X19
AND C701
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y53

// Rung MPO_Program#26
// Offset 119
STRN MPO_Program.S7
AND X19
JMP MPO_Program.S8

// Rung MPO_Program#27
// Offset 122
SG MPO_Program.S8

// Rung MPO_Program#28
// Offset 124
STR X18
TMRDOWN T6 1000
OUT Y19

// Rung MPO_Program#29
// Offset 128
STR T6.Done
SET Y18
JMP MPO_Program.S11

// Rung MPO_Program#30
// Offset 131
SG MPO_Program.S11

// Rung MPO_Program#31
// Offset 133
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
OUT Y15

// Rung MPO_Program#32
// Offset 149
STR MPO_Program.S3
AND X16
JMP MPO_Program.S13

// Rung MPO_Program#33
// Offset 152
SG MPO_Program.S13

// Rung MPO_Program#34
// Offset 154
STR X16
OUT Y19
TMRDOWN T4 1000

// Rung MPO_Program#35
// Offset 158
STR T4.Done
RST Y18
TMRDOWN T10 250

// Rung MPO_Program#36
// Offset 162
STR T10.Done
JMP MPO_Program.S2

// Rung MPO_Program#37
// Offset 164
SG MPO_Program.S3

// Rung MPO_Program#38
// Offset 166
STRN X12
OUT Y46

// Rung MPO_Program#39
// Offset 168
STRND MPO_Program.S13
SET C900

// Rung MPO_Program#40
// Offset 171
STR C900
TMRDOWN T9 1000

// Rung MPO_Program#41
// Offset 174
STR T9.Done
AND ST1
RST C900
JMP MPO_Program.S6

// Rung MPO_Program#42
// Offset 178
SG MPO_Program.S6

// Rung MPO_Program#43
// Offset 180
STRN X15
OUT Y45

// Rung MPO_Program#44
// Offset 182
STR X15
TMRDOWN T7 3000
OUT Y43

// Rung MPO_Program#45
// Offset 186
STR T7.Done
JMP MPO_Program.S9

// Rung MPO_Program#46
// Offset 188
SG MPO_Program.S9

// Rung MPO_Program#47
// Offset 190
STRN X13
OUT Y45

// Rung MPO_Program#48
// Offset 192
STR X13
TMRDOWN T8 1000
OUT Y21

// Rung MPO_Program#49
// Offset 196
STR T8.Done
JMP MPO_Program.S12

// Rung MPO_Program#50
// Offset 198
SG MPO_Program.S12

// Rung MPO_Program#51
// Offset 200
OUT Y47

// Rung MPO_Program#52
// Offset 201
STRN X14
SET C901

// Rung MPO_Program#53
// Offset 203
STR C901
AND C1706
JMP MPO_Program.S3
RST C901

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program<br>"
#END

STR C2001
EXIT

// Rung SLD_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL SLD_Suction 0x1 DST511 "3" "3"

// Rung SLD_Program#3
// Offset 14
NOP

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S0

// Rung SLD_Program#5
// Offset 17
STR C2000
ANDN SLD_Program.S4
JMP SLD_Program.S4
RST C1700
RST C1701
RST C1702
RST C1703
RST C1704
RST C1705
RST C1706
RST C1707
RST C1708
RST C1709
COPY 0x1 "4 0x0 30000 V3201 1"

// Rung SLD_Program#6
// Offset 36
SG SLD_Program.S4

// Rung SLD_Program#7
// Offset 38
STR C901
JMP SLD_Program.S1

// Rung SLD_Program#8
// Offset 40
SG SLD_Program.S1

// Rung SLD_Program#9
// Offset 42
OUT Y30

// Rung SLD_Program#10
// Offset 43
STRN X35
SET C1703

// Rung SLD_Program#11
// Offset 45
STR C1703
ANDPD X35
SET C1704

// Rung SLD_Program#12
// Offset 49
STRN X36
SET C1705

// Rung SLD_Program#13
// Offset 51
STRLE V3200 V3201
COPY 0x1 "4 0x0 V3200 V3201 1"

// Rung SLD_Program#14
// Offset 61
NOP

// Rung SLD_Program#15
// Offset 62
STR C1705
JMP SLD_Program.S2

// Rung SLD_Program#16
// Offset 64
NOP

// Rung SLD_Program#17
// Offset 65
SG SLD_Program.S2

// Rung SLD_Program#18
// Offset 67
STRGE V3201 18000
ANDLE V3201 21000
SET C1707

// Rung SLD_Program#19
// Offset 76
STRGE V3201 6000
ANDLE V3201 10000
SET C1708

// Rung SLD_Program#20
// Offset 85
STRGE V3201 21500
ANDLE V3201 25000
SET C1709

// Rung SLD_Program#21
// Offset 94
STR C1707
OR C1708
OR C1709
JMP SLD_Program.S3

// Rung SLD_Program#22
// Offset 98
SG SLD_Program.S3

// Rung SLD_Program#23
// Offset 100
STRN Y34
ANDN Y33
ANDN Y32
OUT Y30

// Rung SLD_Program#24
// Offset 104
STR C1705
ANDPD X36
SET C1706

// Rung SLD_Program#25
// Offset 108
STR C1706
AND C1708
ANDN MC450
SET C1701

// Rung SLD_Program#26
// Offset 112
STR C1706
AND C1708
OUT Y32

// Rung SLD_Program#27
// Offset 115
STR C1706
AND C1707
TMRDOWN T16 1100

// Rung SLD_Program#28
// Offset 119
STR T16.Done
ANDN MC450
SET C1700

// Rung SLD_Program#29
// Offset 122
STR T16.Done
OUT Y33

// Rung SLD_Program#30
// Offset 124
STR C1706
AND C1709
TMRDOWN T17 2200

// Rung SLD_Program#31
// Offset 128
STR T17.Done
ANDN MC450
SET C1702

// Rung SLD_Program#32
// Offset 131
STR T17.Done
OUT Y34

// Rung SLD_Program#33
// Offset 133
STR Y32
OR Y33
OR Y34
TMRDOWN T13 1000

// Rung SLD_Program#34
// Offset 138
STR T13.Done
JMP SLD_Program.S0

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SSC Program"
#END

NOP

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program<br>"
#END

STR C2001
EXIT

// Rung HBW_Program#2
// Offset 2
STR ST1
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung HBW_Program#3
// Offset 10
STR ST1
ANDNE N300 0
ANDN C56
CALL HBW_get_X_Z 0x1 DST511 "3 N300 N200 1" "3 N203 N101 1 N204 N102 1"

// Rung HBW_Program#4
// Offset 29
STR ST1
CALL HBW_PWM_On 0x1 DST511 "3" "3"

// Rung HBW_Program#5
// Offset 37
NOP

// Rung HBW_Program#6
// Offset 38
NOP

// Rung HBW_Program#7
// Offset 39
#BEGIN FMT_COMMENT 
"Return to home location, UP/Right to zero encoders at the "
"start of program.  Ideally should already be close to this "
"when program ended if not already there."
#END

SG HBW_Program.S99

// Rung HBW_Program#8
// Offset 41
STRN X11
OUT Y7

// Rung HBW_Program#9
// Offset 43
STR X11
SET C110

// Rung HBW_Program#10
// Offset 45
STRN X0
AND C110
OUT Y51

// Rung HBW_Program#11
// Offset 48
STRN X3
AND C110
OUT Y5

// Rung HBW_Program#12
// Offset 51
STR X0
AND C110
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_Program#13
// Offset 54
STR X3
AND C110
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_Program#14
// Offset 57
STR X0
AND X3
JMP HBW_Program.S97
RST C110

// Rung HBW_Program#15
// Offset 61
NOP

// Rung HBW_Program#16
// Offset 62
#BEGIN FMT_COMMENT 
"WAIT for new input should get here at the beginning and "
"after finishing a loading sequence"
#END

SG HBW_Program.S97

// Rung HBW_Program#17
// Offset 64
STR C56
ANDGE V400 400
ANDLE V400 408
CALL HBW_get_X_Z 0x1 DST511 "3 N[V400] N200 1" "3 N203 N101 1 N204 N102 1"
INC V400
JMP HBW_Program.S0

// Rung HBW_Program#18
// Offset 89
STRNE N300 0
ANDN C56
JMP HBW_Program.S0
COPY 0x1 "4 0x0 0 MHR1 1 0x0 0 N300 1"

// Rung HBW_Program#19
// Offset 103
SG HBW_Program.S0

// Rung HBW_Program#20
// Offset 105
#BEGIN FMT_COMMENT 
"move left until X value reached assume lift in at this point"
#END

NOP

// Rung HBW_Program#21
// Offset 106
STRN C100
OUT Y50

// Rung HBW_Program#22
// Offset 108
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#23
// Offset 110
STRLE N101 $HBW_Encoder_X.Acc
SET C100

// Rung HBW_Program#24
// Offset 115
STR C100
JMP HBW_Program.S1
RST C100

// Rung HBW_Program#25
// Offset 118
#BEGIN FMT_COMMENT 
"Go to Item on Rack for Pickup"
#END

SG HBW_Program.S1

// Rung HBW_Program#26
// Offset 120
NOP

// Rung HBW_Program#27
// Offset 121
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#28
// Offset 123
STRLE $HBW_Encoder_Z.Acc N102
OUT Y4

// Rung HBW_Program#29
// Offset 128
STRGE $HBW_Encoder_Z.Acc N102
JMP HBW_Program.S2

// Rung HBW_Program#30
// Offset 133
#BEGIN FMT_COMMENT 
"Lift Sequence Rack"
#END

SG HBW_Program.S2

// Rung HBW_Program#31
// Offset 135
STR ST1
ANDN C102
CALL HBW_lift_seq 0x1 DST511 "3 N102 N202 1" "3 C202 C102 1"

// Rung HBW_Program#32
// Offset 148
STR X11
AND C102
JMP HBW_Program.S3
RST C102
RST C202

// Rung HBW_Program#33
// Offset 153
#BEGIN FMT_COMMENT 
"Load Conveyor"
#END

SG HBW_Program.S3

// Rung HBW_Program#34
// Offset 155
STR ST1
ANDN C103
CALL HBW_load_convyr 0x1 DST511 "3" "3 C203 C103 1"

// Rung HBW_Program#35
// Offset 166
STR C103
JMP HBW_Program.S4
RST C103
COPY 0x1 "4 0x0 0 N202 1"

// Rung HBW_Program#36
// Offset 175
#BEGIN FMT_COMMENT 
"Conveyor Factory"
#END

SG HBW_Program.S4

// Rung HBW_Program#37
// Offset 177
STR X2
OUT Y48

// Rung HBW_Program#38
// Offset 179
STRN X2
JMP HBW_Program.S5
SET C300

// Rung HBW_Program#39
// Offset 182
#BEGIN FMT_COMMENT 
"Conveyor Warehouse"
#END

SG HBW_Program.S5

// Rung HBW_Program#40
// Offset 184
STR X1
ANDN C300
OUT Y49

// Rung HBW_Program#41
// Offset 187
STRN X1
JMP HBW_Program.S6

// Rung HBW_Program#42
// Offset 189
#BEGIN FMT_COMMENT 
"Unload Conveyor Sequence"
#END

SG HBW_Program.S6

// Rung HBW_Program#43
// Offset 191
STR ST1
ANDN C103
CALL HBW_Unload_Conv 0x1 DST511 "3" "3 C205 C103 1"

// Rung HBW_Program#44
// Offset 202
STR C103
JMP HBW_Program.S7
RST C103

// Rung HBW_Program#45
// Offset 205
NOP

// Rung HBW_Program#46
// Offset 206
NOP

// Rung HBW_Program#47
// Offset 207
#BEGIN FMT_COMMENT 
"Go to open rack spot X-location for Unload Sequence"
#END

SG HBW_Program.S7

// Rung HBW_Program#48
// Offset 209
STRN C100
OUT Y50

// Rung HBW_Program#49
// Offset 211
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#50
// Offset 213
STRLE N101 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#51
// Offset 218
STR C100
JMP HBW_Program.S8

// Rung HBW_Program#52
// Offset 220
#BEGIN FMT_COMMENT 
"Go to open rack spot Z-height for Unload Sequence"
#END

SG HBW_Program.S8

// Rung HBW_Program#53
// Offset 222
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#54
// Offset 224
STR ST1
MATH N103 "N102 - 215"
MATH N104 "N102 - 225"

// Rung HBW_Program#55
// Offset 241
STRLE $HBW_Encoder_Z.Acc N104
OUT Y4

// Rung HBW_Program#56
// Offset 246
STRGE $HBW_Encoder_Z.Acc N103
OUT Y5

// Rung HBW_Program#57
// Offset 251
STRGE $HBW_Encoder_Z.Acc N104
ANDLE $HBW_Encoder_Z.Acc N103
JMP HBW_Program.S9

// Rung HBW_Program#58
// Offset 260
SG HBW_Program.S9

// Rung HBW_Program#59
// Offset 262
STRN C103
CALL HBW_Unload_Rack 0x1 DST511 "3 N104 N202 1" "3 C202 C103 1"

// Rung HBW_Program#60
// Offset 274
STR C103
JMP HBW_Program.S99
RST C103
RST C202
COPY 0x1 "4 0x0 0 N202 1"

// End of Code Block HBW_Program
$PGMEND HBW_Program

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C10","","","Software STOP"
"C28","stg","",""
"C31","","","SLD White Puck Ready for Pickup"
"C32","","","SLD Red Puck Ready for Pickup"
"C33","","","SLD Blue Puck Ready for Pickup"
"C34","","","Deliver puck HBW"
"C35","","","Deliver puck train depot"
"C36","","","Pickup from Train Depot"
"C37","","","Deliver to SSC"
"C38","","","Pickup SSC"
"C39","","","GoTo Standby Location"
"C56","Hands_Free_Mode","","Enables hands free autonomous operation"
"C100","","","Manual Horiz. Limit"
"C101","","","Manual Vert. Limit"
"C102","","","End of Lift Sequence Prg."
"C200","","","Lift Forward"
"C201","","","Retract Lift"
"C202","","","End of Lift Sequence Sub."
"C203","","","End of Conveyor Load Sub."
"C204","","","End Vertical Prep."
"C205","","","End Conveyor Unload Sequence"
"C300","","","HBW Raw Material on Conveyor Factory"
"C500","","","VGR programflag 1"
"C501","","","VGR programflag 2"
"C502","set","","VGR programflag 3"
"C550","","","Vacuum On"
"C600","","","VGR subflag 1"
"C601","","","VGR subflag 2"
"C602","","","VGR subflag 3"
"C603","","","VGR subflag 4"
"C604","","","VGR subflag 5"
"C605","","","VGR subflag 6"
"C610","","","VGR subflag 11"
"C611","","","VGR subflag 12"
"C612","","","VGR subflag 13"
"C613","","","VGR subflag 14"
"C700","","","Puck in MPO oven"
"C701","","","VGR clear of MPO pickup"
"C702","","","Puck at SSC color sensor"
"C703","","","Puck at train depot"
"C840","Saw_Enable","",""
"C841","MPO_Ready","",""
"C842","MPO_Reset","",""
"C900","Vacuum_Unloaded","","Set to on when the vacuum leaves the unload state. Reset once we jump from the turn table Idle state"
"C901","Entered_End_Belt","",""
"C1700","Color_Red","","SLD Red Puck Ready for Pickup"
"C1701","Color_White","","SLD White Puck Ready for Pickup"
"C1702","Color_Blue","","SLD Blue Puck Ready for Pickup"
"C1703","Entered_Inlet","",""
"C1704","Exit_Inlet","",""
"C1705","Color_Outlet_Ent","",""
"C1706","Color_Outlet_Exi","",""
"C1707","Local_Color_Red","",""
"C1708","Local_Color_Whit","",""
"C1709","Local_Color_Blue","",""
"C2000","Auto_Mode","","Automatic Mode Enabled"
"C2001","Manual_Mode","","Manual Mode Enabled"
"V400","Hands_Free_Index","","Index for the hands free array N400-408"
"V1600","Oven_Bake_Time","",""
"V3200","Color_Sensor_SLD","",""
"V3201","Low_Color_SLD","",""
"N101","","","HBW Col Encoder Value"
"N102","","","HBW Row Encoder Value"
"N400","","","Hands Free Array Row 1 Col 1"
"N401","","","Hands Free Array Row 1 Col 2"
"N402","","","Hands Free Array Row 1 Col 3"
"N403","","","Hands Free Array Row 2 Col 1"
"N404","","","Hands Free Array Row 2 Col 2"
"N405","","","Hands Free Array Row 2 Col 3"
"N406","","","Hands Free Array Row 3 Col 1"
"N407","","","Hands Free Array Row 3 Col 2"
"N408","","","Hands Free Array Row 3 Col 3"
"N1000","","","VGR subshort_int_1"
"N1001","","","VGR subshort_int_2"
"N1002","","","VGR subshort_int_3"
"R100","","","PWM HBW Conveyor Duty Cycle"
"R101","","","PWM HBW Horizontal Duty Cycle"
"R102","","","PWM HBW Vertical Duty Cycle"
"R103","","","PWM HBW Cantilever Duty Cycle"
"R900","","","PWM VGR Vertical Duty Cycle"
"R901","","","PWM VGR Horizontal Duty Cycle"
"R902","","","PWM VGR Rotate Duty Cycle"
"VGR_Program.S0","","","HBW Pickup"
"VGR_Program.S1","","","MPO Dropoff"
"VGR_Program.S2","","","SLD White Pickup"
"VGR_Program.S3","","","SLD Red Pickup"
"VGR_Program.S4","","","SLD Blue Pickup"
"VGR_Program.S5","","","Deliver puck HBW"
"VGR_Program.S6","","","Deliver puck train depot"
"VGR_Program.S7","","","Next_command_Queue"
"VGR_Program.S8","","","Pickup from Train Depot"
"VGR_Program.S9","","","Deliver to SSC"
"VGR_Program.S10","","","Pickup SSC"
"VGR_Program.S11","","","GoTo Standby Location"
"VGR_Program.S99","","","VGR Home"
"VGR_Program.S100","","","VGR Manual Mode"
"MPO_Program.S0","Init_MPO","",""
"MPO_Program.S1","Oven_Reset","",""
"MPO_Program.S2","Vacuum_Reset","",""
"MPO_Program.S3","TurnTable_Reset","",""
"MPO_Program.S4","Oven_Load","",""
"MPO_Program.S5","Vacuum_Move_Oven","",""
"MPO_Program.S6","TurnTable_Saw","",""
"MPO_Program.S7","Oven_Bake","",""
"MPO_Program.S8","Vacuum_Load","",""
"MPO_Program.S9","TurnTable_Unload","",""
"MPO_Program.S10","Oven_Unload","",""
"MPO_Program.S11","Vacuum_Move_Turn","",""
"MPO_Program.S12","TurnTable_Belt","",""
"MPO_Program.S13","Vacuum_Unload","",""
"SLD_Program.S0","Init_Sorter","",""
"SLD_Program.S1","Sorter_Belt","",""
"SLD_Program.S2","Sorter_Color","",""
"SLD_Program.S3","Sorter_Push","",""
"SLD_Program.S4","Sorter_Reset","",""
#END

