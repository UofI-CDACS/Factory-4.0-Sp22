// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\Jacob\Documents\GitHub\Factory-4.0-Sp22\Factory-Fa22-Demo.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
6f9e1e9300a9d9e01208d5740777824d333ed8e54667c5f6a0c959d0614f4503eb833f1b95bd6c8c
219a09db01cba83cab86f33250ef797e7079a4465e25f180b83d48204e700a8786955c0802fa5af3
bf543ba6bb20afc190c5833c8c9edd2dfb78c7165ca2e30d9cf2ec61b34326998020e0ddc90603e2
a91eca26ff245b4fd04c4ab2f9976a93bef01e54d97c592b227737bd7798deaa013c0f9f6632b5e7
e9a954ad8be8c833753f9721b5709368dcc9502c706322f70a673dc25bc75b334504fbf78397bdaf
da8bf99fbf2314ac4494c5aa9d26c564515b2442a713ab1cd00a1c56e76ae624dca06ff12dfec656
6a979eb6492e2b36fee58d92fb1bd50355335c80277b73cf03d8e37c33a05b1b0030fc8f3c1a31e3
9b8746d1b017d0543b89742c35250b75a5d3f934ee0c9302aff646b976206c4224ff57bc684184dc
bf18a06a9a9ebdf6bec35e2eb4edafd72a62b738c593b66bf49bc9c49de895254da5d718b9ae1bdc
2f8531c0c8eb3f8d91d553ad5bdc378854e3ba018dbeeaa728c8f21fff0aa3685bc51da2d470f296
233add0de13015940a3fa36fc30c983dd79b3d9ed5ec7b16dde2fc2eb160ab2119005e3ec60e9403
29e62e680ed10c20b310fe6be8bb77f7b2745b56e254afb96d3fc23afc342a86c2e3ddb8f8f1ce9c
7c5ac04203e31f9cd1a8d36d26a2be161c930ae898b26c43ba04b1bdbf9d28241dd127d215990b6b
af5a638fd3e3d69350a1854641ae1857357225236c7c6f510d2380912c1e4a06910b14de34a8abb9
a9eac218336704e14276e0a89ce6b0bc76e2e3f08df29da8670a792ed80e81de181a0e4c606b1dc5
19fd5525441c94808949998588900733efcd249d400c6d67ef97f099c6c9c3efc0472985c3bfc97f
e35bce1253f3b5f079fcedfbf81eaa314e07fbb9af8006e34b888cad9998a6293d9a45c0fed7a9c1
643b124492bd6d18187c6b21ce7a9b93f06f1176d8166abc4b844a4ce438d1e1ffc8ac87047d5918
9d208d026fc99ea8eed77b75d0b74f30e240c1ff313b64cf9854893ba8355e27a99f6abc5eb669c9
7a11f3ae9b2a7f0bb216596feb321a9b1cebd4daeb10fa720b878076d58edb29e44ba76301ce798b
f42b3d91b0cd4818636cf7d9afe8dbf6036d9a4231d0b373594102dbb42aed9d5e08c797b25a7de7
12a74f63217937624c25a1d97b3812787f192bec5ab1e1c4b3e65404ddc9056e68a97aca619253ae
47ae298622a4566478a57197adc89cc07d2a5483fa6f580f057f8e9ac4979046d8f5ca01fe106f36
386e0c0ed45ef9b7c092b8395289ed5cfb90d35546d0cce744a694b2a173a513c758ad1254c30282
7f8f5582a6b3d513b00d206ae110cfb1a95e0e389b930e4b09a8db8483ebac26316c54a96f312986
09dc0368dcff0df187e36253bc4887b7025ee17d08b7b13965bbdd97538f80d15ee9ab383a659b2a
360ca71776b925242831e6f06bc4758a5b857af62974371f985602368fd3be965ded7cf145a77132
49e0078e028797bc225aa88ce782e4ec984f144cce67d74f73efc470d0711eb6a07d1bd18031febc
4e042302220b8b5c7a2fd2515c0e6286480e2d32336e48232e29639975fd95c5beda371647651a00
5f8dc74d2141ecb1d437bc23e55beeda5a4ca3d9c53f4ee6c1d1b6d9b6d13a25e09b95e7edd68cc4
a18fe7ef38326f9c6cab4edf61e991559264fcba1cac501e6cffba57be7113a6faaec37a84f6d639
a783bbcfaccdedd8e4232957b7bfe0bcc4a2fa85b3760f70cb2f368dd2205ac2e9d01096840d3e3f
6e75335e7cffc81249e358569ed72a6a4644a77a191e25205d69734575aff45e9a945c15e8a884e6
fd740e3c03a73ad07ba3587fd222d2d70ab152f0b451118b131ad6588eaeda0a2a7d57682e4dd05c
d96234d191b08bdfbb1c8985b4feb541eea91f80fc058b11474bad1f1c4c81792ec5e1b69273421e
600211815fc06010925c75052bc1b4104fd39aa1863a8595f5a16d227b50264b098bedf9caf03879
240d2e673d4481ec4384fa576e36236de4fff2f1d842f1b087f2ea8c456ce6dc718d25d06a43c1bb
c73df8830c632b393ac6a96b14aa8359caa6c8c0cb046ceb0cdd116c4f748d053a7f8d622b7b3723
3e5dc33c469c9bcf34b519ed42a63010ffe565894622e2540face65c978e97f9fc24b8a7e3eaf4b4
d09b967bbb858622ba8f87ddb573e141f70c169ecdcd7a62cce2531f3ba893aa035a32ab1c055891
d9f2dedeca7cdbb1d56560cb0d6a602c99bc322223df43a59db9802acd92b5809ef5321108167633
45446924cfd233cdbb9907b907bc5c4b227d93c3c79d8131886068291719d844e1e6e18d2873b84f
b1cb249acf0ac33042fb2dce3daa015cd4ad201876ff906e4f8b911a72c3d5e27f8a7ca41a8fc03f
ba20bea3eeb3c18a08b4c1e9441d198beab82bf0fd1502da3df4bd61ef2fd8a42a06c4b8bb6d945c
f1685ee6154b31b7ae5d8a7d1ceb193689e705e549a615eb2573f9046225e80b92b951ea315066d8
ad3f5c78ab8bac49df846b9c0cd6fa7eefded88a25baa4a95aa0e260eb92a6bcc841f21a53d1ad66
158cda03aa2f35385341edd95e47ca31bcbc216efbb0cd11dbb2eb060a22bd0b164bd991de6aedf5
183c3300e9db005ed3df8caf3595c44e87ff6c06e84da6ae3394e3c90ac23e0eaaa44e56d393f914
1d550e4db4939e22a3fde5b3c0804bff78406d147ca8af4ac31b54135076eb48655cb658e9ebd5ad
6492233b852b695cf11123b0c247a713f04bd3d3d1afb1a95052ee95ab853b9a70e213936e21cb7f
b13d6ff7f3aa0bca3418df029c880f683ecca3a3301062016e165fe3fd0b4ecd539851756882e01b
178d20fcd3b055ede1a14747287ba4e568192c3a12d618f50a692954696e01ffbd4fd4a786c647af
6e042f9d587f286e3082a1353d5b62c73a7e0f755c9ed15abbf42888747c6399d39e5bb264d532cd
14668bcde183476d2e4b61893c56f8a7fde2207172e996626cd751996db456c3e3f60dfa79502a5b
f9ded3cdd4bedd814b268778394626d3d66ff7feee8e583c22a41ff6f34ec33a03ee9219ee53fac3
be6fa9f2ffc9c71e156646ad2356496fb709002e5ab868dcdcf3adb82bf5344f4135bc9fef327cf1
cd14c171f4ae20d6c338367f37027b87677410c14518d4338fa219ddfaeacfd6a00e06eb70332b09
a0aeb1b146e4e4de0d3d8d57a59551ed6cf0f40636d4ac3c9f24bb64e207dfc7c3087c262f8f08b4
4f9f42ddaac0abaf286a279382050567f8f4da45c9eb76dc5a9f4a1351ad97a68510f5bb8305cef5
6b0f9aa6c082d6aab2781111e644444257b5e6f9868dceec06d21d1b8ef063f7c89d3f2412c52558
3f1c3cb171662e435824767e239a526dd98e146f054d5f5c6840456f4e584d321cc15414b10288ba
76b22dcf07b9abaffc63881471b341871bc212afa6c8d1dcd0724ac3674ecbe2c3d5c0c14f5f136f
7c5144d65709ac34b6327a9fa32d5443f9be61b71cfe371cacb7db44083d70b99d7f1d7c00823ae1
016a342e6e6818eb2abdbde4a43b70978506a98197ad1280d2ac97e2ad5873781a69a2c94e0afe01
ab9b8ab14c94fcad851800549586ca524efab43365eca53609336ce7bf6f8a4d3fc10368e07aca97
c483d04f665981218cd3896f7d2990bfea708b2e37ea56ce63749b4165ed77c7e6f549b161e5b663
c409a4fa4ce63a9cf682c3a3fdf71039cd873fc0503020ad8a92a23201913c914c075fdb842d5907
387a9d8fb7e27134b930e604332b0b26aa1bc3325b250c2dda6e21f4b77e5ab8d435449a38cf058e
36e104c3b15193644a1e48f7e4500699b08f5c7c1acb3779fee7be8f51f3048e05958fcfc939c9e8
7c7c2565c7e4ee3cba9d9f822a3c06e1c83c74fd1e660a1bf992d0ca8a8c84f790c216968a044f25
91dc954b1dcc82b77c587a075234b60ed503b8aef924eff28017d04f4cd554f1162aa41d00666d0b
e91ac068839ace0ffcbdffb0795dbfc928fed5debc0b60b6e13cf7ba4a6b9812b8a94f05b0ff8b35
98450e961b06fb4536d77c046879dbb0ba3b41dc8774956b162500b4476100eaf58d586f1d8e6561
f0309645f9f49d72150a01c6213c7e43fddd201ae1738cdaf5365285bfdf8ccda60aa297d4466126
782acd4f05623bc76c328f6ad16dcf08ad8c95436451ddc7a125ec976aba669f13d718bfea6cdc7b
9d648811cf189f7a8dcd21e3c515f531a24dc6017210f6a04303626a44ded1bb04d14b4801bcbafc
fc95734eeff8ed9af4c26269aac26595599f9f44438919dba13ed64afb376ca3be7b615a75df9e78
f939afea5746457710bbc3930253e6b83f53b205de3ccb3df65dc7c8619d6b87e22cabd6e2f1a5c6
3ef8594b87547c61942a41a0958b8e2ed2dead4d86ca5c77489f3f32bb57b2522042a6f095927bc0
0a919e372bdc2aa528f2426371a5878eb1854a66170ec7e7056382d7c8cd6d5153faac1c27efbfd6
01ebf8e0aba4bf1d463fd61341da929a6caed5121db9a06e035b3f59599884d16d1d888316902b37
207f11ad0fcf2805245540a92a7fe15ba237e2cb8081ade40cd3b74c527e2d9f3a7105d013435437
768ea93e95023aab4cdb5dcb83b3449c108ef9dc7e13ca53ce693c80bd334c671cab1debd578740a
e0cca58e662f7e2c4450fd73951cf18c9cd952b45708c2c5a8cca081fb8e6263525dcb0de4e3b1a9
86e12a5f105db3bd2cc9199a29c32f9a463c7e470182c0f50c7444a1e0bfea5b748d2dc68791f67d
9fd816aa659d990d77fbcd95bfccc7eff626110661ea08f4af07d7cebe762e23026452b1462a105a
cef8061f4d8d18f095fbc996edc8d1b98ad0c603cfab34140309d31de32b32fe5d71118424fbd305
45b7a415daa6ff360b5bb5ae3a2c71e98947e49cf777d1c5f8476d14846e269ade5d8f3314ed5051
7e182ecd3af9f3d2efe19b983b5f41f3ac44ecb744ff85afba8cd8b32a7ebd63abd408368e91af5e
2d4e45e6fa4efe6864a989b7a469ee95364e124b032cb9c84798b363b4a9b06ad21c3c180fdff70c
75031713ec0cf536ae384f45abc73a54f60f2859034782883d637532f2290a25bed1502f9e64bb9b
d0e5a1f61e76187ff72b509bc31b61c7eeeb50892f3247c5e144c3c66ac19ceb9ca2bee4c34f05ca
c8c05edfe4974898a5505855685f738b04c95a8a5e4362e57a90a0068547c087e0cc8e73d271bf3c
0d0df3f2daee8bca2fa29a0797dc131fde8421e715977104fbf11f5f08ae0229163f540496f9d4bf
ba70a2cc67c9cef8b969798a0c3ed2c31d38e75d9dfe9297273a7b90d85f39e7c8a81beff8e22b82
0635f70e435766caf4c97c4b00836ba049d4241fa952449ffe6547e16cf88be17315199c2c53f909
399e53500e3e7d67d663da623410ff45e13693a0a8cd84d5cff5e81a403c5abf37a2642eda638073
1a99ef103cb535d7bbb1f7c78350ca7d533a24c0fec4fcb2ac04cb3f3d86507f3de83a32ede70edb
01cd5f4aef15bc59439803498a72f65ea011ffed120fced36f76bb80fc57fe03252117cf443c4fef
206cfc6ee6222fa5dc3f0e1aef5cda51841844dd74359f0aeeda83ad8139ae5594356aeffcf4ba53
a07e02af98da83403a4f7e9de7c7e6e5f053e7c3a6934716caced6de77287cb18d58dd0e032f433d
7c2b7113356ebb0666931be06623e5dab7882e40181a42a75bfbe204d8a1568434ac9004a6e9c19a
3ab3e5c1270d1af8a1ab4df46c5a478dfd0869abd2fd83bb9f4deecc2a62673c4a0877e855d9a738
59a1e9d3e384f44248dc3cc64c861ab938b51ff84126b415317117962277305e47bf0183fbef953f
114f0048e19ef802c686bb11be1aee61ebadf6effa3cd0984e7c9f924e2f9a3f816bfe1bf95bfa70
d85fbd66a6f7467e4c8134379acbc1bf27ab2d9237b2f25e4ce7f7526954f3f1be18c45e2c57b4bb
1806c0b7506e90ecb45aa07713c6c45bff1672f4f08ce267cea34c2291431b344fe3d839c5f63873
99b021480aa7c04c121ff1e7fe913baf5882e499fa8fe272e87759db31af20b399b2c562b2ade686
dbf5c6f0927eda7b235ef7d2c5ef5bad72120927d1ac00271b0c96441b6b27e28fd07dd1de8b187d
fd8f9092e00fcc024100e748cc722cdedfe5a6fed6da5090317e8c556e6aeb36faa540ebef8d4088
baf04e2b8c4f71033cf374f2376ce0df2deb3c3cd4788ebc67146074babd25e1ff0e197444abc3c2
d81d7a17fdbe9e059d210b03beefea9af9aac0d7adb7d23a663ffba6c1d89101135338c3aab1633e
2b218915b68363d1fb176737c793a9ea3e139b2412998e031abdb97dcfbdf6f4450762e17840c910
a5126897725707d12f2b1a25687dd72d517968953e12aa3a2476ad5cd3139d135f194d2852340167
edf0c45f3495c8bd01af66f938a6fc642711a19af69ba2dd4bb3c985dca9c89ca6cff175a48556aa
8ec59384ca0ab724f535a007ddc7f969329f1a30dbf1f91af33616a6c33d899aeb1c3e69c3a56f45
61928069750b622f607c903a54fde82c2ea92f9a0e78ad89d7da1106ab29915979bf833f881c8519
e8520c036b014118c17af2cb5860593b413a7cae77f884c54ec2e4ab268c4c2146b786d92d877fec
7d44f2e0e466a2f74948cdae704b271a9e27a04169764a4271247a953ed2781be9f867163f2eef18
1d98dc8ed02e2a4693ab7b88498f3b9af3507344f4b252cbdc277842373b56465bc8be62d21bb735
ca1080864d6adccb41b52d1175d0ac24957aab40453965abeb2a7ed7c1acbd4f0695aa498d98b174
e078aa508251fc59657d2c9c65ca48b7b925a37156e0179d69e9933bf08a8ecb8d1febae4c5eb43a
0828315146594d8a53f55d7a4d28e09ff026066d0b18112b92f77bf400fce34982fcff7a33613f4f
dfb3e37a427314bfe9a830b541f964fb113097b07d82bd3565a4cfd3c1ba3efa7279473ac5e33a29
17de56cae2caded0b58b124a3042eeb16ca83e95dbaf35b566fc9cfa942475eb88efa6fb49093975
739ff25b6c9f5a65763282cca624eba0efb424026497422eb34d18e1d74b9b5e07a1fa11a6c7599e
e21b6e153858bdccab6b43952e66d494b5afed945e69dc09a66fb00c27c3453523df202b3b1018fe
ebe5dcbb5553b82016c8c9d151151913ed2de6eb935ddc53205a09f370d67e4a3126f449c70ac1b5
ef03c3f25c084ba0cf839b256277f4d0695bb73a076a19f021d01732079134de3c24b81ca24c606c
6ea200d98d063981d088f732cf507fe8688c6ba740b6ca5d0ec6c63ac9a5585e15711de28d5f27bb
9ea589b4c5db1cf110e9ae80fd56bb2d0f5b4715c9cf291ce751ce5ad2c58e5b27eaee8a1fa2d7ee
f1119c9ddf164d4b6e949d287b4ba18997b49469c5d3cbef69c20a2541c8fe2b0df071cd7f6388b4
21873519c4c65f222237ad1c6e5d6afd00e91b4f2b039de8d0083a2a05b7af1938858dae7c4691db
d14ea0e592bda7d768a2bf00a68baeab32f838363c28f834122e3d0432f47a1fc815525262e0a96a
10a491ea9d1ff935d34b124bdfc4971d1ce77608f43f1eb8a404cee7a098ad1d4a349fefc1c4d116
ff8e0fc85f2a489e1c9980d88efb6b4d1bbea196df17d8e674191154c29de46d5168320e36d8e437
0bec338d3ca616eef3dc2e16e0be19215ccb77626f9f54834023429eeebc4212d85a0ddef99c668d
2a150364bf09bbbc3f154b6c304e7a5d6bca3b129d8e45576d08b4033c47f7f8e7daefc81a84071f
916d1eeb9ef546e10884d97ac030801a50e6d4688f77dbd4527b3f35e0ddcd8b34ae104cc83d20d6
07abfb5dadc821562f3af271a608878b017eccd0dea0df0ad26b42ea8ad55842589e6d7fe21b4a29
916e6cf1b81b61eab5793b383959dfb9010f174c1f41d136072874c04f0bafeab3b6aadbf4db19e6
1f7025bf9445cd226d7520bcdea9b9d4c5a9a7fb34e7d29b9a5b66894baf22b2d472c409e2a5102c
73550dfa813c6f3c39e70866a62724dee87ef6748ed7854427589f92c2657eb31ad8006663f055e5
ef3e3234c86ebfffbbd5afbd6370975480e39175bda1e262e237d9fbd1a752171022a4fbc7d47b9e
51e03be2dda654b1a182c30b8573a8b7268390ba7e03078687e0ea8beda57be1eb0fe223ef39b074
c57c9e43db5f76b4f7c2d3bab6dcafbdc0bb36f9ea92c34ee397b57890e9bcfed385ed6406f3bd42
3a016a8a3953db2238dab71e7cd654a44795de9f0e2fd61464763bbf409a2454c8ec53a3cd132cee
0489d5b6d4c9e1ef52fe36f7600bb714159933f040b5ca768b34375713c37d0e502e5960b2752c93
246eba4dbc131abdfe2c150e607b993b39e33b0ea6594a4fedc150ba04aa7a6d2d72a2b7d1cfa4a9
0e60f884508b394ee39aa70c6e898d65af889f99c7d392678702ad1a364ffb03aa7e9d0e1dd4e668
a55cf4e08af78addce77e3a8061c805ccf6d40f19b01228e304769ce0d0d97648e71e8cad013dcec
d591e0ad5aac9b07590259e1ab8fdf4b612f91cf40fec8a94cb6014ce3c9d309da3bbb403cc76d9a
10fb6f549a4b734410ed038ef518eb68d45ea1bf23c8d5b3e24bcb1b7363108ddfb6a32c9cc412a9
8afed0136e0b2d765e3806e821ea3ec86421ae8863ba921284b8ab9f19697c6d4ebcaedb0196d04c
f0652ed4fb7e1662092ef0caef5caa87dc00859207ac78ee1303f273e4dc628f801b1d2b63fcb83d
e423fae3ef7b03589c89922d7f5263ea35d6ca606e0f0044068b0d332236de91318f1f6897b8cb49
2d5690fb29b91e5893705715e89c6eeb8d43c283438b96e040281d89731a2d9a3e2adab8f8753d52
4f65cd9707ef9cc093eca8026b8add4d71b3dd859df29f9f0dd9b98b6cc82b5ea83ddfe70edde7e6
c9677619740864d25b1f0b0e7cd2ff5f5506e3d5d6f8679cfbb6017164aabffa6d069a150db7ff72
2f5c6db9e1061161d4b424754d6eb09dd84bb9ce7a1f35ddacb1bbe3fe5e709eb9a5913058f74973
d7c8e53e3a20f07458f65aeea08c3f6972fc0dba2a4de3c11f331625770dbbda620306e9a00e1c84
4353119125250f8876af989e4b6501f641f624425bad2204efcf96902711191bd450c3a3bc8bc8fb
fc9df147a5da53a22666d97987f7f6e107203a1f79694b599e663fe14ac2baed53bdc9bd4e2d2fe7
d00389073a9f303ecffe4c3528d1d38fad079b240b0f58d431329793d00c88b7878eb204d2ec4a71
d8fbb6687c71a813d3972f8b37d3599e4184828dffec666bd68ec073424d79c78707c91a961c2e17
a2e5f9dacb589c0b81d92657265e6e8564f9451e130b41caa65e3c5188d9c692904251bce09380eb
94e9b4bbfba1d2d7a193841265cb20cf4b413215c414cee625985bb2dc2b5b1a9b2bb1864eaafc01
7c5a8151b5735337f90105bb74f659582d4ca8260f9fab3185d8fc05abb654659eabf9ddde8b4f85
3dd0d8a54293ed4f101d2b8eb0f0d4b34c0ebac94eca2a7280bd2fd4caf762c4399e83b95859a486
b5a627e62993c295da646ea5e21e5e6af0b176d488e027f3a53c3c2703614494c61542d8ecb338d4
7f6f423f7313ef4a7f3ca7d425e4a5cbd4bbe8846a57c014f2fd2684ea3388d9dfd31286165f5a46
c1c39e99c8e39e23bae11f92ccc17e5c8e788c30dcb388c3c2963463a0e149ffdd1e66c4fbc990bd
9e69fe2bee57c7fcca798d95e829895d9821562f9f7085b653e63e3d4ce31f01f00529fc6a005455
5362bb75595d0d39e4f93800c2b71d8352206bcbdbcbb96b568f8b2eed71edc2c59120ee0e1f1a93
fc179cc3c8062052ad37d887b3be92c7560ce65d587eaf68b02c57d690e689958c6bcbc0d341b90c
75e2d31c3526cab6940e68183041fde16ac78585cc9420c0271d32d0de3aa013dca77effc047c232
45443dcdbf150f7441070c8faed0e41a4f31d8cbbb30845b44600802a127637ad9ca04d2caf770af
7f5bfe11aa1b4133c5be236cebf46f948ee25a5455decdd63a54a27234a6fe232f0a8de80cf793ed
98b0591e8dc330f046b57d98a250c2c5c9a951dc50a74c0f13f7198a98d37672c70920f2d27c19dc
5732a8ca187cc75e895e19a08385032e139407d488033b497375b819e7004ccbe678c30cd31b5e60
d6092fc9dacb38a86a2470a88ad27ff34ae1b51afd1d22dc5ec0e906b3185ebb3cb88b76cd9095c1
bd79dd0a18559deb27bbf8758a3777d99116ed703645630f429d9840e9e28e460cbcd0a986ac1e66
d2c75e95782c00f967186c38a156177f0b76bc9972e0a58b24212f7e187da2f83711c8f24d09e3f9
a220d57c39f0ffcc3acb65e4db45396efcedecbcf206e81adfd8f1a95f50a1f6c000aa345f7b47e1
b58980a60ca1c695a4c7e2879c5d306ce214299eb5ede9ec3811b707ba2b4db7d1e226dfad13741d
18ca20faefebad43668235481f3e8464231d9b7dd12f7297833024742523c3c4bd9a658e1f46b2fa
720437d372cc21c5c1c0dba630accfc1b80417b14d68511390dd987a1bc82acfbd0f4e29f03cfad7
96a7ebc3a6d69da788b3c483816d0382e6810671d1c816a5a016d34061d494c5f5752d6a9fb13921
df6c61c637a654bec292ae37ded2be7a683ed5799702de9ba8a3ee48f445caf668a22fc2e1185eae
216ba7e76e57edd71445b42e820b04c124ecd7c853e65cf196d993610ea7aefa0c237e2097b5d075
d7811a6ea0898258929d36033c2d5ad13731d205bf6dd41f2c2ba46a2c532c69d1c9d977a175ab95
92de93764fb4ac062d25f84f42ed3635a4b37848c7848229b5ebee5700b19b164769677f9f5f5f07
9903d763459cbd0401ee79bdf6cd1f11c34e8ed6208f56ae191c47fa7d1c5142f7b8e00d763b8e81
8db68e65535b180c0fc4896edf47b49fc73c6d6723b077c6f46fa97532a69211700b80b305f9b6d7
912475fba4c8b58bd197a5d1669dc066456e2818dff6ae6e1951c4ab70c1b230d65c88ca1caaef51
c82a550182c6a170b765df5e8d784b8cdc4940d79a6bfae0f19922c6845e8b4cf5f86892fbcf900b
1729a360fbe5bcd44062c09b4ea263645c2741e6f07734b1bdd0ee143fffdc422a872a12980571e0
d705e3abcd92f02fbaaab49870e3932d00213c2550681024a13732db92011b2b06ae8a13cc2069cb
c6d6c39ebceae50ec4cf6d67671ddd79819e1e5663cb7c41159dfc22d01829e65a3eafe9a31ec84b
aa2fb266f78d3e3476ad701448d868f8c395255b43733d953b8688811da7e01428ecb5a0738558f1
697009440609c3226c5f9b163ad64e99d6ba8358b4625328e6b47fba5c3122424e71ab731cd66a1b
3777a066342ade279b877ef914510c6fa6dce1a973adae1f7aac96f38170a75c1190f3d297d1da9b
29b5c17cb11958ae4e7dff84a0448deac6941e21edb82360b07a316ebaebd6de01c667116578e3f2
19f36216ea03308a38ced9a686203a4afd1cbcc42fde6af58e41b4e3bbe708583027d89cce199f98
3f945979e31292de37fd916579aad28b8f72953dfd4d2e5ecf7fe8f30d709792bd38f1c45e20050d
b3f9d4f20f3fb1a8186a0ea9255507b668f95523777dba720456444facbd4819749d1a87a592113b
1beb9145ec3dffd85970c19891c9232b787a17993bdae5b9f36675af46f1335cc4d9376f7dba1bf7
d0635b5961e98729f25d4b06013f19b5a9cdd1a0796fe0d6d0a95e4b9d96b9f7bb2040fc8cfe4a60
475062a6bbb8147df87f1c20f6390f03c66b71d6fc3054127daa38ccb6a634e918d2fd2ada5602b2
4aa45cba1943808b9282f1d610375f0921ce0fea94d4d046f42e24f49b8b56a08b9e6135a4cc86ef
393dc0e04b533f3f6375b3993b1e270d2cc48a2bb560306f7da41c9c300aa4b97f8c2d460cf1cd45
301bace012be061d5a6a70e694e4b00c1d591cd1c0b4807e3ca87e35daf8092742959bd73a1e3c0c
b8f7c987fd61e3e0e2fe5b01d5e3baef3f157582fd38230f9d2378ecba37df1591c7d5a2760d4215
99434da7ecfbccdaf3eb5f7dd213f0e8c9cb8e248b3d43b5f631b98d9bacfea3e7fb4da8ac20f2f8
68df60866a7cf3f19e60020a6e50fad0917da45d0f35fc72f9ae12a80062ab6396d6d0e2bb8a4c44
18a5768e0b59fd7ae40a3ad1fd77aae44cc3c5dacd223140e72707c2296bb394f8654384ad5227b6
9bd4de8e13328f7c910753d3ff987ce6c055347713851b170d8486934acdf99410ffaaee838e0677
b03e4c642ca010d3c544aeb1aa11b93ecb89927a292268137910054ff7e434568607c502ca8d5b79
11b591f0836475fcabf34c25b850f64571c07e51d10a9beb05143d2ad619bd4a020bc6f28fbb0df1
43a4b7c4ad04e767bccee3a4bba35943dcadb3b240668a5db1f6e7024983335e1a10c1c07c779312
a205704d8147b0aef54b18ea138ce6086b6c7f3c4cdbc227845bf884f6268bfe9aee96caf17548d7
93abc6dc1024af831d2389d08b9c5f7d6ca43561c07a20a2521ba832adef03e28d5a1ff6526795ca
85f5fcdef90cab8f2bba3681847ab49afc09a2243dc8bd59490532ea15b2ae69edeb12c2aec3fb02
746a9a9686e7762e82b735fa220b50ba066576668a6da8caabfd148fa9482ab668e23a7933d5dec9
3fa9ff6ce31139baebb08669e2e6ad9622181dd7a9e81a52241650f61851c96263102aadf7312180
9f5228facb0b279a30931acb4e942048d82911b2de34d1a807e11395f90039a0586d909f7f30e6c3
bfc757cf3a5bf70e983249f3cb2b61dbbdc1cb42db3682a81c13339a9f63728db00704b7b7bca4bb
701ba9ae4f8f28cbe725d97f36e6a054bdcfbfbf2507662c7d6047fd6cdedf000490cccea33b328e
1d37b717c34b2c973c9b2b3b545b054ec903d8b473803961080c459a6646c8b102e7995aefc31752
a0ba5b0f
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State_F <Virtual>  0
 VGR_Suction_F <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 HBW_Copy_State_F <Virtual>  0
 All_Copy_States <Virtual>  0
 HBW_Manual_F <Virtual>  0
 MPO_Manual <Virtual>  0
 SLD_Manual <Virtual>  0
 SSC_Manual <Virtual>  0
 VGR_Manual_F <Virtual>  0
 HBW_get_X_Z <Virtual>  0
 HBW_lift_seq <Virtual>  0
 HBW_load_convyr <Virtual>  0
 HBW_PWM_On <Virtual>  0
 HBW_Reset_Flags <Virtual>  0
 HBW_rst_switches <Virtual>  0
 HBW_Unload_Conv <Virtual>  0
 HBW_Unload_Rack <Virtual>  0
 VGR_vacuum_drop <Virtual>  0
 VGR_dropoff <Virtual>  0
 VGR_home_reset <Virtual>  0
 VGR_pickup <Virtual>  0
 VGR_PWM_ON <Virtual>  0
 VGR_Reset_Flags <Virtual>  0
 VGR_Rotate_To <Virtual>  0
 VGR_rst_switches <Virtual>  0
 PWM_ramp_UP <Virtual>  0
#END

// Beginning of Code Block VGR_Copy_State_F
$LGCMOD VGR_Copy_State_F

// Rung VGR_Copy_State_F#1
// Offset 0
STR ST1
AND C2000
COPY 0x1 "4 0x0 MC20 C20 20"

// Rung VGR_Copy_State_F#2
// Offset 9
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C20
OR C21
AND C2000
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 50
OUT Y88

// Rung VGR_Copy_State_F#3
// Offset 27
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C20
AND Y88
ANDN X25
AND C2000
OUT Y22

// Rung VGR_Copy_State_F#4
// Offset 32
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C21
AND Y88
AND C2000
OUT Y23

// Rung VGR_Copy_State_F#5
// Offset 36
#BEGIN FMT_COMMENT 
"horizontal PWM"
#END

STR C22
OR C23
AND C2000
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 50
OUT Y89

// Rung VGR_Copy_State_F#6
// Offset 54
#BEGIN FMT_COMMENT 
"horizontal BACK"
#END

STR C22
AND Y89
ANDN X26
AND C2000
OUT Y24

// Rung VGR_Copy_State_F#7
// Offset 59
#BEGIN FMT_COMMENT 
"horizontal FORW"
#END

STR C23
AND Y89
AND C2000
OUT Y25

// Rung VGR_Copy_State_F#8
// Offset 63
#BEGIN FMT_COMMENT 
"rotation axis PWM"
#END

STR C24
OR C25
AND C2000
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 50
OUT Y90

// Rung VGR_Copy_State_F#9
// Offset 81
#BEGIN FMT_COMMENT 
"rotate CW"
#END

STR Y90
AND C24
ANDN X27
AND C2000
OUT Y26

// Rung VGR_Copy_State_F#10
// Offset 86
#BEGIN FMT_COMMENT 
"rotate CCW"
#END

STR Y90
AND C25
AND C2000
OUT Y27

// Rung VGR_Copy_State_F#11
// Offset 90
NOP

// Rung VGR_Copy_State_F#12
// Offset 91
#BEGIN FMT_COMMENT 
"Compressor ON/OFF"
#END

STR C26
AND C2000
OUT Y28

// Rung VGR_Copy_State_F#13
// Offset 94
#BEGIN FMT_COMMENT 
"Vacuum Valve"
#END

STR C27
AND C2000
OUT Y29

// Rung VGR_Copy_State_F#14
// Offset 97
NOP

// Rung VGR_Copy_State_F#15
// Offset 98
NOP

// Rung VGR_Copy_State_F#16
// Offset 99
#BEGIN FMT_COMMENT 
"This is suspect -%3E<br> <br>"
"Need to check if its really x57-59  or 28-31"
#END

STR ST1
AND C2001
COPY 0x1 "4 0x0 Y22 MI200 1 0x0 Y23 MI201 1 0x0 Y24 MI202 1 0x0 Y25 MI203 1 0x0 Y26 MI204 1 0x0 Y27 MI205 1 0x0 Y28 MI206 1 0x0 Y29 MI207 1 0x0 Y88 MI208 1 0x0 Y89 MI209 1 0x0 Y90 MI210 1 0x0 X25 MI211 1 0x0 X26 MI212 1 0x0 X27 MI213 1 0x0 X56 MI214 1 0x0 X57 MI215 1 0x0 X58 MI216 1 0x0 X59 MI217 1 0x0 X60 MI218 1 0x0 X61 MI219 1"

// Rung VGR_Copy_State_F#17
// Offset 145
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC200 C400 8"
POPBOOL
DUPBOOL
AND X26
COPY 0x1 "4 0x0 0 MC203 1"
POPBOOL
DUPBOOL
AND X25
COPY 0x1 "4 0x0 0 MC200 1"
POPBOOL
AND X27
COPY 0x1 "4 0x0 0 MC204 1"

// Rung VGR_Copy_State_F#18
// Offset 178
STR C2000
COPY 0x1 "4 0x0 0 MC200 8"

// Rung VGR_Copy_State_F#19
// Offset 185
RET

// End of Code Block VGR_Copy_State_F
$LGCEND VGR_Copy_State_F

// Beginning of Code Block VGR_Suction_F
$LGCMOD VGR_Suction_F

// Rung VGR_Suction_F#1
// Offset 0
#BEGIN FMT_COMMENT 
"Keep on for duration of function"
#END

STR ST1
OUT Y28

// Rung VGR_Suction_F#2
// Offset 2
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Suction_F#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_Suction_F#4
// Offset 29
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_Suction_F#5
// Offset 35
STRGE $VGR_Encoder_Y.Acc N1002
SET C550
RST C611

// Rung VGR_Suction_F#6
// Offset 41
#BEGIN FMT_COMMENT 
"Set Vaccum this should only need to be set once then it "
"holds vacuum until released"
#END

STR C550
OUT Y29
SET C612

// Rung VGR_Suction_F#7
// Offset 44
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_Suction_F#8
// Offset 50
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_Suction_F#9
// Offset 56
NOP

// Rung VGR_Suction_F#10
// Offset 57
RET

// End of Code Block VGR_Suction_F
$LGCEND VGR_Suction_F

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
#BEGIN FMT_COMMENT 
"Enable the vaccum and turn on the valve to hold suction "
"when we are inisde and in the oven reset stage of MPO "
"Program."
#END

STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
OR MPO_Program.S8
OR MPO_Program.S13
OR MPO_Program.S9
OR MPO_Program.S11
AND C2000
OUT Y17

// Rung MPO_Suction#2
// Offset 14
NOP

// Rung MPO_Suction#3
// Offset 15
STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
AND C2000
AND Y17
OUT Y20

// Rung MPO_Suction#4
// Offset 26
NOP

// Rung MPO_Suction#5
// Offset 27
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y45 MI400 1 0x0 Y46 MI401 1 0x0 Y47 MI402 1 0x0 Y43 MI403 1 0x0 Y44 MI404 1 0x0 Y52 MI405 1 0x0 Y53 MI406 1 0x0 Y15 MI407 1 0x0 Y16 MI408 1 0x0 Y17 MI409 1 0x0 Y18 MI410 1 0x0 Y19 MI411 1 0x0 Y20 MI412 1 0x0 Y21 MI413 1 0x0 Y13 MI414 1 0x0 Y91 MI415 1 0x0 X12 MI416 1 0x0 X13 MI417 1 0x0 X14 MI418 1 0x0 X15 MI419 1 0x0 X16 MI420 1 0x0 X17 MI421 1 0x0 X18 MI422 1 0x0 X19 MI423 1 0x0 X24 MI424 1 0x0 MHR440 V1600 1 0x0 MC440 C840 1 0x0 C841 MC441 1 0x0 MC442 C842 1"

// Rung MPO_Copy_State#2
// Offset 63
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC400 C800 14"
POPBOOL
DUPBOOL
AND X16
COPY 0x1 "4 0x0 0 MC407 1"
POPBOOL
DUPBOOL
AND X19
COPY 0x1 "4 0x0 0 MC406 1"
POPBOOL
DUPBOOL
AND X13
COPY 0x1 "4 0x0 0 MC400 1"
POPBOOL
DUPBOOL
AND X12
COPY 0x1 "4 0x0 0 MC401 1"
POPBOOL
DUPBOOL
STR X17
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC404 1"
POPBOOL
STR X18
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC405 1"

// Rung MPO_Copy_State#3
// Offset 124
STR C2000
COPY 0x1 "4 0x0 0 MC400 14 0x0 0 C800 14"

// Rung MPO_Copy_State#4
// Offset 133
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y30 MI800 1 0x0 Y31 MI801 1 0x0 Y32 MI802 1 0x0 Y33 MI803 1 0x0 Y34 MI804 1 0x0 X34 MI805 1 0x0 X35 MI806 1 0x0 X36 MI807 1 0x0 V3200 MHR1600 1 0x0 X37 MI809 1 0x0 X38 MI810 1 0x0 X39 MI811 1"

// Rung SLD_Copy_State#2
// Offset 29
STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Copy_State#3
// Offset 34
STR C2001
COPY 0x1 "4 0x0 MC800 C1600 5"

// Rung SLD_Copy_State#4
// Offset 42
STR C2000
COPY 0x1 "4 0x0 0 MC800 5"

// Rung SLD_Copy_State#5
// Offset 49
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
STR SLD_Program.S3
OUT Y31

// Rung SLD_Suction#2
// Offset 2
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block All_Copy_States
$LGCMOD All_Copy_States

// Rung All_Copy_States#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC1000 C2000 1 0x0 MC56 C56 1"

// Rung All_Copy_States#2
// Offset 9
STR C2000
RST C2001

// Rung All_Copy_States#3
// Offset 11
STRN C2000
SET C2001
COPY 0x1 "4 0x0 0 MC56 1"
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung All_Copy_States#4
// Offset 25
STR ST1
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#5
// Offset 33
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#6
// Offset 41
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#7
// Offset 49
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#8
// Offset 57
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#9
// Offset 65
RET

// End of Code Block All_Copy_States
$LGCEND All_Copy_States

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y35 MI600 1 0x0 Y36 MI601 1 0x0 Y37 MI602 1 0x0 Y38 MI603 1 0x0 Y39 MI604 1 0x0 Y40 MI605 1 0x0 Y41 MI606 1 0x0 Y42 MI607 1 0x0 X40 MI610 1 0x0 X41 MI611 1 0x0 X42 MI612 1 0x0 X43 MI613 1 0x0 V2400 MHR1200 1 0x0 X44 MI615 1 0x0 X45 MI616 1 0x0 X46 MI617 1 0x0 X47 MI618 1"

// Rung SSC_Copy_State#2
// Offset 39
STR ST1
SUBSCRIB "4 WX1 V2400 1 0x4"

// Rung SSC_Copy_State#3
// Offset 44
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC600 C1200 8"
POPBOOL
AND X40
COPY 0x1 "4 0x0 0 MC601 1"

// Rung SSC_Copy_State#4
// Offset 61
STR C2000
COPY 0x1 "4 0x0 0 MC600 8"

// Rung SSC_Copy_State#5
// Offset 68
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_get_X_Z
$LGCMOD HBW_get_X_Z

// Rung HBW_get_X_Z#1
// Offset 0
NOP

// Rung HBW_get_X_Z#2
// Offset 1
#BEGIN FMT_COMMENT 
"Get Column, right digit"
#END

STR ST1
MATH N201 "N200 % 10"

// Rung HBW_get_X_Z#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get Row, left digit"
#END

STR ST1
MATH N202 "(N200 - N201) / 10"

// Rung HBW_get_X_Z#4
// Offset 21
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 1
COPY 0x1 "4 0x0 7650 N203 1"

// Rung HBW_get_X_Z#5
// Offset 31
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 2
COPY 0x1 "4 0x0 5331 N203 1"

// Rung HBW_get_X_Z#6
// Offset 41
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 3
COPY 0x1 "4 0x0 3050 N203 1"

// Rung HBW_get_X_Z#7
// Offset 51
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 1
COPY 0x1 "4 0x0 425 N204 1"

// Rung HBW_get_X_Z#8
// Offset 61
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 2
COPY 0x1 "4 0x0 1750 N204 1"

// Rung HBW_get_X_Z#9
// Offset 71
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 3
COPY 0x1 "4 0x0 3300 N204 1"

// Rung HBW_get_X_Z#10
// Offset 81
RET

// End of Code Block HBW_get_X_Z
$LGCEND HBW_get_X_Z

// Beginning of Code Block HBW_Manual_F
$LGCMOD HBW_Manual_F

// Rung HBW_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C2
AND C1
STRN C1
AND C2
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 500 60
POPBOOL
DUPBOOL
AND C1
OUT Y48
POPBOOL
AND C2
OUT Y49

// Rung HBW_Manual_F#2
// Offset 29
STR ST1
DUPBOOL
STRN C4
AND C3
STRN C3
AND C4
ANDN X0
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
POPBOOL
DUPBOOL
AND C3
OUT Y50
POPBOOL
AND C4
ANDN X0
OUT Y51

// Rung HBW_Manual_F#3
// Offset 60
STR ST1
DUPBOOL
STRN C6
AND C5
ANDN X3
STRN C5
AND C6
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
POPBOOL
DUPBOOL
AND C5
ANDN X3
OUT Y5
POPBOOL
AND C6
OUT Y4

// Rung HBW_Manual_F#4
// Offset 91
STR ST1
DUPBOOL
STRN C8
AND C7
ANDN X10
STRN C7
AND C8
ANDN X11
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
POPBOOL
DUPBOOL
AND C7
ANDN X10
OUT Y6
POPBOOL
AND C8
ANDN X11
OUT Y7

// Rung HBW_Manual_F#5
// Offset 124
RET

// End of Code Block HBW_Manual_F
$LGCEND HBW_Manual_F

// Beginning of Code Block MPO_Manual
$LGCMOD MPO_Manual

// Rung MPO_Manual#1
// Offset 0
STR C800
ANDN X13
OUT Y45

// Rung MPO_Manual#2
// Offset 3
STR C801
ANDN X12
OUT Y46

// Rung MPO_Manual#3
// Offset 6
STR C802
OUT Y47

// Rung MPO_Manual#4
// Offset 8
STR C803
OUT Y43

// Rung MPO_Manual#5
// Offset 10
STR C804
AND Y20
ANDN X17
OUT Y44

// Rung MPO_Manual#6
// Offset 14
STR C805
AND Y20
ANDN X18
OUT Y52

// Rung MPO_Manual#7
// Offset 18
STR ST1
DUPBOOL
STRN C807
AND C806
ANDN X19
STRN C806
AND C807
ANDN X16
ORSTR
ANDSTR
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
POPBOOL
DUPBOOL
AND C806
ANDN X19
OUT Y53
POPBOOL
AND C807
ANDN X16
OUT Y15

// Rung MPO_Manual#8
// Offset 51
STR C808
OUT Y16

// Rung MPO_Manual#9
// Offset 53
STR C809
OUT Y17

// Rung MPO_Manual#10
// Offset 55
STR C810
OUT Y18

// Rung MPO_Manual#11
// Offset 57
STR C811
OUT Y19

// Rung MPO_Manual#12
// Offset 59
STR C812
OUT Y20

// Rung MPO_Manual#13
// Offset 61
STR C813
OUT Y21

// Rung MPO_Manual#14
// Offset 63
RET

// End of Code Block MPO_Manual
$LGCEND MPO_Manual

// Beginning of Code Block SLD_Manual
$LGCMOD SLD_Manual

// Rung SLD_Manual#1
// Offset 0
STR C1600
OUT Y30

// Rung SLD_Manual#2
// Offset 2
STR C1601
OUT Y31

// Rung SLD_Manual#3
// Offset 4
STR C1602
OUT Y32

// Rung SLD_Manual#4
// Offset 6
STR C1603
OUT Y33

// Rung SLD_Manual#5
// Offset 8
STR C1604
OUT Y34

// Rung SLD_Manual#6
// Offset 10
RET

// End of Code Block SLD_Manual
$LGCEND SLD_Manual

// Beginning of Code Block HBW_Copy_State_F
$LGCMOD HBW_Copy_State_F

// Rung HBW_Copy_State_F#1
// Offset 0
STR ST1
AND C2000
COPY 0x1 "4 0x0 MC1 C1 27 0x0 X6 MI7 4"

// Rung HBW_Copy_State_F#2
// Offset 12
NOP

// Rung HBW_Copy_State_F#3
// Offset 13
STR ST1
DUPBOOL
ANDN C56
AND HBW_Program.S97
COPY 0x1 "4 0x0 MHR1 N300 1 0x0 400 V400 1"
POPBOOL
DUPBOOL
ANDN C56
ANDN HBW_Program.S97
COPY 0x1 "4 0x0 0 MHR1 1"
POPBOOL
AND C56
COPY 0x1 "4 0x0 0 MHR1 1"

// Rung HBW_Copy_State_F#4
// Offset 43
#BEGIN FMT_COMMENT 
"Sensor data, and Auto/Manual switch<br>"
#END

STR ST1
AND C2001
COPY 0x1 "4 0x0 Y48 MI1 1 0x0 Y49 MI2 1 0x0 Y50 MI3 1 0x0 Y51 MI4 1 0x0 Y4 MI5 1 0x0 Y5 MI6 1 0x0 Y6 MI7 1 0x0 Y7 MI8 1 0x0 Y80 MI9 1 0x0 Y81 MI10 1 0x0 Y82 MI11 1 0x0 Y83 MI12 1 0x0 X0 MI13 1 0x0 X1 MI14 1 0x0 X2 MI15 1 0x0 X3 MI16 1 0x0 X4 MI17 1 0x0 X5 MI18 1 0x0 X6 MI19 1 0x0 X7 MI20 1 0x0 X8 MI21 1 0x0 X9 MI22 1 0x0 X10 MI23 1 0x0 X11 MI24 1 0x0 0 MHR1 1"
RST C300

// Rung HBW_Copy_State_F#5
// Offset 100
#BEGIN FMT_COMMENT 
"Manual mode enabled. Coil data is copied from the switch "
"position on the HMI<br> <br>"
"Sends a 0 to the Modbus coil output to disable the switch "
"for reference switches"
#END

STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC1 C1 8"
POPBOOL
DUPBOOL
AND X0
COPY 0x1 "4 0x0 0 MC4 1"
POPBOOL
DUPBOOL
AND X3
COPY 0x1 "4 0x0 0 MC5 1"
POPBOOL
DUPBOOL
AND X10
COPY 0x1 "4 0x0 0 MC7 1"
POPBOOL
AND X11
COPY 0x1 "4 0x0 0 MC8 1"

// Rung HBW_Copy_State_F#6
// Offset 141
#BEGIN FMT_COMMENT 
"Auto mode enabled. This turns off all coils on the HMI."
#END

STR C2000
COPY 0x1 "4 0x0 0 MC1 8"

// Rung HBW_Copy_State_F#7
// Offset 148
RET

// End of Code Block HBW_Copy_State_F
$LGCEND HBW_Copy_State_F

// Beginning of Code Block HBW_lift_seq
$LGCMOD HBW_lift_seq

// Rung HBW_lift_seq#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_lift_seq#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_lift_seq#3
// Offset 5
STR X10
OUT C200

// Rung HBW_lift_seq#4
// Offset 7
STR ST1
MATH N203 "N202 - 400"

// Rung HBW_lift_seq#5
// Offset 16
STRLE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_lift_seq#6
// Offset 22
STRN X3
AND C200
OUT Y5

// Rung HBW_lift_seq#7
// Offset 25
STRN X11
AND C201
OUT Y7

// Rung HBW_lift_seq#8
// Offset 28
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_lift_seq#9
// Offset 33
NOP

// Rung HBW_lift_seq#10
// Offset 34
RET

// End of Code Block HBW_lift_seq
$LGCEND HBW_lift_seq

// Beginning of Code Block SSC_Manual
$LGCMOD SSC_Manual

// Rung SSC_Manual#1
// Offset 0
STR C1200
OUT Y35

// Rung SSC_Manual#2
// Offset 2
STR C1201
ANDN X40
OUT Y36

// Rung SSC_Manual#3
// Offset 5
STR C1202
OUT Y37

// Rung SSC_Manual#4
// Offset 7
STR C1203
OUT Y38

// Rung SSC_Manual#5
// Offset 9
STR C1204
OUT Y39

// Rung SSC_Manual#6
// Offset 11
STR C1205
OUT Y40

// Rung SSC_Manual#7
// Offset 13
STR C1206
OUT Y41

// Rung SSC_Manual#8
// Offset 15
STR C1207
OUT Y42

// Rung SSC_Manual#9
// Offset 17
RET

// End of Code Block SSC_Manual
$LGCEND SSC_Manual

// Beginning of Code Block VGR_Manual_F
$LGCMOD VGR_Manual_F

// Rung VGR_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C401
AND C400
ANDN X25
STRN C400
AND C401
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 60
POPBOOL
DUPBOOL
AND C400
ANDN X25
OUT Y22
POPBOOL
AND C401
OUT Y23

// Rung VGR_Manual_F#2
// Offset 31
STR ST1
DUPBOOL
STRN C403
AND C402
STRN C402
AND C403
ANDN X26
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 60
POPBOOL
DUPBOOL
AND C402
OUT Y25
POPBOOL
AND C403
ANDN X26
OUT Y24

// Rung VGR_Manual_F#3
// Offset 62
STR ST1
DUPBOOL
STRN C405
AND C404
ANDN X27
STRN C404
AND C405
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 60
POPBOOL
DUPBOOL
AND C404
ANDN X27
OUT Y26
POPBOOL
AND C405
OUT Y27

// Rung VGR_Manual_F#4
// Offset 93
STR C406
OUT Y28

// Rung VGR_Manual_F#5
// Offset 95
STR C407
OUT Y29

// Rung VGR_Manual_F#6
// Offset 97
RET

// End of Code Block VGR_Manual_F
$LGCEND VGR_Manual_F

// Beginning of Code Block HBW_load_convyr
$LGCMOD HBW_load_convyr

// Rung HBW_load_convyr#1
// Offset 0
NOP

// Rung HBW_load_convyr#2
// Offset 1
#BEGIN FMT_COMMENT 
"Horizontal PWM Motor"
#END

STRLE 80 $HBW_Encoder_X.Acc
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 150 R101

// Rung HBW_load_convyr#3
// Offset 19
#BEGIN FMT_COMMENT 
"Vertical PWM Motor"
#END

STRLE 2620 $HBW_Encoder_Z.Acc
ORGE 2580 $HBW_Encoder_Z.Acc
OR C200
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_load_convyr#4
// Offset 42
#BEGIN FMT_COMMENT 
"Cantilever PWM Motor"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_load_convyr#5
// Offset 57
STRN X10
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDGE 2620 $HBW_Encoder_Z.Acc
ANDGE 80 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_load_convyr#6
// Offset 71
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_load_convyr#7
// Offset 73
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 80 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_load_convyr#8
// Offset 79
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDGE 3000 $HBW_Encoder_Z.Acc
STRN C200
ANDGE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y4

// Rung HBW_load_convyr#9
// Offset 92
STRN C200
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_load_convyr#10
// Offset 103
STR C200
ANDLE 3000 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_load_convyr#11
// Offset 110
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDLE 2620 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y5

// Rung HBW_load_convyr#12
// Offset 117
STRN X11
AND C201
OUT Y7

// Rung HBW_load_convyr#13
// Offset 120
STR X11
AND C201
OUT C203
RST C201
RST C204

// Rung HBW_load_convyr#14
// Offset 125
NOP

// Rung HBW_load_convyr#15
// Offset 126
RET

// End of Code Block HBW_load_convyr
$LGCEND HBW_load_convyr

// Beginning of Code Block HBW_PWM_On
$LGCMOD HBW_PWM_On

// Rung HBW_PWM_On#1
// Offset 0
STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_PWM_On#2
// Offset 15
STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 R101

// Rung HBW_PWM_On#3
// Offset 30
STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_PWM_On#4
// Offset 45
STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_PWM_On#5
// Offset 60
RET

// End of Code Block HBW_PWM_On
$LGCEND HBW_PWM_On

// Beginning of Code Block HBW_Reset_Flags
$LGCMOD HBW_Reset_Flags

// Rung HBW_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C100 5 0x0 0 C200 15"

// Rung HBW_Reset_Flags#2
// Offset 9
NOP

// Rung HBW_Reset_Flags#3
// Offset 10
NOP

// Rung HBW_Reset_Flags#4
// Offset 11
RET

// End of Code Block HBW_Reset_Flags
$LGCEND HBW_Reset_Flags

// Beginning of Code Block HBW_rst_switches
$LGCMOD HBW_rst_switches

// Rung HBW_rst_switches#1
// Offset 0
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_rst_switches#2
// Offset 2
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_rst_switches#3
// Offset 4
STR X0
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_rst_switches#4
// Offset 6
STR X3
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_rst_switches#5
// Offset 8
NOP

// Rung HBW_rst_switches#6
// Offset 9
RET

// End of Code Block HBW_rst_switches
$LGCEND HBW_rst_switches

// Beginning of Code Block HBW_Unload_Conv
$LGCMOD HBW_Unload_Conv

// Rung HBW_Unload_Conv#1
// Offset 0
STRN X10
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDGE 3030 $HBW_Encoder_Z.Acc
ANDGE 40 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_Unload_Conv#2
// Offset 14
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_Unload_Conv#3
// Offset 16
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 40 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_Unload_Conv#4
// Offset 22
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDLE 2620 $HBW_Encoder_Z.Acc
STRN C200
ANDLE 3030 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y5

// Rung HBW_Unload_Conv#5
// Offset 35
STRN C200
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 3030 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_Unload_Conv#6
// Offset 46
STR C200
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_Unload_Conv#7
// Offset 53
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDGE 2980 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y4

// Rung HBW_Unload_Conv#8
// Offset 60
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Conv#9
// Offset 63
STR X11
AND C201
OUT C205
RST C201
RST C204

// Rung HBW_Unload_Conv#10
// Offset 68
NOP

// Rung HBW_Unload_Conv#11
// Offset 69
NOP

// Rung HBW_Unload_Conv#12
// Offset 70
RET

// End of Code Block HBW_Unload_Conv
$LGCEND HBW_Unload_Conv

// Beginning of Code Block HBW_Unload_Rack
$LGCMOD HBW_Unload_Rack

// Rung HBW_Unload_Rack#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Unload_Rack#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_Unload_Rack#3
// Offset 5
STR X10
SET C200

// Rung HBW_Unload_Rack#4
// Offset 7
STR ST1
MATH N203 "N202 + 400"

// Rung HBW_Unload_Rack#5
// Offset 16
STRGE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_Unload_Rack#6
// Offset 22
STR C200
OUT Y4

// Rung HBW_Unload_Rack#7
// Offset 24
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Rack#8
// Offset 27
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_Unload_Rack#9
// Offset 32
NOP

// Rung HBW_Unload_Rack#10
// Offset 33
NOP

// Rung HBW_Unload_Rack#11
// Offset 34
RET

// End of Code Block HBW_Unload_Rack
$LGCEND HBW_Unload_Rack

// Beginning of Code Block VGR_vacuum_drop
$LGCMOD VGR_vacuum_drop

// Rung VGR_vacuum_drop#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_vacuum_drop#2
// Offset 8
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_vacuum_drop#3
// Offset 27
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_vacuum_drop#4
// Offset 33
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_vacuum_drop#5
// Offset 39
#BEGIN FMT_COMMENT 
"Turn off vacuum, this is run in VGR program, so no need to "
"run in this submodule"
#END

STRGE $VGR_Encoder_Y.Acc N1002
RST C550
RST C611
SET C612

// Rung VGR_vacuum_drop#6
// Offset 46
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_vacuum_drop#7
// Offset 52
NOP

// Rung VGR_vacuum_drop#8
// Offset 53
NOP

// Rung VGR_vacuum_drop#9
// Offset 54
RET

// End of Code Block VGR_vacuum_drop
$LGCEND VGR_vacuum_drop

// Beginning of Code Block VGR_dropoff
$LGCMOD VGR_dropoff

// Rung VGR_dropoff#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 450 N1005 1 0x0 420 N1006 1 0x0 268 N1007 1 0x0 298 N1008 1 0x0 2320 N1009 1"

// Rung VGR_dropoff#2
// Offset 16
STR X25
SET C600

// Rung VGR_dropoff#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_dropoff#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_dropoff#5
// Offset 23
STR X26
SET C601

// Rung VGR_dropoff#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_dropoff#7
// Offset 31
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_dropoff#8
// Offset 37
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_dropoff#9
// Offset 46
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_dropoff#10
// Offset 54
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_dropoff#11
// Offset 63
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_dropoff#12
// Offset 75
STR C604
ANDN X26
OUT Y24

// Rung VGR_dropoff#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_dropoff#14
// Offset 81
NOP

// Rung VGR_dropoff#15
// Offset 82
RET

// End of Code Block VGR_dropoff
$LGCEND VGR_dropoff

// Beginning of Code Block VGR_home_reset
$LGCMOD VGR_home_reset

// Rung VGR_home_reset#1
// Offset 0
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_home_reset#2
// Offset 2
STR X25
SET C600

// Rung VGR_home_reset#3
// Offset 4
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_home_reset#4
// Offset 7
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_home_reset#5
// Offset 11
#BEGIN FMT_COMMENT 
"Return to home position on rotation facing train depot"
#END

STR C601
ANDN X27
OUT Y26

// Rung VGR_home_reset#6
// Offset 14
#BEGIN FMT_COMMENT 
"C602 is the DONE flag for this function"
#END

STR X27
SET C602
RST C601

// Rung VGR_home_reset#7
// Offset 17
RET

// End of Code Block VGR_home_reset
$LGCEND VGR_home_reset

// Beginning of Code Block VGR_pickup
$LGCMOD VGR_pickup

// Rung VGR_pickup#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 40 N1007 1 0x0 70 N1008 1 0x0 2350 N1009 1"

// Rung VGR_pickup#2
// Offset 16
STR X25
SET C600

// Rung VGR_pickup#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_pickup#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_pickup#5
// Offset 23
STR X26
SET C601

// Rung VGR_pickup#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_pickup#7
// Offset 31
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_pickup#8
// Offset 37
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_pickup#9
// Offset 46
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_pickup#10
// Offset 54
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_pickup#11
// Offset 63
STR C603
CALL VGR_Suction_F 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_pickup#12
// Offset 75
STR C604
ANDN X26
OUT Y24

// Rung VGR_pickup#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_pickup#14
// Offset 81
NOP

// Rung VGR_pickup#15
// Offset 82
NOP

// Rung VGR_pickup#16
// Offset 83
RET

// End of Code Block VGR_pickup
$LGCEND VGR_pickup

// Beginning of Code Block VGR_PWM_ON
$LGCMOD VGR_PWM_ON

// Rung VGR_PWM_ON#1
// Offset 0
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R900

// Rung VGR_PWM_ON#2
// Offset 15
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 R901

// Rung VGR_PWM_ON#3
// Offset 30
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 R902

// Rung VGR_PWM_ON#4
// Offset 45
RET

// End of Code Block VGR_PWM_ON
$LGCEND VGR_PWM_ON

// Beginning of Code Block VGR_Reset_Flags
$LGCMOD VGR_Reset_Flags

// Rung VGR_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C500 10 0x0 0 C600 20"

// Rung VGR_Reset_Flags#2
// Offset 9
NOP

// Rung VGR_Reset_Flags#3
// Offset 10
RET

// End of Code Block VGR_Reset_Flags
$LGCEND VGR_Reset_Flags

// Beginning of Code Block VGR_Rotate_To
$LGCMOD VGR_Rotate_To

// Rung VGR_Rotate_To#1
// Offset 0
STR ST1
MATH N1001 "N1000 - 15"
MATH N1002 "N1000 + 15"

// Rung VGR_Rotate_To#2
// Offset 17
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_Rotate_To#3
// Offset 19
STR X25
SET C600

// Rung VGR_Rotate_To#4
// Offset 21
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_Rotate_To#5
// Offset 24
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_Rotate_To#6
// Offset 28
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDLE $VGR_Encoder_Rot.Acc N1001
OUT Y27

// Rung VGR_Rotate_To#7
// Offset 34
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDGE $VGR_Encoder_Rot.Acc N1002
OUT Y26

// Rung VGR_Rotate_To#8
// Offset 40
#BEGIN FMT_COMMENT 
"Desired Rotation Reached, C602 is DONE flag for this function"
#END

STRLE $VGR_Encoder_Rot.Acc N1002
ANDGE $VGR_Encoder_Rot.Acc N1001
AND C601
SET C602

// Rung VGR_Rotate_To#9
// Offset 50
RET

// End of Code Block VGR_Rotate_To
$LGCEND VGR_Rotate_To

// Beginning of Code Block VGR_rst_switches
$LGCMOD VGR_rst_switches

// Rung VGR_rst_switches#1
// Offset 0
STR ST1
OUT $VGR_Encoder_Rot.EnableCapture

// Rung VGR_rst_switches#2
// Offset 2
STR ST1
OUT $VGR_Encoder_X.EnableCapture

// Rung VGR_rst_switches#3
// Offset 4
STR ST1
OUT $VGR_Encoder_Y.EnableCapture

// Rung VGR_rst_switches#4
// Offset 6
NOP

// Rung VGR_rst_switches#5
// Offset 7
STR X25
OUT $VGR_Encoder_Y.ResetLevel

// Rung VGR_rst_switches#6
// Offset 9
STR X26
OUT $VGR_Encoder_X.ResetLevel

// Rung VGR_rst_switches#7
// Offset 11
STR X27
OUT $VGR_Encoder_Rot.ResetLevel

// Rung VGR_rst_switches#8
// Offset 13
RET

// End of Code Block VGR_rst_switches
$LGCEND VGR_rst_switches

// Beginning of Code Block PWM_ramp_UP
$LGCMOD PWM_ramp_UP

// Rung PWM_ramp_UP#1
// Offset 0
NOP

// Rung PWM_ramp_UP#2
// Offset 1
STR ST1
INC D1000

// Rung PWM_ramp_UP#3
// Offset 3
STR ST1
MATH R1000 "(((R1002 - R1001) * D1000) / D1001) + R1001"

// Rung PWM_ramp_UP#4
// Offset 18
RET

// End of Code Block PWM_ramp_UP
$LGCEND PWM_ramp_UP

// Beginning of Code Block $tFirstScan
$TSK $tFirstScan

// Rung $tFirstScan#1
// Offset 0
NOP

// Rung $tFirstScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Variables only initialized once"
#END

STR ST1
INIT "3 N800 N1599 0 MHR1 ST1023 0 C1 C799 0 R100 R100 40 R101 R101 90 R102 R102 52 R103 R103 50 R900 R900 90 R901 R901 90 R902 R902 50"

// Rung $tFirstScan#3
// Offset 33
STR ST1
INIT "3 V400 ST1023 400 N400 ST1023 11 N401 ST1023 12 N402 ST1023 13 N403 ST1023 21 N404 ST1023 22 N405 ST1023 23 N406 ST1023 31 N407 ST1023 32 N408 ST1023 33"

// Rung $tFirstScan#4
// Offset 57
STR ST1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// End of Code Block $tFirstScan
$TSKEND $tFirstScan

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Spring 2022 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 02/14/22"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Call all copy_states"
#END

STR ST1
CALL All_Copy_States 0x1 DST511 "3" "3"

// Rung $Main#3
// Offset 9
STR ST1
AND C2000
RUN HBW_Program

// Rung $Main#4
// Offset 13
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL HBW_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#5
// Offset 25
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
AND C2000
RUN VGR_Program

// Rung $Main#6
// Offset 29
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL VGR_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#7
// Offset 41
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
AND C2000
RUN MPO_Program

// Rung $Main#8
// Offset 45
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL MPO_Manual 0x1 DST511 "3" "3"

// Rung $Main#9
// Offset 57
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
AND C2000
RUN SSC_Program

// Rung $Main#10
// Offset 61
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL SSC_Manual 0x1 DST511 "3" "3"

// Rung $Main#11
// Offset 73
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
AND C2000
RUN SLD_Program

// Rung $Main#12
// Offset 77
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL SLD_Manual 0x1 DST511 "3" "3"

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program<br>"
#END

STR C2001
EXIT

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
CALL VGR_rst_switches 0x1 DST511 "3" "3"

// Rung VGR_Program#4
// Offset 18
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Program#5
// Offset 26
#BEGIN FMT_COMMENT 
"Have on for duration of function"
#END

STR C550
OUT Y29

// Rung VGR_Program#6
// Offset 28
#BEGIN FMT_COMMENT 
"Home position at program start, up, back rotation safest order"
#END

SG VGR_Program.S99

// Rung VGR_Program#7
// Offset 30
STR ST1
AND ST2
JMP VGR_Program.S100

// Rung VGR_Program#8
// Offset 33
STR ST1
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C500 1"

// Rung VGR_Program#9
// Offset 43
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#10
// Offset 52
SG VGR_Program.S7

// Rung VGR_Program#11
// Offset 54
STR C300
JMP VGR_Program.S0
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#12
// Offset 63
STR C39
JMP VGR_Program.S11
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#13
// Offset 72
NOP

// Rung VGR_Program#14
// Offset 73
#BEGIN FMT_COMMENT 
"Pickup material from HBW"
#END

SG VGR_Program.S0

// Rung VGR_Program#15
// Offset 75
STR C300
CALL VGR_pickup 0x1 DST511 "3 5370 N1005 1 5310 N1006 1 730 N1007 1 895 N1008 1 545 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#16
// Offset 95
STR C500
JMP VGR_Program.S1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C300

// Rung VGR_Program#17
// Offset 105
#BEGIN FMT_COMMENT 
"Dropoff Raw material at MPO station"
#END

SG VGR_Program.S1

// Rung VGR_Program#18
// Offset 107
STR ST1
CALL VGR_dropoff 0x1 DST511 "3 3500 N1005 1 3490 N1006 1 3300 N1007 1 3330 N1008 1 2000 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#19
// Offset 127
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C701

// Rung VGR_Program#20
// Offset 137
SG VGR_Program.S11

// Rung VGR_Program#21
// Offset 139
STR ST1
CALL VGR_Rotate_To 0x1 DST511 "3 2500 N1000 1" "3 C601 C500 1"

// Rung VGR_Program#22
// Offset 151
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C39

// Rung VGR_Program#23
// Offset 161
SG VGR_Program.S20

// Rung VGR_Program#24
// Offset 163
NOP

// Rung VGR_Program#25
// Offset 164
NOP

// Rung VGR_Program#26
// Offset 165
STRPD C409
AND ST2
INIT "3 N800 ST1023 1 N801 ST1023 1000"

// Rung VGR_Program#27
// Offset 175
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#28
// Offset 183
#BEGIN FMT_COMMENT 
"Accelerate from min/max PWM rate per sub_routine"
#END

STR C409
ANDLE N800 N801
CALL PWM_ramp_UP 0x1 DST511 "3 N800 N1000 2 20.0 R1001 1 50.0 R1002 1" "3 R1000 R800 1 N1000 N800 1"

// Rung VGR_Program#29
// Offset 208
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C409
OR C410
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R800
OUT Y88

// Rung VGR_Program#30
// Offset 225
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C409
AND Y88
ANDN CT50.Done
OUT Y22

// Rung VGR_Program#31
// Offset 229
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C410
AND Y88
ANDN CT50.Done
OUT Y23

// Rung VGR_Program#32
// Offset 233
NOP

// Rung VGR_Program#33
// Offset 234
SG VGR_Program.S100

// Rung VGR_Program#34
// Offset 236
NOP

// Rung VGR_Program#35
// Offset 237
STR ST1
AND ST2
OUT Y15

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"MPO Program"
#END

STR C2001
EXIT

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL MPO_Suction 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 14
STR C842
SGRSTR MPO_Program.S1 MPO_Program.S19
SGSET MPO_Program.S0
COPY 0x1 "4 0x0 0 MC442 1"

// Rung MPO_Program#4
// Offset 23
STR MPO_Program.S1
AND MPO_Program.S2
AND MPO_Program.S3
ANDN MPO_Program.S12
SET C841

// Rung MPO_Program#5
// Offset 28
SG MPO_Program.S0

// Rung MPO_Program#6
// Offset 30
RST C900

// Rung MPO_Program#7
// Offset 31
STR ST1
AND C2000
ANDN MPO_Program.S1
ANDN MPO_Program.S2
ANDN MPO_Program.S3
SGDIVRG "1 MPO_Program.S1 MPO_Program.S2 MPO_Program.S3"
RST C900
RST C901
RST Y18
SET C841

// Rung MPO_Program#8
// Offset 44
SG MPO_Program.S1

// Rung MPO_Program#9
// Offset 46
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X18
ONDTMR T0 1000 Y52

// Rung MPO_Program#10
// Offset 50
STRN X24
JMP MPO_Program.S4
RST C841

// Rung MPO_Program#11
// Offset 53
SG MPO_Program.S4

// Rung MPO_Program#12
// Offset 55
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X17
ONDTMR T1 3000 Y44

// Rung MPO_Program#13
// Offset 59
STR X17
JMP MPO_Program.S7

// Rung MPO_Program#14
// Offset 61
SG MPO_Program.S7

// Rung MPO_Program#15
// Offset 63
TMRDOWN T2 5000
OUT Y16

// Rung MPO_Program#16
// Offset 66
STR T2.Done
JMP MPO_Program.S10

// Rung MPO_Program#17
// Offset 68
SG MPO_Program.S10

// Rung MPO_Program#18
// Offset 70
STRN X18
ONDTMR T5 1000 Y52

// Rung MPO_Program#19
// Offset 74
STR X18
AND MPO_Program.S11
TMRDOWN T3 1000

// Rung MPO_Program#20
// Offset 78
STR T3.Done
JMP MPO_Program.S1

// Rung MPO_Program#21
// Offset 80
SG MPO_Program.S2

// Rung MPO_Program#22
// Offset 82
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y15

// Rung MPO_Program#23
// Offset 98
#BEGIN FMT_COMMENT 
"Move to the oven when the item is baking<br>"
#END

STR MPO_Program.S7
JMP MPO_Program.S5

// Rung MPO_Program#24
// Offset 100
SG MPO_Program.S5

// Rung MPO_Program#25
// Offset 102
STRN X19
AND C701
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y53

// Rung MPO_Program#26
// Offset 119
STRN MPO_Program.S7
AND X19
JMP MPO_Program.S8

// Rung MPO_Program#27
// Offset 122
SG MPO_Program.S8

// Rung MPO_Program#28
// Offset 124
STR X18
TMRDOWN T6 1000
OUT Y19

// Rung MPO_Program#29
// Offset 128
STR T6.Done
SET Y18
JMP MPO_Program.S11

// Rung MPO_Program#30
// Offset 131
SG MPO_Program.S11

// Rung MPO_Program#31
// Offset 133
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
OUT Y15

// Rung MPO_Program#32
// Offset 149
STR MPO_Program.S3
AND X16
JMP MPO_Program.S13

// Rung MPO_Program#33
// Offset 152
SG MPO_Program.S13

// Rung MPO_Program#34
// Offset 154
STR X16
OUT Y19
TMRDOWN T4 1000

// Rung MPO_Program#35
// Offset 158
STR T4.Done
RST Y18
TMRDOWN T10 250

// Rung MPO_Program#36
// Offset 162
STR T10.Done
JMP MPO_Program.S2

// Rung MPO_Program#37
// Offset 164
SG MPO_Program.S3

// Rung MPO_Program#38
// Offset 166
STRN X12
OUT Y46

// Rung MPO_Program#39
// Offset 168
STRND MPO_Program.S13
SET C900

// Rung MPO_Program#40
// Offset 171
STR C900
TMRDOWN T9 1000

// Rung MPO_Program#41
// Offset 174
STR T9.Done
AND ST1
RST C900
JMP MPO_Program.S6

// Rung MPO_Program#42
// Offset 178
SG MPO_Program.S6

// Rung MPO_Program#43
// Offset 180
STRN X15
OUT Y45

// Rung MPO_Program#44
// Offset 182
STR X15
TMRDOWN T7 3000
OUT Y43

// Rung MPO_Program#45
// Offset 186
STR T7.Done
JMP MPO_Program.S9

// Rung MPO_Program#46
// Offset 188
SG MPO_Program.S9

// Rung MPO_Program#47
// Offset 190
STRN X13
OUT Y45

// Rung MPO_Program#48
// Offset 192
STR X13
TMRDOWN T8 1000
OUT Y21

// Rung MPO_Program#49
// Offset 196
STR T8.Done
JMP MPO_Program.S12

// Rung MPO_Program#50
// Offset 198
SG MPO_Program.S12

// Rung MPO_Program#51
// Offset 200
OUT Y47

// Rung MPO_Program#52
// Offset 201
STRN X14
SET C901

// Rung MPO_Program#53
// Offset 203
STR C901
AND C1706
JMP MPO_Program.S3
RST C901

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program<br>"
#END

STR C2001
EXIT

// Rung SLD_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL SLD_Suction 0x1 DST511 "3" "3"

// Rung SLD_Program#3
// Offset 14
NOP

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S0

// Rung SLD_Program#5
// Offset 17
STR C2000
ANDN SLD_Program.S4
JMP SLD_Program.S4
RST C1700
RST C1701
RST C1702
RST C1703
RST C1704
RST C1705
RST C1706
RST C1707
RST C1708
RST C1709
COPY 0x1 "4 0x0 30000 V3201 1"

// Rung SLD_Program#6
// Offset 36
SG SLD_Program.S4

// Rung SLD_Program#7
// Offset 38
STR C901
JMP SLD_Program.S1

// Rung SLD_Program#8
// Offset 40
SG SLD_Program.S1

// Rung SLD_Program#9
// Offset 42
OUT Y30

// Rung SLD_Program#10
// Offset 43
STRN X35
SET C1703

// Rung SLD_Program#11
// Offset 45
STR C1703
ANDPD X35
SET C1704

// Rung SLD_Program#12
// Offset 49
STRN X36
SET C1705

// Rung SLD_Program#13
// Offset 51
STRLE V3200 V3201
COPY 0x1 "4 0x0 V3200 V3201 1"

// Rung SLD_Program#14
// Offset 61
NOP

// Rung SLD_Program#15
// Offset 62
STR C1705
JMP SLD_Program.S2

// Rung SLD_Program#16
// Offset 64
NOP

// Rung SLD_Program#17
// Offset 65
SG SLD_Program.S2

// Rung SLD_Program#18
// Offset 67
STRGE V3201 18000
ANDLE V3201 21000
SET C1707

// Rung SLD_Program#19
// Offset 76
STRGE V3201 6000
ANDLE V3201 10000
SET C1708

// Rung SLD_Program#20
// Offset 85
STRGE V3201 21500
ANDLE V3201 25000
SET C1709

// Rung SLD_Program#21
// Offset 94
STR C1707
OR C1708
OR C1709
JMP SLD_Program.S3

// Rung SLD_Program#22
// Offset 98
SG SLD_Program.S3

// Rung SLD_Program#23
// Offset 100
STRN Y34
ANDN Y33
ANDN Y32
OUT Y30

// Rung SLD_Program#24
// Offset 104
STR C1705
ANDPD X36
SET C1706

// Rung SLD_Program#25
// Offset 108
STR C1706
AND C1708
ANDN MC450
SET C1701

// Rung SLD_Program#26
// Offset 112
STR C1706
AND C1708
OUT Y32

// Rung SLD_Program#27
// Offset 115
STR C1706
AND C1707
TMRDOWN T16 1100

// Rung SLD_Program#28
// Offset 119
STR T16.Done
ANDN MC450
SET C1700

// Rung SLD_Program#29
// Offset 122
STR T16.Done
OUT Y33

// Rung SLD_Program#30
// Offset 124
STR C1706
AND C1709
TMRDOWN T17 2200

// Rung SLD_Program#31
// Offset 128
STR T17.Done
ANDN MC450
SET C1702

// Rung SLD_Program#32
// Offset 131
STR T17.Done
OUT Y34

// Rung SLD_Program#33
// Offset 133
STR Y32
OR Y33
OR Y34
TMRDOWN T13 1000

// Rung SLD_Program#34
// Offset 138
STR T13.Done
JMP SLD_Program.S0

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SSC Program"
#END

NOP

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program<br>"
#END

STR C2001
EXIT

// Rung HBW_Program#2
// Offset 2
STR ST1
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung HBW_Program#3
// Offset 10
STR ST1
ANDNE N300 0
ANDN C56
CALL HBW_get_X_Z 0x1 DST511 "3 N300 N200 1" "3 N203 N101 1 N204 N102 1"

// Rung HBW_Program#4
// Offset 29
STR ST1
CALL HBW_PWM_On 0x1 DST511 "3" "3"

// Rung HBW_Program#5
// Offset 37
NOP

// Rung HBW_Program#6
// Offset 38
NOP

// Rung HBW_Program#7
// Offset 39
#BEGIN FMT_COMMENT 
"Return to home location, UP/Right to zero encoders at the "
"start of program.  Ideally should already be close to this "
"when program ended if not already there."
#END

SG HBW_Program.S99

// Rung HBW_Program#8
// Offset 41
STRN X11
OUT Y7

// Rung HBW_Program#9
// Offset 43
STR X11
SET C110

// Rung HBW_Program#10
// Offset 45
STRN X0
AND C110
OUT Y51

// Rung HBW_Program#11
// Offset 48
STRN X3
AND C110
OUT Y5

// Rung HBW_Program#12
// Offset 51
STR X0
AND C110
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_Program#13
// Offset 54
STR X3
AND C110
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_Program#14
// Offset 57
STR X0
AND X3
JMP HBW_Program.S97

// Rung HBW_Program#15
// Offset 60
NOP

// Rung HBW_Program#16
// Offset 61
#BEGIN FMT_COMMENT 
"WAIT for new input should get here at the beginning and "
"after finishing a loading sequence"
#END

SG HBW_Program.S97

// Rung HBW_Program#17
// Offset 63
STR C56
ANDGE V400 400
ANDLE V400 408
CALL HBW_get_X_Z 0x1 DST511 "3 N[V400] N200 1" "3 N203 N101 1 N204 N102 1"
INC V400
JMP HBW_Program.S0

// Rung HBW_Program#18
// Offset 88
STRNE N300 0
ANDN C56
JMP HBW_Program.S0
COPY 0x1 "4 0x0 0 MHR1 1 0x0 0 N300 1"

// Rung HBW_Program#19
// Offset 102
SG HBW_Program.S0

// Rung HBW_Program#20
// Offset 104
#BEGIN FMT_COMMENT 
"move left until X value reached assume lift in at this point"
#END

NOP

// Rung HBW_Program#21
// Offset 105
STRN C100
OUT Y50

// Rung HBW_Program#22
// Offset 107
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#23
// Offset 109
STRLE N101 $HBW_Encoder_X.Acc
SET C100

// Rung HBW_Program#24
// Offset 114
STR C100
JMP HBW_Program.S1
RST C100

// Rung HBW_Program#25
// Offset 117
#BEGIN FMT_COMMENT 
"Go to Item on Rack for Pickup"
#END

SG HBW_Program.S1

// Rung HBW_Program#26
// Offset 119
NOP

// Rung HBW_Program#27
// Offset 120
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#28
// Offset 122
STRLE $HBW_Encoder_Z.Acc N102
OUT Y4

// Rung HBW_Program#29
// Offset 127
STRGE $HBW_Encoder_Z.Acc N102
JMP HBW_Program.S2

// Rung HBW_Program#30
// Offset 132
#BEGIN FMT_COMMENT 
"Lift Sequence Rack"
#END

SG HBW_Program.S2

// Rung HBW_Program#31
// Offset 134
STR ST1
ANDN C102
CALL HBW_lift_seq 0x1 DST511 "3 N102 N202 1" "3 C202 C102 1"

// Rung HBW_Program#32
// Offset 147
STR X11
AND C102
JMP HBW_Program.S3
RST C102
RST C202

// Rung HBW_Program#33
// Offset 152
#BEGIN FMT_COMMENT 
"Load Conveyor"
#END

SG HBW_Program.S3

// Rung HBW_Program#34
// Offset 154
STR ST1
ANDN C103
CALL HBW_load_convyr 0x1 DST511 "3" "3 C203 C103 1"

// Rung HBW_Program#35
// Offset 165
STR C103
JMP HBW_Program.S4
RST C103
COPY 0x1 "4 0x0 0 N202 1"

// Rung HBW_Program#36
// Offset 174
#BEGIN FMT_COMMENT 
"Conveyor Factory"
#END

SG HBW_Program.S4

// Rung HBW_Program#37
// Offset 176
STR X2
OUT Y48

// Rung HBW_Program#38
// Offset 178
STRN X2
JMP HBW_Program.S5
SET C300

// Rung HBW_Program#39
// Offset 181
#BEGIN FMT_COMMENT 
"Conveyor Warehouse"
#END

SG HBW_Program.S5

// Rung HBW_Program#40
// Offset 183
STR X1
ANDN C300
OUT Y49

// Rung HBW_Program#41
// Offset 186
STRN X1
JMP HBW_Program.S6

// Rung HBW_Program#42
// Offset 188
#BEGIN FMT_COMMENT 
"Unload Conveyor Sequence"
#END

SG HBW_Program.S6

// Rung HBW_Program#43
// Offset 190
STR ST1
ANDN C103
CALL HBW_Unload_Conv 0x1 DST511 "3" "3 C205 C103 1"

// Rung HBW_Program#44
// Offset 201
STR C103
JMP HBW_Program.S7
RST C103

// Rung HBW_Program#45
// Offset 204
NOP

// Rung HBW_Program#46
// Offset 205
NOP

// Rung HBW_Program#47
// Offset 206
#BEGIN FMT_COMMENT 
"Go to open rack spot X-location for Unload Sequence"
#END

SG HBW_Program.S7

// Rung HBW_Program#48
// Offset 208
STRN C100
OUT Y50

// Rung HBW_Program#49
// Offset 210
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#50
// Offset 212
STRLE N101 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#51
// Offset 217
STR C100
JMP HBW_Program.S8

// Rung HBW_Program#52
// Offset 219
#BEGIN FMT_COMMENT 
"Go to open rack spot Z-height for Unload Sequence"
#END

SG HBW_Program.S8

// Rung HBW_Program#53
// Offset 221
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#54
// Offset 223
STR ST1
MATH N103 "N102 - 380"
MATH N104 "N102 - 390"

// Rung HBW_Program#55
// Offset 240
STRLE $HBW_Encoder_Z.Acc N104
OUT Y4

// Rung HBW_Program#56
// Offset 245
STRGE $HBW_Encoder_Z.Acc N103
OUT Y5

// Rung HBW_Program#57
// Offset 250
STRGE $HBW_Encoder_Z.Acc N104
ANDLE $HBW_Encoder_Z.Acc N103
JMP HBW_Program.S9

// Rung HBW_Program#58
// Offset 259
SG HBW_Program.S9

// Rung HBW_Program#59
// Offset 261
STRN C103
CALL HBW_Unload_Rack 0x1 DST511 "3 N104 N202 1" "3 C202 C103 1"

// Rung HBW_Program#60
// Offset 273
STR C103
JMP HBW_Program.S99
RST C103
RST C202
COPY 0x1 "4 0x0 0 N202 1"

// End of Code Block HBW_Program
$PGMEND HBW_Program

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C10","","","Software STOP"
"C28","stg","",""
"C31","","","SLD White Puck Ready for Pickup"
"C32","","","SLD Red Puck Ready for Pickup"
"C33","","","SLD Blue Puck Ready for Pickup"
"C34","","","Deliver puck HBW"
"C35","","","Deliver puck train depot"
"C36","","","Pickup from Train Depot"
"C37","","","Deliver to SSC"
"C38","","","Pickup SSC"
"C39","","","GoTo Standby Location"
"C56","Hands_Free_Mode","","Enables hands free autonomous operation"
"C100","","","Manual Horiz. Limit"
"C101","","","Manual Vert. Limit"
"C102","","","End of Lift Sequence Prg."
"C200","","","Lift Forward"
"C201","","","Retract Lift"
"C202","","","End of Lift Sequence Sub."
"C203","","","End of Conveyor Load Sub."
"C204","","","End Vertical Prep."
"C205","","","End Conveyor Unload Sequence"
"C300","","","HBW Raw Material on Conveyor Factory"
"C500","","","VGR programflag 1"
"C501","","","VGR programflag 2"
"C502","set","","VGR programflag 3"
"C550","","","Vacuum On"
"C600","","","VGR subflag 1"
"C601","","","VGR subflag 2"
"C602","","","VGR subflag 3"
"C603","","","VGR subflag 4"
"C604","","","VGR subflag 5"
"C605","","","VGR subflag 6"
"C610","","","VGR subflag 11"
"C611","","","VGR subflag 12"
"C612","","","VGR subflag 13"
"C613","","","VGR subflag 14"
"C700","","","Puck in MPO oven"
"C701","","","VGR clear of MPO pickup"
"C702","","","Puck at SSC color sensor"
"C703","","","Puck at train depot"
"C840","Saw_Enable","",""
"C841","MPO_Ready","",""
"C842","MPO_Reset","",""
"C900","Vacuum_Unloaded","","Set to on when the vacuum leaves the unload state. Reset once we jump from the turn table Idle state"
"C901","Entered_End_Belt","",""
"C1700","Color_Red","","SLD Red Puck Ready for Pickup"
"C1701","Color_White","","SLD White Puck Ready for Pickup"
"C1702","Color_Blue","","SLD Blue Puck Ready for Pickup"
"C1703","Entered_Inlet","",""
"C1704","Exit_Inlet","",""
"C1705","Color_Outlet_Ent","",""
"C1706","Color_Outlet_Exi","",""
"C1707","Local_Color_Red","",""
"C1708","Local_Color_Whit","",""
"C1709","Local_Color_Blue","",""
"C2000","Auto_Mode","","Automatic Mode Enabled"
"C2001","Manual_Mode","","Manual Mode Enabled"
"V400","Hands_Free_Index","","Index for the hands free array N400-408"
"V1600","Oven_Bake_Time","",""
"V3200","Color_Sensor_SLD","",""
"V3201","Low_Color_SLD","",""
"N101","","","HBW Col Encoder Value"
"N102","","","HBW Row Encoder Value"
"N400","","","Hands Free Array Row 1 Col 1"
"N401","","","Hands Free Array Row 1 Col 2"
"N402","","","Hands Free Array Row 1 Col 3"
"N403","","","Hands Free Array Row 2 Col 1"
"N404","","","Hands Free Array Row 2 Col 2"
"N405","","","Hands Free Array Row 2 Col 3"
"N406","","","Hands Free Array Row 3 Col 1"
"N407","","","Hands Free Array Row 3 Col 2"
"N408","","","Hands Free Array Row 3 Col 3"
"N1000","","","VGR subshort_int_1"
"N1001","","","VGR subshort_int_2"
"N1002","","","VGR subshort_int_3"
"R100","","","PWM HBW Conveyor Duty Cycle"
"R101","","","PWM HBW Horizontal Duty Cycle"
"R102","","","PWM HBW Vertical Duty Cycle"
"R103","","","PWM HBW Cantilever Duty Cycle"
"R900","","","PWM VGR Vertical Duty Cycle"
"R901","","","PWM VGR Horizontal Duty Cycle"
"R902","","","PWM VGR Rotate Duty Cycle"
"VGR_Program.S0","","","HBW Pickup"
"VGR_Program.S1","","","MPO Dropoff"
"VGR_Program.S2","","","SLD White Pickup"
"VGR_Program.S3","","","SLD Red Pickup"
"VGR_Program.S4","","","SLD Blue Pickup"
"VGR_Program.S5","","","Deliver puck HBW"
"VGR_Program.S6","","","Deliver puck train depot"
"VGR_Program.S7","","","Next_command_Queue"
"VGR_Program.S8","","","Pickup from Train Depot"
"VGR_Program.S9","","","Deliver to SSC"
"VGR_Program.S10","","","Pickup SSC"
"VGR_Program.S11","","","GoTo Standby Location"
"VGR_Program.S99","","","VGR Home"
"VGR_Program.S100","","","VGR Manual Mode"
"MPO_Program.S0","Init_MPO","",""
"MPO_Program.S1","Oven_Reset","",""
"MPO_Program.S2","Vacuum_Reset","",""
"MPO_Program.S3","TurnTable_Reset","",""
"MPO_Program.S4","Oven_Load","",""
"MPO_Program.S5","Vacuum_Move_Oven","",""
"MPO_Program.S6","TurnTable_Saw","",""
"MPO_Program.S7","Oven_Bake","",""
"MPO_Program.S8","Vacuum_Load","",""
"MPO_Program.S9","TurnTable_Unload","",""
"MPO_Program.S10","Oven_Unload","",""
"MPO_Program.S11","Vacuum_Move_Turn","",""
"MPO_Program.S12","TurnTable_Belt","",""
"MPO_Program.S13","Vacuum_Unload","",""
"SLD_Program.S0","Init_Sorter","",""
"SLD_Program.S1","Sorter_Belt","",""
"SLD_Program.S2","Sorter_Color","",""
"SLD_Program.S3","Sorter_Push","",""
"SLD_Program.S4","Sorter_Reset","",""
#END

