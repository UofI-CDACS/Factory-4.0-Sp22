// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database; System Configuration;
// Memory Configuration/Devices with User Add-Ons only; use Element names (no NickNames);
// rung/address annotations; <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\Jacob\Documents\GitHub\Factory-4.0-Sp22\Factory-Fa22-Demo.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!
#BEGIN SYS_CONFIG
8677f77ae9403009fbe13c9dee9e6ba4dad7310caf8e2c1f4920b03988a6acea026ad6f27c548565
c873e032e82241d5426f1adbb906909799904dafb7cc186951d4a1c9a799e36e6f7cb5e1eb13b31a
56bdd24f52c94628792c6ad5657734c412912effb54b0ae4751b05885aaacf7069c9093420efea0b
40f723cf16cdb2a639a5a35b107e837a5719f7bd3095b0c2cb9ede549e713743e8d5e6768fdb5c0e
0040bd44620121da9cd67ec85c997a813520b9c5998acb1ee38ed42bb22eb2daaced121e6a7e5446
3362107656cafd45ad7d2c4374cf2c8db8b2cdab4efa42f539e3f5bf0e830fcd35498618c4172fbf
837e775fa0c7c2df170c647b12f23ceabcdab569ce929a26ea310a95da49b2f2e9d91566d5f3d80a
726eaf3859fe39bdd2609dc5dccce29c4c3a10dd07e57aeb461faf509fc985abcd16be5581a86d35
56f149837377541f572ab7c75d04463ec38b5ed12c7a5f821d72202d74017ccca44c3ef15047f235
c66cd8292102d664783cba44b235de61bd0a53e86457034ec1211bf616e34a81b22cf44b3d991b7f
cad334e408d9fc7de3d64a862ae571d43e72d4773c0592ff340b15c7588942c8f0e9b7d72fe77dea
c00fc781e738e5c95af9178201529e1e5b9db2bf0bbd465084d62bd315ddc36f2b0a345111182775
95b329abea0af67538413a84cf4b57fff57ae301715b85aa53ed58545674c1cdf438ce3bfc70e282
46b38a663a0a3f7ab9486cafa847f1bedc9bccca859586b8e4ca6978c5f7a3ef78e2fd37dd414250
40032bf1da8eed08ab9f0941750f59559f0b0a19641b74418ee390c731e76837f1f3e7a58982f42c
f014bcccadf57d6960a0706c6179eeda0624cd74a9e5848e067e19702f202a0629aec06c2a562096
0ab227fbba1a5c199015041211f743d8a7ee12504669ef0aa261654470714fc0d473ac29173e4028
8dd2fbad7b5484f1f19582c82793727a1986f89f31ff8355a26da3a50dd138081621456eed94b0f1
74c964eb86207741073e929c395ea6d90ba92816d8d28d2671bd60d241dcb7ce40768355b75f8020
93f81a4772c396e25bffb08602dbf372f5023d3302f9139be26e699f3c6732c00da24e8ae8279062
1dc2d4785924a1f18a851e304601321fea8473abd8395a9ab0a8eb325dc30474b7e12e7e5bb3940e
fb4ea68ac890de8ba5cc483092d1fb9196f0c205b358082d5a0fbded3420ec8781409323887bba47
ae47c06fcb4dbf8d914c987e4421752994c3bd6a1386b1e6ec9667732d7e79af311c23e817f986df
d187e5e73db7105e297b51d0bb6004b512793abcaf39250ead4f7d5b489a4cfa2eb144fbbd2aeb6b
9666bc6b4f5a3cfa59e4c98308f9265840b7e7d1727ae7a2e041326d6a0245cfd885bd4086d8c06f
e035ea813516e4186e0a8bba55a16e5eebb70894e15e58d08c52347eba666938b70042d1d38c72c3
dfe54efe9f50cccdc1d80f19822d9c63b26c931fc09ddef671bfebdf663a577fb4049518ac4e98db
a009ee67eb6e7e55cbb341650e6b0d0571a6fda5278e3ea69a062d993998f75f4994f23869d81755
a7edcaebcbe262b593c63bb8b5e78b6fa1e7c4dbda87a1cac7c08a709c147c2c5733deffae8cf3e9
b6642ea4c8a805583dde55ca0cb20733b3a54a302cd6a70f28385f305f38d3cc09727c0e043f652d
48660e06d1db86758542a736880078bc7b8d1553f545b9f7851653be5798fa4f13472a936d1f3fd0
4e6a5226452404310dcac0be5e5609552d4b136c5a9fe69922c6df643bc9b32b0039f97f6de4d7d6
879cdab7951621fba00ab1bf773ec383afad4e93f0f7ccc9b4809aac9c461db7737db5fc01416d0f
149de7d5ea4ed339924ab1963bcb3b3ee358bb195db8f862faf33fb1674733e3c394be81c7a439b5
308bdd387859623652f5606c5d175ca80740f66915ec62f8aea244f6f5a56890c72c085f7b9aabf7
89ebf868b62989f97bb59cecc2285df9a63a73486fd36c7c1c4884cb92b9cfa2e06204102319d190
cde4c78ed4ad6805aa6d13be87dfca840d161b1831ab18596e1b0365ac850f359864cc3983aa2852
2ed4116ae58ac2d0d32f4082fd436ab0234f212922ed8502e534f885a69d64ecd396648bc292deca
d7b42ad5af757226dd5cf004ab4fd9f9160c8c60afcb0bbde6450fb57e677e1015cd514e0a031d5d
39727f92526c6fcb53666e345c9a08a81ee5ff772424938b250bbaf6d2417a43eab3db42f5ecb178
301b3737239532583c8c8922e48389c57055dbcbca36aa4c745069c3247b5c69771cdbf8e1ff9fda
acad80cd263bda245270ee50ee55b5a2cb947a2a2e7468d8618981c0fef031ad080f0864c19a51a6
5822cd7326e32ad9ab12c427d443e8b53d44c9f19f167987a66278f39b2a3c0b9663954df36629d6
53c9574a075a2863e15d2800adf4f0620351c21914fceb33d41d548806c6314dc3ef2d5152847db5
1881b70ffca2d85e47b46394f502f0df600eec0ca04ffc02cc9a10ed8bcc01e27b50b803d8b98f31
44d6b591426245a0366d8275e53f139706373163cc534d40b3490b89027b4f5521a81bf3ba38448f
fc6533ea43c6dcd1baa80430b7ae23d85555c887125924f8325b02efe3cb54e2ffa230783783041c
f1d5dae90032e9b73a366546dc7c2da76e1685ef01a44f47da7d0a20e32bd7e7434da7bf3a7a10fd
f4bce7a45d7a77cb4a140c5a2969a21691a984fd954146a32af2bdfab99f02a18cb55fb100023c44
8d7bcad26cc280b518f8ca592bae4efa19a23a3a38465840b9bb077c426cd273990bfa7a87c82296
58d4861e1a43e223ddf136eb7561e681d7254a4ad9f98be887ffb60a14e2a724ba71b89c816b09f2
fe64c9153a59bc040848aeaec1924d0c81f0c5d3fb3ff11ce380c0bd8087e81654a63d4e6f2fae46
87edc674b196c187d96b48dcd4b28b2ed397e69cb57738b3521dc1619d958a703a77b25b8d3cdb24
fd8f6224086aae84c7a28860d5bf114e140bc9989b007f8b853eb870845dbf2a0a1fe41390b9c3b2
10373a243d573468a2cf6e91d0afcf3a3f861e170767b1d5cb4df61f1aa72ad3ea077bf007ba132a
5786401b16202ef7fc8faf44cabfa0865ee0e9c7b3518135351a4451c21cdda6a8dc557606db9518
24fd28981d47c93f2ad1df96deeb926e8e9df928acf13dda664bf0341303263f49e7ef0299dac2e0
49475858af0d0d37e4d464be4c7cb80485191defdf3d45d576cd528d0bee362e2ae195cfc666e15d
a676ab3443294246c183ce7a6becec8e111d33ac20029f35b376a3fab8447e4f6cf91c526aec271c
82e6734f296b3f435b91f8f80fadadabbe5c0f106f642705ef3bf4f267198a1e2174d6cdfb2cccb1
d6f5d558988fc7aab1cd9f97ca73bb843067fd86eca4b6b581a9ac86a7b1a4dbf528bdfd58eb6153
9f5bc426ee504246158a61fd985aa86ef22bfb464f213835399ba32a8ea7220b2a3c2928a6b6fa86
95b8ad3fbee045dd5fdb93764ac4bdaa1057885ef517def5455e32ade1d499507496f495e96bd308
e883ddc78781f102c354540d4dd2997e6cef40687e44fb693b457e0b44b19a91f3804b20a7e317e8
42726358a57d15446cf1e9bd7c6f23bba7135dda8c054cdfe0da850e568663a4d628ea810993237e
2d6a39a68fb068c8653a608694c07956039962c7de03bf278a9d72a88c049e2e0f1ca058880c5f8a
2de04d13a50fd3751f6b2a4a141ef9d0246ed629b9d9c944637b4bdbe878d578a5eeb6326dc4b0ee
d19374665e0b98dd50d90feddac2e2cf43f22adbb2cce5c43387c81d5e97b3513ddcad73d126ec67
df08ed2a58b87a8da3f7a11e0db9ef705966b595f322de90170e5766b81aed67ec7c662620d02001
9595cc8c2e0d07d55374766bc3d5ef0821d59d14f78fe3f2107b392363656d1e792bff7f63eda6cc
78357ca2f4256b5e95b193eebbdd5fe73cea514710cd061b69fe39a6a53cbd18ffc34df4e98f84e2
00f329816a7327e61554165990b45620c1173c3755e2895f08d51e53a38271fb5140a6ec591662dc
71ace77ff2ef12acdf3e95ed8190325953d2a8356e9d7c82ffcce95dae88e9031c64b186f4678c88
19d97fac101d749bfce3e82fc8d597aa1434c9f3089a65331cdfbb6c563665244fe34b7e3daf88cf
91c324a6ec8bd22e85db6683388426e144657caa8db8342e48cc057e83538f76fa3ef15603853592
748d61f826f176936424c80a2cfc1cd84ba42fe89bf91f49aaea8b83ad373852ed38a2a1e8555315
157c9aa7061104731d2b8b80432b8c7cb07676adaa60f03248d73fa312de854a579288b39c367791
10d04603beafac9ef9522a7aebba0f51d6ba5bec37d522d41fb42e218874826e0bc5423f0b184c2f
d711b0a26ebd95887dc3a8497c6267c73b3744a46f23b59ea176d6db52be5bbbc9ab4f197c7b9229
e37877dec235c34cc11bab8a984c6e67586ca38ffee72e0eec8a6b3e212484b8ba1345f5ce06563f
e8021109424d56f4afd63ffaa8337b7385473cfbf4504987eab2d6b0b0716d3884f4616aff79c2de
c996f844e626c1eccdbca940c39608b24bde0b226968440de53a5ea5bb97c476d398ec39faaabdde
9f6740d77cebd342a532b4226a5aad75f967103597fa23ba2780d56954daa58ef542f4023c919de3
09254c678fc697c5adb9149a7cf518657530bb5dbee12b2c4125496812678b8abbb422e40d0a5840
6f08c3b6f9b45a54c520f073c02ac673afd597aee86b291ce59dad48095603b29d64c42f6e781f94
7631ff438c7470e49e12247c56252e061fcff8ef8803e11d46ee3e27579fc7caeb8dbb58afc3f9b3
2711eff6a464f1197c12207f0421385063392fea2642ddfdeae03af40ac2db17b498f86dcd123aec
ac5e4dfc334f16dfe2b25c47d3c5980060ae0d751e9e382c11ae84fd6d87cf7337b466dafd04b9b8
97f1c724d3101a3b06087271d2b6a81a45ad055ead166c465365315ac397548a423de1df677846b7
c4a7ac0f13a717818d40605e4d80077cdfa7fba2eac55021ae715a8a5d4059833bf5d5f1e6361ee5
9ceafefa05e51cdf47d1a6ac422ed3bd1fe6c1b0eaae6b61d48a9cdb1bc0e3cc5738b9c6778d5272
390c481ff79ff1961ec2b9722af2882e0702b960c6dbae2c08ad2a2f83287502754b570d2aa6ec23
2129b7360d7ea1714cb9b1bc81b69a62ed20b363b7aa8b0c937949ef6cae296e0925679a3b9856d5
e4e41a1b33076223c64b73ee7e35faf6376dc80efc7e98ed1218f6b6e147ebc0ffd6bded7f103d56
53994b258e20271150809063e5d73b2af4d10eb474177b7eced3927931b6d00e2141f206110bc26b
efdc1ee7aabe8f231d2095a2e96a8249a03dcdf640bbad76178cae08851162089afcf075c5ba10e0
d077bab9e7d7948e3f8a338bddf916ac08df7a4941246d3c261c01f3a9d5b356de4b8dc7338a699a
f37006f9d55cdc3e52581e2e6ab92394bad3cd29172d155b45ed22d6d46fb996d401d3db040ee732
e824b6a306fc55b0aa71eaa0639b1fb749f81604fbe6273a869f526915be17eaccc8fe26add5a606
c98515870fcbc64c35d6e7f306b533b86df1ad349ddc76e307336a4468d047bc7ddc8306151d53ba
4997eb4671336aa9d3a697740e2e0f0c19ba0e2a4f7aaeff23273f379ec1955864b134e7eac6aad4
95c298fadc8752ef8f7af2098fca0c335e61c7a9f1f3ab4eb2120bed3148bf6ddd4579ed4f002873
d35a0c28cee4f3114842a41d85b3ae6414e180423b146a5276a40725c38b8ed5a3e19e01bc304ed1
b048003a0a6d1daba135d52fa56ff350d15cf611a8cf5dfcd898fe7fcb9ed9b7ae56e86a12067cd6
f8a6e9a1087711eb2f6f52f857f3078802441f0613d53971a795767ba7c673d6688217f210b21399
31b6548f4f1eaf97a568ddde73222856ce42c47bde5b1bb7a50e1ebb80bd1a1857f12db7c5be5d52
f1ef295eb98779055db3499efa2f2db216ff9b1d19650b8e274aa5cb78aaf2dda60a31d02c1fd19a
7059c8a1e34e29a5fbf6180e1778d246b16b0d7013660b9b019eb032d846c95a705b2c8b5b440f6f
321c2f197b973392cab71e3b2c06b2449bfbe0ce3845e9cef2e57fadf282ce0b663994383762f194
1466797b09e625eba8e90ea1259bc537360c4f173f33b979d89765bc878302df134ca9020664a961
5319a7c265a698ead51a9d1bde850936c402d5d53d9167558efd899d5354cc0816e7f09dad422a2b
31f493fe145777ec74c8e2ea570603731043293e445e3bd38fd6124f283178e8fabad12a43588ad7
c2c860fc5f6a8a3812fe8ede2e7a4003d7fa72cdfb7067eaf354509426541f1dacee8b0891a920f9
4cfb817e9bbeee38c6c2f3cc81943ec4b890817cd7fb43d3cd9f44b53afa74fab6f0a4c1bbdde88e
04192db6dd7c2154e8468f10d14f158dcef848731f724b34a25a206c354021754f26189c4d6cbf43
672c7a6d23e35ecd1cdc49ee342e1080db76f3d9321810f31adfff4f2ad4607302f5d7802a4c86ac
887b69809ce28bc6899579d3bd1401c5c740c673e79144603e33f8ef42c078b090566ad661f56cf0
01bbe5ea82e8a8f128931b22b189b0d2a8d395479e116d2ca72b0d42cf65a5c8af5e6f30c46e9605
94ad1b090d8f4b1ea0a1244799a2cef377ce49a8809fa3ab98cd937cd73b91f200118effd6c706f1
f471356739c7c3af7a429261a066d2731ab99aad1d5bbb2235ce91abded2bfafb221578b3bf25edc
23f9696fa4833522a85cc4f89c3945cd7c9342a9acd08c4202c3973e284554a6ef7c43a06471589d
099143b96bb815b08c94c5758c23a15e50cc4a98bf09fe7480007ad21963672264f60247a5b75dd3
e1c1d8b8afb0a463ba1cb493a4c1097619cfef84e2f1f8c27b1e921de9150aa06b151693da88d6a6
365a0a93ab9afd560041d95ca8108d12f8d97e59946b54dc8c4d263a2853d7139b90aed32c0ad3c0
fe37bf230b2337395c62fba3d9ab07588541d77c3246dc5c8f1575137dcd9c0261064f12a0e0d09c
9a761bb28576b38c9fdb6b254fcd0249065dcdeb8d7eabc75aa4f1083ea272b7ee4813f84f2eb077
0bf287fcd1b154254282aa7cc78f3d7d5c46047db78035e04f8659e5ce2aacdcca36c9c2d2f9f117
020c3552bcba51c9ff212038b8fcf0fa04c40f027ab435bac9b3e01a993f97a3d8cf1da02ee3285c
06ea2a1bb5e1a249266a72cc8b9e1d3980b25ed3ee83f019c839fedbee78dd37d5cd51f54ba58985
874be93064efd06839611edb26b996018165824ea95f23b4e72f2fd3204cb1b7fc98f40b64b6ce52
774c605d2c32f518f900476914bf52c4e6b2aefc2026c0f50eb827b33b2c67b2ce030763f64b3e07
18f8757436ffa4a2877d74c192a248607e5d7d802c3a2206802be3cca82117c2e4199824968a615d
c86edcf02d2fb6cbcbde44f587b48314e900f2a6c2ea740139e1d3c3ec5e46f0d16c644795af7832
38a7490c7b544e3e814b56e94f624742db11d1dfd5c111ddfbc7d4eddb1d93f621fcbbbb8b094083
f94d780374f610dc3aa2fba2362d7ef4f50e9fe11dd6f7514ded270e497144f4a3dd7606282d38ff
1667e621b6c3a177f5706931671282a4f257487f36fe310f9df0f8bd2b740d84b881dbe7df310dde
e205da64d54fff071a35c7ff0957f0c8b5229e8b8676bd6aa9caab770755abfb31b3e43710758f64
c3fcea8d56e05255d6fca285d9a793b48223d2fb7467acbe84e15dead5ae1e110e330621f36deef6
7884f702771caf08e16d309329d969f3b90f3d81669e323dbb92d6dc09342462dd47f9a521d4c93f
ee4212b44421c8bfc6d31b984fe16e62e8972539374936e33b82ab03633cb1abb17784960bf2a3c0
7887851851f288035c90d2d1d0b03650e8e6fea5f6a838dfeec19d29a6e246035a5f43321d32f00f
f699cc567dac24cb849cc9553740503d2c404e12dd0e3b7273b28f60a246cb5b3d9b2de00b4cf9c5
9abce41368d586d5d00ee18f4fcecd3701971f9d673e6cadceb1767b2b8c975af331e98f8a19bc0c
06d7dbdd21875616523c46548a997ebd690a789c54480b8b0bde3012384ebbfef9cb4d122e3d9277
b809d20b344fbd58486b2ae26c9a415ecf6a795397eaee6f6e090362044c920802e60bca06d0599d
2c9577aa32b69f5d1e2b3a535f3546542952df10037b2aa70a7e5c91790055173a6c048def1a54ab
d3e88363d0ba32cbd1335ef7953fbd4dae7c3776e7c63ffd8d9fd256a973cdbd2105ba4a24fac507
ed603c5f3d200806bb17df1e89e25efdfc70da19a95c239f62dddebefa2a94e7b9c7b0895b9cc57a
cd8753a455faf35417c5fce7899270d2d00ad2e74fb0a3a60428b953ed439384c49b4b5e38264d40
e789116db962d0a70a734ee58760648c466176702e3a7b8e6eeb44f3dfa612ea439774e7f43d0f81
4cb51d09631e6334279e0a41eff569b52684a91872e8cb67d9ae8027e4e47e8d6798012339fa3505
3c780944b34572eeb0ebb008426636a288c67826a9172140a55fe8a50a203ae033d252a9d52e8473
f91286bd73a29aadf904ea671cf102813db74856ca213c5a0ba222f29a8af964365f4ac5752dfb40
631739fa87e2c49fb7d1ef01c803d7218dc847618a537bfb6d514276f0809584a7554732e87f39a5
198cc73d1297ff8be0c7192306b5436e35e96c7bee459107faea1b9a0d358b6669f2f4c28a1551d4
0dca130a0692eab175607bc496bb8a03dc3f238987e6e9adef62e4dacbdf3778d866f6817e5122a0
c4bf7912c050f7b17a99befc0175870264aa2b6aaa627f09a9c1f4609af3c473d7c33351119cd4bb
a68c247eee0675297a0541eb826334a4985a346c741b7676e43050628521c2b741d4360ee7340e0f
208e9ff09de18d3bb2f6e2e7953b16b6bcef0a3c3f118e75125fe8988d43561384ef73fce45e169b
c6b5845008eff8883d5dcd9ca487597431a2502793f6dc344558520a17b79977504c78d9b11ea09a
3e210cd7d3c9199db11fb3074965d6809b15e453c3a40a28f6daffcc9ee452338beaef0049e7f56d
aabaf878cccce6619f467177a28ce81fa81fcdabb244cbed06267f79cef8f0f23db92a4a55622112
157418ae4c33ba4bcf8f30906e1e1f08eec9d3f69080a2b0778fd608a32b5304ba542054a7c4c60e
39ea60eed376d9d72617a5dcc1383a6644ee72cde2e6b13dd8db7e7a39e5615e6e675bed3b05a398
31125f81959841fa3a7ec662de3ab077a86d6b6416058f823f67299aaba4902e6eee20f37ff5c7fe
4b0c103322b175e26830cfbecfb7876c8d10acf7fae2a8234fb7d5b861302f7b79abb855097a6902
7d005d5212483b3e487a6dfb8c22c926a2a8dbfc2dfd270fcc71b25b35c2b2f372c2586fa74315e8
95b368b85c9abade10e8ec529d1fb0b1c4a541cfe67642d86c3115ec425fbd8c774210343762a66c
d439314cab7a04a6f9f4c26759193d5aa5e75320a723c39b6954c63d231e8b2dd0776a50b1b04d6f
5c4fce0fc07a2b7c338d874c0bf7b78319589f3d6109ce1a4cd5d5ceea88ad7d2ffcab31055ad13d
9686abd69afa06a396d54e3dcc0d4c223d52016d83be29fd1b14cf6d03da6130363afb6fffb6b3af
282a7770210a77ca5308f67b252897b5679165d9355a612a2b7fdd8a4908a01634f78f2d12207954
778017c207be2e152390647c01c060b471c8bfc676996c5fba0fd7d4a50af6e819ecc01583e9bdbc
ba8b529cb0b4e4d00d10d1e92b5ef46abbc9822232225082bf6662c70498042b2c78c907e7f6f37a
15fe752a21efc9bb44de316e5a577b2ebfe50fb4b197468159c5be3f790f607c658222293aa850e5
9c0b3af5dccf235f7de781f1d9a81408832e6c6c257dc929cef4db3937d349fa354e971629ae2bdb
acadd42456fce69da8eee56647390df3a6d8312252d96db2ad89e1eb48ce8a933023ed3b231e9946
96b217f843f2a8da2c57ca85021d867d670bb3bdbc37243fd3bd4b9bdd4f17cac6e36401e51e7a04
7159b0f7642ad919af5c94714bb92b2c2040b835b94ea5e6fa1ef063713a9f9b2ee0c91b3b95f035
bedb4123f1952eb760b7f0496a6ceac7fa7dee3d61ead2a09a9c51f00ee9a5220f912ae53af2b789
3fe0c6203322d14183cd9941633b961aa3085cf314f4cb35b72900ef5af1b752d551629f24797c28
549034e3f1bc7402ce52119c63de9e3078ff0499dfac8ae6ab7471a9000b67afe55539406f45f78f
3b2eb77c91c5e9108ef185d148bffe96e29f55709b094c62cdc8c697f1944b11def8211ba4e00a10
4bc93c95d0191625d3228c0d32acd087150405551bef01f336311840b6b9481f29e943ddb692ae08
5c60694fe5482f7c4d2e0b6e75b4d9850bfdc0775c040005d1f85eee53c2a45e380bcf3644fa9df4
f123c913060244aa8f6bdca1f6d76d8dcaf4729438c69b7e6ad9cd9dccca2a2d54738c67f6af5b13
9bedde3a9b25c82c2829324fd945262851edfe58a481b8fa79347193f221c32654e6a7c019d5133e
7f4e022a4f3f744e615a2d6a6884ea6b0f68ef983821ff4c49ff3aa9883d7d2c1c9cc4837658d0c8
3685882fde4fbd572b7b47de373b579381d73c907eeb3772414a07a11dac231f814bc62b08f1b747
c8824e0e87be043efdac5dc76be2ed28cd053e21ba0fb5187f307a88e74e4713e5ca97c97e5c399c
3e68f38749606bb17b74dfead5c4b338ded83bec56843df6c5c24d83c5bac5803820309e489c427c
7b377a9fa65d45efc4cc11a6ab04dfdc4d5a91a12e6d6bc05c0207bee95872ffae808e9676b6b6ee
70ea3e8aac7554ede80790541f24f6f82aa7673fc966bf47f0f5ae1394f5b8ab1e5109e49fd26768
645f678cbab2f1e5e62d608736ae5d762ed5848eca599e2f1d86409cdb4f7bf899e2695aec105f3e
78cd9c124d215c62387e4c388f74298fac87c1f1361f4787f0b82d4299285bd93fb56123f54306b8
21c3bce86b2f48995e8c36b76491a26535a0a93e738213091870cb2f6db762a51c11817b122679e2
fec04a89120c553da98b2972a74b8a8db5cea80f199edd58543907fdd61635abc36ec3fb71ec9809
3eec0a42247b19c653435d71990a7ac4e9c8d5ccb981f9cd48dedb327be8f2c2ef4763fa25c98022
2f3f2a7755030ce72d26848e8ef434906877f7bf8a2295a8fc7415cb39f1c00fb3d746004af721a2
43c65b8f1e64d7dd9f4499fda13181112a7cccb2aa9ad47cd26f6168f44e09fdc1055c499a6cb118
8099e0adefe02acb85b672ffd33fa7703f536ab15d8bbac10f5d9653b5d8cbaba798429af53f83f2
de9e498fddc337ce726e9710fdb8e5864f3508409a4447f693457f1a68994eb5f8791a3b7e383372
c05c289558f0b147a794166d49ad64032f7df7c80451ca895993d88753023f37e82f8ef88c910a1b
f01a8bff03ead963d127304f6fc9d3a314f5552dc637831c67a85d0a520ee1b1d9ce317527f07671
d67db0900afb7b37de14788c90433b62669b7cd414a4c7b72696011ae4997e7b54d1182db7c9ece4
5a103d1be6d65841f183e740ccbcee5f8110bcca9e94539bedbfada64554a1f09d74f36e4c7bf8d2
f20278ac05d41631b09928717820cac29193fe70d2330c501a8f9c46af18dab52d30de869453f21e
398ab2b088006ec01bb4a2efe8d6f05c402438499086093f3940b7a2747f501e52c9a9156517a389
aeb98b4f5251fd941196f5c91fd0e6ea2f82983f15d9bdfb9443d1255f4fdd00f13b14c333bfeb5b
a34db553f0aa69627b6b183ff9deb6e0c827e6037d3d39af1dc7cd1d7262bf49627788dc4d256f06
d0d42909a2bad6d68a9c5a70d2f7cee4c52d63c25c89d986944df575d9e34d509665c4afe51824ac
d9f24509fb57eff4b383990f7d0d59e5f4b0f538295d6997d54197dc3311e0ceab7c723ed3f7d5e5
511e206e14880a090b17b2e83c0a5306d6fc9c6b14d1cae674ca910553de36fc782e3c4b9fe4abfc
70aaa44e051225331a02b6943bfa1901202267cd62d4aa5c1fd850647245174a0e12a44145c91b11
8136896f83951a187789ebe387b9133978944db4e6dc159b1047fb41e98b428a7f3f390b5263a5ad
f14c9f67e2b014930de3d338149e430da52a2c3324cbd8a90eceee2bc0825a7d118caa6d44bbce5f
723d3767fadb669578eeba3a1671950f29bcdd9efa6cf2fee46d6f7aa324107df91643076a67ef9e
59d7a58dc549f93a2cad475843f850d722607b93c0cb81fa90f9eca61e0dddbf6fee2ceb2364b290
f85c78196a8d9c15421aa5cc51b91fac982997b838e37202ecfdd4c33ff054a3ebe22f1b6652e418
aa4d5e2d44ed0e8e55270a4d524ab0aa35445a5ba98f63b4581f0eeba06adab7f3f92829959e7afb
4bec99a468ae59471ca2f103fa650fe1828596d5a5322bce6db2116d1fcf621773077f23189ca13e
7a422f35f9cd466af4ca60396275b694854ddc882993c94bbbf241db4406ea0b64b3f61fbb8e7c23
6c1c153710e54266c253df686d935d7315e04bcdd42154b0a0ecdb03fc5b47800402fb2b472a12eb
9d83737f6f0e9fc76b5edc13cbe2b953ef8c9f8f638441234214fd6640a1c35f810bd390da3c3720
d64016850af8d05302596f800b0f447fcbf1f43e4001f3bbcdffb91ff1b8208b8af9c3441ed8c869
76bbc11322e2ce73d97af322a77dc9a131c0f85b37dd3841ee08fa7c10e9d049b184797696d90f2a
562ebe26d3b21ee771dba01a22c28832542822ab32df6b41f5fada73768a9b6459eeed5e5e554d52
99f24047a666c1220ecc3096df0f49bd54265656ccee8fc59489ae14853736e9ed7925274ad2db67
f4de5efe2aa2c57ed572c2d2bdb2eca720ea315d9a69d088e1e5ac738faf2158eb0e70b3062afebb
4953b2e6
#END

#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State_F <Virtual>  0
 VGR_Suction_F <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 HBW_Copy_State_F <Virtual>  0
 All_Copy_States <Virtual>  0
 HBW_Manual_F <Virtual>  0
 MPO_Manual <Virtual>  0
 SLD_Manual <Virtual>  0
 SSC_Manual <Virtual>  0
 VGR_Manual_F <Virtual>  0
 HBW_get_X_Z <Virtual>  0
 HBW_lift_seq <Virtual>  0
 HBW_load_convyr <Virtual>  0
 HBW_PWM_On <Virtual>  0
 HBW_Reset_Flags <Virtual>  0
 HBW_rst_switches <Virtual>  0
 HBW_Unload_Conv <Virtual>  0
 HBW_Unload_Rack <Virtual>  0
 VGR_vacuum_drop <Virtual>  0
 VGR_dropoff <Virtual>  0
 VGR_home_reset <Virtual>  0
 VGR_pickup <Virtual>  0
 VGR_PWM_ON <Virtual>  0
 VGR_Reset_Flags <Virtual>  0
 VGR_Rotate_To <Virtual>  0
 VGR_rst_switches <Virtual>  0
 PWM_ramp_UP <Virtual>  0
#END

// Beginning of Code Block VGR_Copy_State_F
$LGCMOD VGR_Copy_State_F

// Rung VGR_Copy_State_F#1
// Offset 0
STR ST1
AND C2000
COPY 0x1 "4 0x0 MC20 C20 20"

// Rung VGR_Copy_State_F#2
// Offset 9
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C20
OR C21
AND C2000
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 50
OUT Y88

// Rung VGR_Copy_State_F#3
// Offset 27
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C20
AND Y88
ANDN X25
AND C2000
OUT Y22

// Rung VGR_Copy_State_F#4
// Offset 32
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C21
AND Y88
AND C2000
OUT Y23

// Rung VGR_Copy_State_F#5
// Offset 36
#BEGIN FMT_COMMENT 
"horizontal PWM"
#END

STR C22
OR C23
AND C2000
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 50
OUT Y89

// Rung VGR_Copy_State_F#6
// Offset 54
#BEGIN FMT_COMMENT 
"horizontal BACK"
#END

STR C22
AND Y89
ANDN X26
AND C2000
OUT Y24

// Rung VGR_Copy_State_F#7
// Offset 59
#BEGIN FMT_COMMENT 
"horizontal FORW"
#END

STR C23
AND Y89
AND C2000
OUT Y25

// Rung VGR_Copy_State_F#8
// Offset 63
#BEGIN FMT_COMMENT 
"rotation axis PWM"
#END

STR C24
OR C25
AND C2000
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 50
OUT Y90

// Rung VGR_Copy_State_F#9
// Offset 81
#BEGIN FMT_COMMENT 
"rotate CW"
#END

STR Y90
AND C24
ANDN X27
AND C2000
OUT Y26

// Rung VGR_Copy_State_F#10
// Offset 86
#BEGIN FMT_COMMENT 
"rotate CCW"
#END

STR Y90
AND C25
AND C2000
OUT Y27

// Rung VGR_Copy_State_F#11
// Offset 90
NOP

// Rung VGR_Copy_State_F#12
// Offset 91
#BEGIN FMT_COMMENT 
"Compressor ON/OFF"
#END

STR C26
AND C2000
OUT Y28

// Rung VGR_Copy_State_F#13
// Offset 94
#BEGIN FMT_COMMENT 
"Vacuum Valve"
#END

STR C27
AND C2000
OUT Y29

// Rung VGR_Copy_State_F#14
// Offset 97
NOP

// Rung VGR_Copy_State_F#15
// Offset 98
NOP

// Rung VGR_Copy_State_F#16
// Offset 99
#BEGIN FMT_COMMENT 
"This is suspect -%3E<br> <br>"
"Need to check if its really x57-59  or 28-31"
#END

STR ST1
AND C2001
COPY 0x1 "4 0x0 Y22 MI200 1 0x0 Y23 MI201 1 0x0 Y24 MI202 1 0x0 Y25 MI203 1 0x0 Y26 MI204 1 0x0 Y27 MI205 1 0x0 Y28 MI206 1 0x0 Y29 MI207 1 0x0 Y88 MI208 1 0x0 Y89 MI209 1 0x0 Y90 MI210 1 0x0 X25 MI211 1 0x0 X26 MI212 1 0x0 X27 MI213 1 0x0 X56 MI214 1 0x0 X57 MI215 1 0x0 X58 MI216 1 0x0 X59 MI217 1 0x0 X60 MI218 1 0x0 X61 MI219 1"

// Rung VGR_Copy_State_F#17
// Offset 145
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC200 C400 8"
POPBOOL
DUPBOOL
AND X26
COPY 0x1 "4 0x0 0 MC203 1"
POPBOOL
DUPBOOL
AND X25
COPY 0x1 "4 0x0 0 MC200 1"
POPBOOL
AND X27
COPY 0x1 "4 0x0 0 MC204 1"

// Rung VGR_Copy_State_F#18
// Offset 178
STR C2000
COPY 0x1 "4 0x0 0 MC200 8"

// Rung VGR_Copy_State_F#19
// Offset 185
RET

// End of Code Block VGR_Copy_State_F
$LGCEND VGR_Copy_State_F

// Beginning of Code Block VGR_Suction_F
$LGCMOD VGR_Suction_F

// Rung VGR_Suction_F#1
// Offset 0
#BEGIN FMT_COMMENT 
"Keep on for duration of function"
#END

STR ST1
OUT Y28

// Rung VGR_Suction_F#2
// Offset 2
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Suction_F#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_Suction_F#4
// Offset 29
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_Suction_F#5
// Offset 35
STRGE $VGR_Encoder_Y.Acc N1002
SET C550
RST C611

// Rung VGR_Suction_F#6
// Offset 41
#BEGIN FMT_COMMENT 
"Set Vaccum this should only need to be set once then it "
"holds vacuum until released"
#END

STR C550
OUT Y29
SET C612

// Rung VGR_Suction_F#7
// Offset 44
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_Suction_F#8
// Offset 50
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_Suction_F#9
// Offset 56
NOP

// Rung VGR_Suction_F#10
// Offset 57
RET

// End of Code Block VGR_Suction_F
$LGCEND VGR_Suction_F

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
#BEGIN FMT_COMMENT 
"Enable the vaccum and turn on the valve to hold suction "
"when we are inisde and in the oven reset stage of MPO "
"Program."
#END

STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
OR MPO_Program.S8
OR MPO_Program.S13
OR MPO_Program.S9
OR MPO_Program.S11
AND C2000
OUT Y17

// Rung MPO_Suction#2
// Offset 14
NOP

// Rung MPO_Suction#3
// Offset 15
STR MPO_Program.S1
ANDN X18
STR MPO_Program.S4
ANDN X17
ORSTR
STR MPO_Program.S10
ANDN X18
ORSTR
AND C2000
AND Y17
OUT Y20

// Rung MPO_Suction#4
// Offset 26
NOP

// Rung MPO_Suction#5
// Offset 27
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y45 MI400 1 0x0 Y46 MI401 1 0x0 Y47 MI402 1 0x0 Y43 MI403 1 0x0 Y44 MI404 1 0x0 Y52 MI405 1 0x0 Y53 MI406 1 0x0 Y15 MI407 1 0x0 Y16 MI408 1 0x0 Y17 MI409 1 0x0 Y18 MI410 1 0x0 Y19 MI411 1 0x0 Y20 MI412 1 0x0 Y21 MI413 1 0x0 Y13 MI414 1 0x0 Y91 MI415 1 0x0 X12 MI416 1 0x0 X13 MI417 1 0x0 X14 MI418 1 0x0 X15 MI419 1 0x0 X16 MI420 1 0x0 X17 MI421 1 0x0 X18 MI422 1 0x0 X19 MI423 1 0x0 X24 MI424 1 0x0 MHR440 V1600 1 0x0 MC440 C840 1 0x0 C841 MC441 1 0x0 MC442 C842 1"

// Rung MPO_Copy_State#2
// Offset 63
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC400 C800 14"
POPBOOL
DUPBOOL
AND X16
COPY 0x1 "4 0x0 0 MC407 1"
POPBOOL
DUPBOOL
AND X19
COPY 0x1 "4 0x0 0 MC406 1"
POPBOOL
DUPBOOL
AND X13
COPY 0x1 "4 0x0 0 MC400 1"
POPBOOL
DUPBOOL
AND X12
COPY 0x1 "4 0x0 0 MC401 1"
POPBOOL
DUPBOOL
STR X17
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC404 1"
POPBOOL
STR X18
ORN Y20
ANDSTR
COPY 0x1 "4 0x0 0 MC405 1"

// Rung MPO_Copy_State#3
// Offset 124
STR C2000
COPY 0x1 "4 0x0 0 MC400 14 0x0 0 C800 14"

// Rung MPO_Copy_State#4
// Offset 133
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y30 MI800 1 0x0 Y31 MI801 1 0x0 Y32 MI802 1 0x0 Y33 MI803 1 0x0 Y34 MI804 1 0x0 X34 MI805 1 0x0 X35 MI806 1 0x0 X36 MI807 1 0x0 V3200 MHR1600 1 0x0 X37 MI809 1 0x0 X38 MI810 1 0x0 X39 MI811 1"

// Rung SLD_Copy_State#2
// Offset 29
STR ST1
SUBSCRIB "4 WX0 V3200 1 0x4"

// Rung SLD_Copy_State#3
// Offset 34
STR C2001
COPY 0x1 "4 0x0 MC800 C1600 5"

// Rung SLD_Copy_State#4
// Offset 42
STR C2000
COPY 0x1 "4 0x0 0 MC800 5"

// Rung SLD_Copy_State#5
// Offset 49
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
STR SLD_Program.S3
OUT Y31

// Rung SLD_Suction#2
// Offset 2
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block All_Copy_States
$LGCMOD All_Copy_States

// Rung All_Copy_States#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC1000 C2000 1 0x0 MC56 C56 1"

// Rung All_Copy_States#2
// Offset 9
STR C2000
RST C2001

// Rung All_Copy_States#3
// Offset 11
STRN C2000
SET C2001
COPY 0x1 "4 0x0 0 MC56 1"
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung All_Copy_States#4
// Offset 25
STR ST1
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#5
// Offset 33
STR ST1
CALL MPO_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#6
// Offset 41
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#7
// Offset 49
STR ST1
CALL SSC_Copy_State 0x1 DST511 "3" "3"

// Rung All_Copy_States#8
// Offset 57
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung All_Copy_States#9
// Offset 65
RET

// End of Code Block All_Copy_States
$LGCEND All_Copy_States

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 Y35 MI600 1 0x0 Y36 MI601 1 0x0 Y37 MI602 1 0x0 Y38 MI603 1 0x0 Y39 MI604 1 0x0 Y40 MI605 1 0x0 Y41 MI606 1 0x0 Y42 MI607 1 0x0 X40 MI610 1 0x0 X41 MI611 1 0x0 X42 MI612 1 0x0 X43 MI613 1 0x0 V2400 MHR1200 1 0x0 X44 MI615 1 0x0 X45 MI616 1 0x0 X46 MI617 1 0x0 X47 MI618 1"

// Rung SSC_Copy_State#2
// Offset 39
STR ST1
SUBSCRIB "4 WX1 V2400 1 0x4"

// Rung SSC_Copy_State#3
// Offset 44
STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC600 C1200 8"
POPBOOL
AND X40
COPY 0x1 "4 0x0 0 MC601 1"

// Rung SSC_Copy_State#4
// Offset 61
STR C2000
COPY 0x1 "4 0x0 0 MC600 8"

// Rung SSC_Copy_State#5
// Offset 68
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_get_X_Z
$LGCMOD HBW_get_X_Z

// Rung HBW_get_X_Z#1
// Offset 0
NOP

// Rung HBW_get_X_Z#2
// Offset 1
#BEGIN FMT_COMMENT 
"Get Column, right digit"
#END

STR ST1
MATH N201 "N200 % 10"

// Rung HBW_get_X_Z#3
// Offset 10
#BEGIN FMT_COMMENT 
"Get Row, left digit"
#END

STR ST1
MATH N202 "(N200 - N201) / 10"

// Rung HBW_get_X_Z#4
// Offset 21
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 1
COPY 0x1 "4 0x0 7650 N203 1"

// Rung HBW_get_X_Z#5
// Offset 31
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 2
COPY 0x1 "4 0x0 5331 N203 1"

// Rung HBW_get_X_Z#6
// Offset 41
#BEGIN FMT_COMMENT 
"X Output Encoder Value"
#END

STRE N201 3
COPY 0x1 "4 0x0 3000 N203 1"

// Rung HBW_get_X_Z#7
// Offset 51
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 1
COPY 0x1 "4 0x0 425 N204 1"

// Rung HBW_get_X_Z#8
// Offset 61
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 2
COPY 0x1 "4 0x0 1750 N204 1"

// Rung HBW_get_X_Z#9
// Offset 71
#BEGIN FMT_COMMENT 
"Z Output Encoder Value"
#END

STRE N202 3
COPY 0x1 "4 0x0 3300 N204 1"

// Rung HBW_get_X_Z#10
// Offset 81
RET

// End of Code Block HBW_get_X_Z
$LGCEND HBW_get_X_Z

// Beginning of Code Block HBW_Manual_F
$LGCMOD HBW_Manual_F

// Rung HBW_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C2
AND C1
STRN C1
AND C2
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 500 60
POPBOOL
DUPBOOL
AND C1
OUT Y48
POPBOOL
AND C2
OUT Y49

// Rung HBW_Manual_F#2
// Offset 29
STR ST1
DUPBOOL
STRN C4
AND C3
STRN C3
AND C4
ANDN X0
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 500 60
POPBOOL
DUPBOOL
AND C3
OUT Y50
POPBOOL
AND C4
ANDN X0
OUT Y51

// Rung HBW_Manual_F#3
// Offset 60
STR ST1
DUPBOOL
STRN C6
AND C5
ANDN X3
STRN C5
AND C6
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 60
POPBOOL
DUPBOOL
AND C5
ANDN X3
OUT Y5
POPBOOL
AND C6
OUT Y4

// Rung HBW_Manual_F#4
// Offset 91
STR ST1
DUPBOOL
STRN C8
AND C7
ANDN X10
STRN C7
AND C8
ANDN X11
ORSTR
ANDSTR
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 500 60
POPBOOL
DUPBOOL
AND C7
ANDN X10
OUT Y6
POPBOOL
AND C8
ANDN X11
OUT Y7

// Rung HBW_Manual_F#5
// Offset 124
RET

// End of Code Block HBW_Manual_F
$LGCEND HBW_Manual_F

// Beginning of Code Block MPO_Manual
$LGCMOD MPO_Manual

// Rung MPO_Manual#1
// Offset 0
STR C800
ANDN X13
OUT Y45

// Rung MPO_Manual#2
// Offset 3
STR C801
ANDN X12
OUT Y46

// Rung MPO_Manual#3
// Offset 6
STR C802
OUT Y47

// Rung MPO_Manual#4
// Offset 8
STR C803
OUT Y43

// Rung MPO_Manual#5
// Offset 10
STR C804
AND Y20
ANDN X17
OUT Y44

// Rung MPO_Manual#6
// Offset 14
STR C805
AND Y20
ANDN X18
OUT Y52

// Rung MPO_Manual#7
// Offset 18
STR ST1
DUPBOOL
STRN C807
AND C806
ANDN X19
STRN C806
AND C807
ANDN X16
ORSTR
ANDSTR
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
POPBOOL
DUPBOOL
AND C806
ANDN X19
OUT Y53
POPBOOL
AND C807
ANDN X16
OUT Y15

// Rung MPO_Manual#8
// Offset 51
STR C808
OUT Y16

// Rung MPO_Manual#9
// Offset 53
STR C809
OUT Y17

// Rung MPO_Manual#10
// Offset 55
STR C810
OUT Y18

// Rung MPO_Manual#11
// Offset 57
STR C811
OUT Y19

// Rung MPO_Manual#12
// Offset 59
STR C812
OUT Y20

// Rung MPO_Manual#13
// Offset 61
STR C813
OUT Y21

// Rung MPO_Manual#14
// Offset 63
RET

// End of Code Block MPO_Manual
$LGCEND MPO_Manual

// Beginning of Code Block SLD_Manual
$LGCMOD SLD_Manual

// Rung SLD_Manual#1
// Offset 0
STR C1600
OUT Y30

// Rung SLD_Manual#2
// Offset 2
STR C1601
OUT Y31

// Rung SLD_Manual#3
// Offset 4
STR C1602
OUT Y32

// Rung SLD_Manual#4
// Offset 6
STR C1603
OUT Y33

// Rung SLD_Manual#5
// Offset 8
STR C1604
OUT Y34

// Rung SLD_Manual#6
// Offset 10
RET

// End of Code Block SLD_Manual
$LGCEND SLD_Manual

// Beginning of Code Block HBW_Copy_State_F
$LGCMOD HBW_Copy_State_F

// Rung HBW_Copy_State_F#1
// Offset 0
STR ST1
AND C2000
COPY 0x1 "4 0x0 MC1 C1 27 0x0 X6 MI7 4"

// Rung HBW_Copy_State_F#2
// Offset 12
NOP

// Rung HBW_Copy_State_F#3
// Offset 13
STR ST1
DUPBOOL
ANDN C56
AND HBW_Program.S97
COPY 0x1 "4 0x0 MHR1 N300 1 0x0 400 V400 1"
POPBOOL
DUPBOOL
ANDN C56
ANDN HBW_Program.S97
COPY 0x1 "4 0x0 0 MHR1 1"
POPBOOL
AND C56
COPY 0x1 "4 0x0 0 MHR1 1"

// Rung HBW_Copy_State_F#4
// Offset 43
#BEGIN FMT_COMMENT 
"Sensor data, and Auto/Manual switch<br>"
#END

STR ST1
AND C2001
COPY 0x1 "4 0x0 Y48 MI1 1 0x0 Y49 MI2 1 0x0 Y50 MI3 1 0x0 Y51 MI4 1 0x0 Y4 MI5 1 0x0 Y5 MI6 1 0x0 Y6 MI7 1 0x0 Y7 MI8 1 0x0 Y80 MI9 1 0x0 Y81 MI10 1 0x0 Y82 MI11 1 0x0 Y83 MI12 1 0x0 X0 MI13 1 0x0 X1 MI14 1 0x0 X2 MI15 1 0x0 X3 MI16 1 0x0 X4 MI17 1 0x0 X5 MI18 1 0x0 X6 MI19 1 0x0 X7 MI20 1 0x0 X8 MI21 1 0x0 X9 MI22 1 0x0 X10 MI23 1 0x0 X11 MI24 1 0x0 0 MHR1 1"
RST C300

// Rung HBW_Copy_State_F#5
// Offset 100
#BEGIN FMT_COMMENT 
"Manual mode enabled. Coil data is copied from the switch "
"position on the HMI<br> <br>"
"Sends a 0 to the Modbus coil output to disable the switch "
"for reference switches"
#END

STR C2001
DUPBOOL
AND ST1
COPY 0x1 "4 0x0 MC1 C1 8"
POPBOOL
DUPBOOL
AND X0
COPY 0x1 "4 0x0 0 MC4 1"
POPBOOL
DUPBOOL
AND X3
COPY 0x1 "4 0x0 0 MC5 1"
POPBOOL
DUPBOOL
AND X10
COPY 0x1 "4 0x0 0 MC7 1"
POPBOOL
AND X11
COPY 0x1 "4 0x0 0 MC8 1"

// Rung HBW_Copy_State_F#6
// Offset 141
#BEGIN FMT_COMMENT 
"Auto mode enabled. This turns off all coils on the HMI."
#END

STR C2000
COPY 0x1 "4 0x0 0 MC1 8"

// Rung HBW_Copy_State_F#7
// Offset 148
RET

// End of Code Block HBW_Copy_State_F
$LGCEND HBW_Copy_State_F

// Beginning of Code Block HBW_lift_seq
$LGCMOD HBW_lift_seq

// Rung HBW_lift_seq#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_lift_seq#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_lift_seq#3
// Offset 5
STR X10
OUT C200

// Rung HBW_lift_seq#4
// Offset 7
STR ST1
MATH N203 "N202 - 400"

// Rung HBW_lift_seq#5
// Offset 16
STRLE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_lift_seq#6
// Offset 22
STRN X3
AND C200
OUT Y5

// Rung HBW_lift_seq#7
// Offset 25
STRN X11
AND C201
OUT Y7

// Rung HBW_lift_seq#8
// Offset 28
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_lift_seq#9
// Offset 33
NOP

// Rung HBW_lift_seq#10
// Offset 34
RET

// End of Code Block HBW_lift_seq
$LGCEND HBW_lift_seq

// Beginning of Code Block SSC_Manual
$LGCMOD SSC_Manual

// Rung SSC_Manual#1
// Offset 0
STR C1200
OUT Y35

// Rung SSC_Manual#2
// Offset 2
STR C1201
ANDN X40
OUT Y36

// Rung SSC_Manual#3
// Offset 5
STR C1202
OUT Y37

// Rung SSC_Manual#4
// Offset 7
STR C1203
OUT Y38

// Rung SSC_Manual#5
// Offset 9
STR C1204
OUT Y39

// Rung SSC_Manual#6
// Offset 11
STR C1205
OUT Y40

// Rung SSC_Manual#7
// Offset 13
STR C1206
OUT Y41

// Rung SSC_Manual#8
// Offset 15
STR C1207
OUT Y42

// Rung SSC_Manual#9
// Offset 17
RET

// End of Code Block SSC_Manual
$LGCEND SSC_Manual

// Beginning of Code Block VGR_Manual_F
$LGCMOD VGR_Manual_F

// Rung VGR_Manual_F#1
// Offset 0
STR ST1
DUPBOOL
STRN C401
AND C400
ANDN X25
STRN C400
AND C401
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 60
POPBOOL
DUPBOOL
AND C400
ANDN X25
OUT Y22
POPBOOL
AND C401
OUT Y23

// Rung VGR_Manual_F#2
// Offset 31
STR ST1
DUPBOOL
STRN C403
AND C402
STRN C402
AND C403
ANDN X26
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 60
POPBOOL
DUPBOOL
AND C402
OUT Y25
POPBOOL
AND C403
ANDN X26
OUT Y24

// Rung VGR_Manual_F#3
// Offset 62
STR ST1
DUPBOOL
STRN C405
AND C404
ANDN X27
STRN C404
AND C405
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 60
POPBOOL
DUPBOOL
AND C404
ANDN X27
OUT Y26
POPBOOL
AND C405
OUT Y27

// Rung VGR_Manual_F#4
// Offset 93
STR C406
OUT Y28

// Rung VGR_Manual_F#5
// Offset 95
STR C407
OUT Y29

// Rung VGR_Manual_F#6
// Offset 97
RET

// End of Code Block VGR_Manual_F
$LGCEND VGR_Manual_F

// Beginning of Code Block HBW_load_convyr
$LGCMOD HBW_load_convyr

// Rung HBW_load_convyr#1
// Offset 0
NOP

// Rung HBW_load_convyr#2
// Offset 1
#BEGIN FMT_COMMENT 
"Horizontal PWM Motor"
#END

STRLE 80 $HBW_Encoder_X.Acc
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 150 R101

// Rung HBW_load_convyr#3
// Offset 19
#BEGIN FMT_COMMENT 
"Vertical PWM Motor"
#END

STRLE 2620 $HBW_Encoder_Z.Acc
ORGE 2580 $HBW_Encoder_Z.Acc
OR C200
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_load_convyr#4
// Offset 42
#BEGIN FMT_COMMENT 
"Cantilever PWM Motor"
#END

STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_load_convyr#5
// Offset 57
STRN X10
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDGE 2620 $HBW_Encoder_Z.Acc
ANDGE 80 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_load_convyr#6
// Offset 71
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_load_convyr#7
// Offset 73
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 80 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_load_convyr#8
// Offset 79
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDGE 3000 $HBW_Encoder_Z.Acc
STRN C200
ANDGE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y4

// Rung HBW_load_convyr#9
// Offset 92
STRN C200
ANDLE 2580 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_load_convyr#10
// Offset 103
STR C200
ANDLE 3000 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_load_convyr#11
// Offset 110
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDLE 2620 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y5

// Rung HBW_load_convyr#12
// Offset 117
STRN X11
AND C201
OUT Y7

// Rung HBW_load_convyr#13
// Offset 120
STR X11
AND C201
OUT C203
RST C201
RST C204

// Rung HBW_load_convyr#14
// Offset 125
NOP

// Rung HBW_load_convyr#15
// Offset 126
RET

// End of Code Block HBW_load_convyr
$LGCEND HBW_load_convyr

// Beginning of Code Block HBW_PWM_On
$LGCMOD HBW_PWM_On

// Rung HBW_PWM_On#1
// Offset 0
STR ST1
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 50 R100

// Rung HBW_PWM_On#2
// Offset 15
STR ST1
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 50 R101

// Rung HBW_PWM_On#3
// Offset 30
STR ST1
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 500 R102

// Rung HBW_PWM_On#4
// Offset 45
STR ST1
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 50 R103

// Rung HBW_PWM_On#5
// Offset 60
RET

// End of Code Block HBW_PWM_On
$LGCEND HBW_PWM_On

// Beginning of Code Block HBW_Reset_Flags
$LGCMOD HBW_Reset_Flags

// Rung HBW_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C100 5 0x0 0 C200 15"

// Rung HBW_Reset_Flags#2
// Offset 9
NOP

// Rung HBW_Reset_Flags#3
// Offset 10
NOP

// Rung HBW_Reset_Flags#4
// Offset 11
RET

// End of Code Block HBW_Reset_Flags
$LGCEND HBW_Reset_Flags

// Beginning of Code Block HBW_rst_switches
$LGCMOD HBW_rst_switches

// Rung HBW_rst_switches#1
// Offset 0
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_rst_switches#2
// Offset 2
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_rst_switches#3
// Offset 4
STR X0
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_rst_switches#4
// Offset 6
STR X3
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_rst_switches#5
// Offset 8
NOP

// Rung HBW_rst_switches#6
// Offset 9
RET

// End of Code Block HBW_rst_switches
$LGCEND HBW_rst_switches

// Beginning of Code Block HBW_Unload_Conv
$LGCMOD HBW_Unload_Conv

// Rung HBW_Unload_Conv#1
// Offset 0
STRN X10
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDGE 3030 $HBW_Encoder_Z.Acc
ANDGE 40 $HBW_Encoder_X.Acc
OUT Y6

// Rung HBW_Unload_Conv#2
// Offset 14
#BEGIN FMT_COMMENT 
"Require Light sensor to go false to indicate cargo in "
"approximate location"
#END

STR X10
SET C200

// Rung HBW_Unload_Conv#3
// Offset 16
#BEGIN FMT_COMMENT 
"MOVE towards conveyor horizontal"
#END

STRLE 40 $HBW_Encoder_X.Acc
AND C204
OUT Y51

// Rung HBW_Unload_Conv#4
// Offset 22
#BEGIN FMT_COMMENT 
"Coming from rows 2 or 3 or for load sequnce when lift forward"
#END

STR C200
ANDLE 2620 $HBW_Encoder_Z.Acc
STRN C200
ANDLE 3030 $HBW_Encoder_Z.Acc
ANDN C204
ORSTR
OUT Y5

// Rung HBW_Unload_Conv#5
// Offset 35
STRN C200
ANDLE 2980 $HBW_Encoder_Z.Acc
ANDN C204
ANDGE 3030 $HBW_Encoder_Z.Acc
SET C204

// Rung HBW_Unload_Conv#6
// Offset 46
STR C200
ANDGE 2620 $HBW_Encoder_Z.Acc
SET C201
RST C200

// Rung HBW_Unload_Conv#7
// Offset 53
#BEGIN FMT_COMMENT 
"If coming from Row 3 need to rais lift before starting "
"load sequence"
#END

STRN C200
ANDGE 2980 $HBW_Encoder_Z.Acc
ANDN C204
OUT Y4

// Rung HBW_Unload_Conv#8
// Offset 60
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Conv#9
// Offset 63
STR X11
AND C201
OUT C205
RST C201
RST C204

// Rung HBW_Unload_Conv#10
// Offset 68
NOP

// Rung HBW_Unload_Conv#11
// Offset 69
NOP

// Rung HBW_Unload_Conv#12
// Offset 70
RET

// End of Code Block HBW_Unload_Conv
$LGCEND HBW_Unload_Conv

// Beginning of Code Block HBW_Unload_Rack
$LGCMOD HBW_Unload_Rack

// Rung HBW_Unload_Rack#1
// Offset 0
#BEGIN FMT_COMMENT 
"LIFT Sequence"
#END

STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Unload_Rack#2
// Offset 2
STRN X10
ANDN C201
OUT Y6

// Rung HBW_Unload_Rack#3
// Offset 5
STR X10
SET C200

// Rung HBW_Unload_Rack#4
// Offset 7
STR ST1
MATH N203 "N202 + 400"

// Rung HBW_Unload_Rack#5
// Offset 16
STRGE $HBW_Encoder_Z.Acc N203
RST C200
OUT C201

// Rung HBW_Unload_Rack#6
// Offset 22
STR C200
OUT Y4

// Rung HBW_Unload_Rack#7
// Offset 24
STRN X11
AND C201
OUT Y7

// Rung HBW_Unload_Rack#8
// Offset 27
STR X11
AND C201
OUT C202
RST C200
RST C201

// Rung HBW_Unload_Rack#9
// Offset 32
NOP

// Rung HBW_Unload_Rack#10
// Offset 33
NOP

// Rung HBW_Unload_Rack#11
// Offset 34
RET

// End of Code Block HBW_Unload_Rack
$LGCEND HBW_Unload_Rack

// Beginning of Code Block VGR_vacuum_drop
$LGCMOD VGR_vacuum_drop

// Rung VGR_vacuum_drop#1
// Offset 0
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_vacuum_drop#2
// Offset 8
#BEGIN FMT_COMMENT 
"Get target Y-location and return location"
#END

STRN C610
MATH N1002 "$VGR_Encoder_Y.Acc + N1000"
SET C611
MATH N1001 "$VGR_Encoder_Y.Acc + 15"
SET C610

// Rung VGR_vacuum_drop#3
// Offset 27
STRLE $VGR_Encoder_Y.Acc N1002
AND C611
OUT Y23

// Rung VGR_vacuum_drop#4
// Offset 33
#BEGIN FMT_COMMENT 
"Return to starting height"
#END

STR C612
ANDGE $VGR_Encoder_Y.Acc N1001
OUT Y22

// Rung VGR_vacuum_drop#5
// Offset 39
#BEGIN FMT_COMMENT 
"Turn off vacuum, this is run in VGR program, so no need to "
"run in this submodule"
#END

STRGE $VGR_Encoder_Y.Acc N1002
RST C550
RST C611
SET C612

// Rung VGR_vacuum_drop#6
// Offset 46
#BEGIN FMT_COMMENT 
"Starting height reached, nice job you've finished picking "
"up puck"
#END

STR C612
ANDLE $VGR_Encoder_Y.Acc N1001
SET C613

// Rung VGR_vacuum_drop#7
// Offset 52
NOP

// Rung VGR_vacuum_drop#8
// Offset 53
NOP

// Rung VGR_vacuum_drop#9
// Offset 54
RET

// End of Code Block VGR_vacuum_drop
$LGCEND VGR_vacuum_drop

// Beginning of Code Block VGR_dropoff
$LGCMOD VGR_dropoff

// Rung VGR_dropoff#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 450 N1005 1 0x0 420 N1006 1 0x0 268 N1007 1 0x0 298 N1008 1 0x0 2320 N1009 1"

// Rung VGR_dropoff#2
// Offset 16
STR X25
SET C600

// Rung VGR_dropoff#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_dropoff#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_dropoff#5
// Offset 23
STR X26
SET C601

// Rung VGR_dropoff#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_dropoff#7
// Offset 31
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_dropoff#8
// Offset 37
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_dropoff#9
// Offset 46
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_dropoff#10
// Offset 54
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_dropoff#11
// Offset 63
STR C603
CALL VGR_vacuum_drop 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_dropoff#12
// Offset 75
STR C604
ANDN X26
OUT Y24

// Rung VGR_dropoff#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_dropoff#14
// Offset 81
NOP

// Rung VGR_dropoff#15
// Offset 82
RET

// End of Code Block VGR_dropoff
$LGCEND VGR_dropoff

// Beginning of Code Block VGR_home_reset
$LGCMOD VGR_home_reset

// Rung VGR_home_reset#1
// Offset 0
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_home_reset#2
// Offset 2
STR X25
SET C600

// Rung VGR_home_reset#3
// Offset 4
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_home_reset#4
// Offset 7
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_home_reset#5
// Offset 11
#BEGIN FMT_COMMENT 
"Return to home position on rotation facing train depot"
#END

STR C601
ANDN X27
OUT Y26

// Rung VGR_home_reset#6
// Offset 14
#BEGIN FMT_COMMENT 
"C602 is the DONE flag for this function"
#END

STR X27
SET C602
RST C601

// Rung VGR_home_reset#7
// Offset 17
RET

// End of Code Block VGR_home_reset
$LGCEND VGR_home_reset

// Beginning of Code Block VGR_pickup
$LGCMOD VGR_pickup

// Rung VGR_pickup#1
// Offset 0
STR ST1
AND ST2
COPY 0x1 "4 0x0 50 N1005 1 0x0 20 N1006 1 0x0 40 N1007 1 0x0 70 N1008 1 0x0 2350 N1009 1"

// Rung VGR_pickup#2
// Offset 16
STR X25
SET C600

// Rung VGR_pickup#3
// Offset 18
#BEGIN FMT_COMMENT 
"Start by moving motor all the way up for safe travel "
"throughout the factory."
#END

STRN C600
OUT Y22

// Rung VGR_pickup#4
// Offset 20
#BEGIN FMT_COMMENT 
"Bring back horizontal arm to home position if needed to "
"keep from colliding with the conveyor roof"
#END

STR C600
ANDN C601
OUT Y24

// Rung VGR_pickup#5
// Offset 23
STR X26
SET C601

// Rung VGR_pickup#6
// Offset 25
STR C601
ANDGE $VGR_Encoder_Rot.Acc N1005
OUT Y26

// Rung VGR_pickup#7
// Offset 31
STR C601
ANDLE $VGR_Encoder_Rot.Acc N1006
OUT Y27

// Rung VGR_pickup#8
// Offset 37
STRGE $VGR_Encoder_Rot.Acc N1006
ANDLE $VGR_Encoder_Rot.Acc N1005
SET C602

// Rung VGR_pickup#9
// Offset 46
STR C602
ANDLE $VGR_Encoder_X.Acc N1007
ANDN C604
ANDN C605
OUT Y25

// Rung VGR_pickup#10
// Offset 54
STRGE $VGR_Encoder_X.Acc N1007
ANDLE $VGR_Encoder_X.Acc N1008
SET C603

// Rung VGR_pickup#11
// Offset 63
STR C603
CALL VGR_Suction_F 0x1 DST511 "3 N1009 N1000 1" "3 C613 C604 1"

// Rung VGR_pickup#12
// Offset 75
STR C604
ANDN X26
OUT Y24

// Rung VGR_pickup#13
// Offset 78
#BEGIN FMT_COMMENT 
"Calling this done for this submodule, ready to move with "
"item to any location in the factory."
#END

STR C604
AND X26
SET C605

// Rung VGR_pickup#14
// Offset 81
NOP

// Rung VGR_pickup#15
// Offset 82
NOP

// Rung VGR_pickup#16
// Offset 83
RET

// End of Code Block VGR_pickup
$LGCEND VGR_pickup

// Beginning of Code Block VGR_PWM_ON
$LGCMOD VGR_PWM_ON

// Rung VGR_PWM_ON#1
// Offset 0
STR ST1
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R900

// Rung VGR_PWM_ON#2
// Offset 15
STR ST1
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 150 R901

// Rung VGR_PWM_ON#3
// Offset 30
STR ST1
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 150 R902

// Rung VGR_PWM_ON#4
// Offset 45
RET

// End of Code Block VGR_PWM_ON
$LGCEND VGR_PWM_ON

// Beginning of Code Block VGR_Reset_Flags
$LGCMOD VGR_Reset_Flags

// Rung VGR_Reset_Flags#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 0 C500 10 0x0 0 C600 20"

// Rung VGR_Reset_Flags#2
// Offset 9
NOP

// Rung VGR_Reset_Flags#3
// Offset 10
RET

// End of Code Block VGR_Reset_Flags
$LGCEND VGR_Reset_Flags

// Beginning of Code Block VGR_Rotate_To
$LGCMOD VGR_Rotate_To

// Rung VGR_Rotate_To#1
// Offset 0
STR ST1
MATH N1001 "N1000 - 15"
MATH N1002 "N1000 + 15"

// Rung VGR_Rotate_To#2
// Offset 17
#BEGIN FMT_COMMENT 
"Go UP first as this is usually the safest direction to "
"travell for VGR"
#END

STRN X25
OUT Y22

// Rung VGR_Rotate_To#3
// Offset 19
STR X25
SET C600

// Rung VGR_Rotate_To#4
// Offset 21
#BEGIN FMT_COMMENT 
"Next bring arm X back to zero as this allows fro rotation "
"anywhere in the factor, even if MPO pickup is active"
#END

STR C600
ANDN X26
OUT Y24

// Rung VGR_Rotate_To#5
// Offset 24
STR X26
AND C600
ANDN C602
SET C601

// Rung VGR_Rotate_To#6
// Offset 28
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDLE $VGR_Encoder_Rot.Acc N1001
OUT Y27

// Rung VGR_Rotate_To#7
// Offset 34
#BEGIN FMT_COMMENT 
"Safe rotation is now possible"
#END

STR C601
ANDGE $VGR_Encoder_Rot.Acc N1002
OUT Y26

// Rung VGR_Rotate_To#8
// Offset 40
#BEGIN FMT_COMMENT 
"Desired Rotation Reached, C602 is DONE flag for this function"
#END

STRLE $VGR_Encoder_Rot.Acc N1002
ANDGE $VGR_Encoder_Rot.Acc N1001
AND C601
SET C602

// Rung VGR_Rotate_To#9
// Offset 50
RET

// End of Code Block VGR_Rotate_To
$LGCEND VGR_Rotate_To

// Beginning of Code Block VGR_rst_switches
$LGCMOD VGR_rst_switches

// Rung VGR_rst_switches#1
// Offset 0
STR ST1
OUT $VGR_Encoder_Rot.EnableCapture

// Rung VGR_rst_switches#2
// Offset 2
STR ST1
OUT $VGR_Encoder_X.EnableCapture

// Rung VGR_rst_switches#3
// Offset 4
STR ST1
OUT $VGR_Encoder_Y.EnableCapture

// Rung VGR_rst_switches#4
// Offset 6
NOP

// Rung VGR_rst_switches#5
// Offset 7
STR X25
OUT $VGR_Encoder_Y.ResetLevel

// Rung VGR_rst_switches#6
// Offset 9
STR X26
OUT $VGR_Encoder_X.ResetLevel

// Rung VGR_rst_switches#7
// Offset 11
STR X27
OUT $VGR_Encoder_Rot.ResetLevel

// Rung VGR_rst_switches#8
// Offset 13
RET

// End of Code Block VGR_rst_switches
$LGCEND VGR_rst_switches

// Beginning of Code Block PWM_ramp_UP
$LGCMOD PWM_ramp_UP

// Rung PWM_ramp_UP#1
// Offset 0
NOP

// Rung PWM_ramp_UP#2
// Offset 1
STR ST1
INC D1000

// Rung PWM_ramp_UP#3
// Offset 3
STR ST1
MATH R1000 "(((R1002 - R1001) * D1000) / D1001) + R1001"

// Rung PWM_ramp_UP#4
// Offset 18
RET

// End of Code Block PWM_ramp_UP
$LGCEND PWM_ramp_UP

// Beginning of Code Block $tFirstScan
$TSK $tFirstScan

// Rung $tFirstScan#1
// Offset 0
NOP

// Rung $tFirstScan#2
// Offset 1
#BEGIN FMT_COMMENT 
"Variables only initialized once"
#END

STR ST1
INIT "3 N800 N1599 0 MHR1 ST1023 0 C1 C799 0 R100 R100 40 R101 R101 90 R102 R102 52 R103 R103 50 R900 R900 90 R901 R901 90 R902 R902 50"

// Rung $tFirstScan#3
// Offset 33
STR ST1
INIT "3 V400 ST1023 400 N400 ST1023 11 N401 ST1023 12 N402 ST1023 13 N403 ST1023 21 N404 ST1023 22 N405 ST1023 23 N406 ST1023 31 N407 ST1023 32 N408 ST1023 33"

// Rung $tFirstScan#4
// Offset 57
STR ST1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// End of Code Block $tFirstScan
$TSKEND $tFirstScan

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Spring 2022 Project For CS 453/454/553/554 "
"Advanced Robotics I and II<br> <br>Date 02/14/22"
#END

NOP

// Rung $Main#2
// Offset 1
#BEGIN FMT_COMMENT 
"Call all copy_states"
#END

STR ST1
CALL All_Copy_States 0x1 DST511 "3" "3"

// Rung $Main#3
// Offset 9
STR ST1
AND C2000
RUN HBW_Program

// Rung $Main#4
// Offset 13
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL HBW_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#5
// Offset 25
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
AND C2000
RUN VGR_Program

// Rung $Main#6
// Offset 29
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL VGR_Manual_F 0x1 DST511 "3" "3"

// Rung $Main#7
// Offset 41
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
AND C2000
RUN MPO_Program

// Rung $Main#8
// Offset 45
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL MPO_Manual 0x1 DST511 "3" "3"

// Rung $Main#9
// Offset 57
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
AND C2000
RUN SSC_Program

// Rung $Main#10
// Offset 61
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL SSC_Manual 0x1 DST511 "3" "3"

// Rung $Main#11
// Offset 73
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
AND C2000
RUN SLD_Program

// Rung $Main#12
// Offset 77
STR ST1
STR C2001
ORPD C2000
ANDSTR
CALL SLD_Manual 0x1 DST511 "3" "3"

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program<br>"
#END

STR C2001
EXIT

// Rung VGR_Program#2
// Offset 2
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#3
// Offset 10
STR ST1
CALL VGR_rst_switches 0x1 DST511 "3" "3"

// Rung VGR_Program#4
// Offset 18
STR ST1
CALL VGR_PWM_ON 0x1 DST511 "3" "3"

// Rung VGR_Program#5
// Offset 26
#BEGIN FMT_COMMENT 
"Have on for duration of function"
#END

STR C550
OUT Y29

// Rung VGR_Program#6
// Offset 28
#BEGIN FMT_COMMENT 
"Home position at program start, up, back rotation safest order"
#END

SG VGR_Program.S99

// Rung VGR_Program#7
// Offset 30
STR ST1
AND ST2
JMP VGR_Program.S100

// Rung VGR_Program#8
// Offset 33
STR ST1
CALL VGR_home_reset 0x1 DST511 "3" "3 C602 C500 1"

// Rung VGR_Program#9
// Offset 43
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#10
// Offset 52
SG VGR_Program.S7

// Rung VGR_Program#11
// Offset 54
STR C300
JMP VGR_Program.S0
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#12
// Offset 63
STR C39
JMP VGR_Program.S11
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"

// Rung VGR_Program#13
// Offset 72
NOP

// Rung VGR_Program#14
// Offset 73
#BEGIN FMT_COMMENT 
"Pickup material from HBW"
#END

SG VGR_Program.S0

// Rung VGR_Program#15
// Offset 75
STR C300
CALL VGR_pickup 0x1 DST511 "3 5370 N1005 1 5310 N1006 1 730 N1007 1 895 N1008 1 545 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#16
// Offset 95
STR C500
JMP VGR_Program.S1
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C300

// Rung VGR_Program#17
// Offset 105
#BEGIN FMT_COMMENT 
"Dropoff Raw material at MPO station"
#END

SG VGR_Program.S1

// Rung VGR_Program#18
// Offset 107
STR ST1
CALL VGR_dropoff 0x1 DST511 "3 3500 N1005 1 3490 N1006 1 3300 N1007 1 3330 N1008 1 2000 N1009 1" "3 C605 C500 1"

// Rung VGR_Program#19
// Offset 127
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
SET C701

// Rung VGR_Program#20
// Offset 137
SG VGR_Program.S11

// Rung VGR_Program#21
// Offset 139
STR ST1
CALL VGR_Rotate_To 0x1 DST511 "3 2500 N1000 1" "3 C601 C500 1"

// Rung VGR_Program#22
// Offset 151
STR C500
JMP VGR_Program.S7
CALL VGR_Reset_Flags 0x1 DST511 "3" "3"
RST C39

// Rung VGR_Program#23
// Offset 161
SG VGR_Program.S20

// Rung VGR_Program#24
// Offset 163
NOP

// Rung VGR_Program#25
// Offset 164
NOP

// Rung VGR_Program#26
// Offset 165
STRPD C409
AND ST2
INIT "3 N800 ST1023 1 N801 ST1023 1000"

// Rung VGR_Program#27
// Offset 175
STR ST1
CALL VGR_Copy_State_F 0x1 DST511 "3" "3"

// Rung VGR_Program#28
// Offset 183
#BEGIN FMT_COMMENT 
"Accelerate from min/max PWM rate per sub_routine"
#END

STR C409
ANDLE N800 N801
CALL PWM_ramp_UP 0x1 DST511 "3 N800 N1000 2 20.0 R1001 1 50.0 R1002 1" "3 R1000 R800 1 N1000 N800 1"

// Rung VGR_Program#29
// Offset 208
#BEGIN FMT_COMMENT 
"Vertical PWM"
#END

STR C409
OR C410
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 150 R800
OUT Y88

// Rung VGR_Program#30
// Offset 225
#BEGIN FMT_COMMENT 
"vertical UP"
#END

STR C409
AND Y88
ANDN CT50.Done
OUT Y22

// Rung VGR_Program#31
// Offset 229
#BEGIN FMT_COMMENT 
"vertical DOWN"
#END

STR C410
AND Y88
ANDN CT50.Done
OUT Y23

// Rung VGR_Program#32
// Offset 233
NOP

// Rung VGR_Program#33
// Offset 234
SG VGR_Program.S100

// Rung VGR_Program#34
// Offset 236
NOP

// Rung VGR_Program#35
// Offset 237
STR ST1
AND ST2
OUT Y15

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"MPO Program"
#END

STR C2001
EXIT

// Rung MPO_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL MPO_Suction 0x1 DST511 "3" "3"

// Rung MPO_Program#3
// Offset 14
STR C842
SGRSTR MPO_Program.S1 MPO_Program.S19
SGSET MPO_Program.S0
COPY 0x1 "4 0x0 0 MC442 1"

// Rung MPO_Program#4
// Offset 23
STR MPO_Program.S1
AND MPO_Program.S2
AND MPO_Program.S3
ANDN MPO_Program.S12
SET C841

// Rung MPO_Program#5
// Offset 28
SG MPO_Program.S0

// Rung MPO_Program#6
// Offset 30
RST C900

// Rung MPO_Program#7
// Offset 31
STR ST1
AND C2000
ANDN MPO_Program.S1
ANDN MPO_Program.S2
ANDN MPO_Program.S3
SGDIVRG "1 MPO_Program.S1 MPO_Program.S2 MPO_Program.S3"
RST C900
RST C901
RST Y18
SET C841

// Rung MPO_Program#8
// Offset 44
SG MPO_Program.S1

// Rung MPO_Program#9
// Offset 46
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X18
ONDTMR T0 1000 Y52

// Rung MPO_Program#10
// Offset 50
STRN X24
JMP MPO_Program.S4
RST C841

// Rung MPO_Program#11
// Offset 53
SG MPO_Program.S4

// Rung MPO_Program#12
// Offset 55
#BEGIN FMT_COMMENT 
"Open door and enable the ondelay timer for the feeder extension"
#END

STRN X17
ONDTMR T1 3000 Y44

// Rung MPO_Program#13
// Offset 59
STR X17
JMP MPO_Program.S7

// Rung MPO_Program#14
// Offset 61
SG MPO_Program.S7

// Rung MPO_Program#15
// Offset 63
TMRDOWN T2 5000
OUT Y16

// Rung MPO_Program#16
// Offset 66
STR T2.Done
JMP MPO_Program.S10

// Rung MPO_Program#17
// Offset 68
SG MPO_Program.S10

// Rung MPO_Program#18
// Offset 70
STRN X18
ONDTMR T5 1000 Y52

// Rung MPO_Program#19
// Offset 74
STR X18
AND MPO_Program.S11
TMRDOWN T3 1000

// Rung MPO_Program#20
// Offset 78
STR T3.Done
JMP MPO_Program.S1

// Rung MPO_Program#21
// Offset 80
SG MPO_Program.S2

// Rung MPO_Program#22
// Offset 82
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y15

// Rung MPO_Program#23
// Offset 98
#BEGIN FMT_COMMENT 
"Move to the oven when the item is baking<br>"
#END

STR MPO_Program.S7
JMP MPO_Program.S5

// Rung MPO_Program#24
// Offset 100
SG MPO_Program.S5

// Rung MPO_Program#25
// Offset 102
STRN X19
AND C701
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 90
OUT Y53

// Rung MPO_Program#26
// Offset 119
STRN MPO_Program.S7
AND X19
JMP MPO_Program.S8

// Rung MPO_Program#27
// Offset 122
SG MPO_Program.S8

// Rung MPO_Program#28
// Offset 124
STR X18
TMRDOWN T6 1000
OUT Y19

// Rung MPO_Program#29
// Offset 128
STR T6.Done
SET Y18
JMP MPO_Program.S11

// Rung MPO_Program#30
// Offset 131
SG MPO_Program.S11

// Rung MPO_Program#31
// Offset 133
STRN X16
PWMOUT @MPO_PWM_M5 $MPO_PWM_M5 Y91 500 60
OUT Y15

// Rung MPO_Program#32
// Offset 149
STR MPO_Program.S3
AND X16
JMP MPO_Program.S13

// Rung MPO_Program#33
// Offset 152
SG MPO_Program.S13

// Rung MPO_Program#34
// Offset 154
STR X16
OUT Y19
TMRDOWN T4 1000

// Rung MPO_Program#35
// Offset 158
STR T4.Done
RST Y18
TMRDOWN T10 250

// Rung MPO_Program#36
// Offset 162
STR T10.Done
JMP MPO_Program.S2

// Rung MPO_Program#37
// Offset 164
SG MPO_Program.S3

// Rung MPO_Program#38
// Offset 166
STRN X12
OUT Y46

// Rung MPO_Program#39
// Offset 168
STRND MPO_Program.S13
SET C900

// Rung MPO_Program#40
// Offset 171
STR C900
TMRDOWN T9 1000

// Rung MPO_Program#41
// Offset 174
STR T9.Done
AND ST1
RST C900
JMP MPO_Program.S6

// Rung MPO_Program#42
// Offset 178
SG MPO_Program.S6

// Rung MPO_Program#43
// Offset 180
STRN X15
OUT Y45

// Rung MPO_Program#44
// Offset 182
STR X15
TMRDOWN T7 3000
OUT Y43

// Rung MPO_Program#45
// Offset 186
STR T7.Done
JMP MPO_Program.S9

// Rung MPO_Program#46
// Offset 188
SG MPO_Program.S9

// Rung MPO_Program#47
// Offset 190
STRN X13
OUT Y45

// Rung MPO_Program#48
// Offset 192
STR X13
TMRDOWN T8 1000
OUT Y21

// Rung MPO_Program#49
// Offset 196
STR T8.Done
JMP MPO_Program.S12

// Rung MPO_Program#50
// Offset 198
SG MPO_Program.S12

// Rung MPO_Program#51
// Offset 200
OUT Y47

// Rung MPO_Program#52
// Offset 201
STRN X14
SET C901

// Rung MPO_Program#53
// Offset 203
STR C901
AND C1706
JMP MPO_Program.S3
RST C901

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program<br>"
#END

STR C2001
EXIT

// Rung SLD_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Handle Suction for the reset oven Stage"
#END

STR ST1
STR C2000
ORPD C2001
ANDSTR
CALL SLD_Suction 0x1 DST511 "3" "3"

// Rung SLD_Program#3
// Offset 14
NOP

// Rung SLD_Program#4
// Offset 15
SG SLD_Program.S0

// Rung SLD_Program#5
// Offset 17
STR C2000
ANDN SLD_Program.S4
JMP SLD_Program.S4
RST C1700
RST C1701
RST C1702
RST C1703
RST C1704
RST C1705
RST C1706
RST C1707
RST C1708
RST C1709
COPY 0x1 "4 0x0 30000 V3201 1"

// Rung SLD_Program#6
// Offset 36
SG SLD_Program.S4

// Rung SLD_Program#7
// Offset 38
STR C901
JMP SLD_Program.S1

// Rung SLD_Program#8
// Offset 40
SG SLD_Program.S1

// Rung SLD_Program#9
// Offset 42
OUT Y30

// Rung SLD_Program#10
// Offset 43
STRN X35
SET C1703

// Rung SLD_Program#11
// Offset 45
STR C1703
ANDPD X35
SET C1704

// Rung SLD_Program#12
// Offset 49
STRN X36
SET C1705

// Rung SLD_Program#13
// Offset 51
STRLE V3200 V3201
COPY 0x1 "4 0x0 V3200 V3201 1"

// Rung SLD_Program#14
// Offset 61
NOP

// Rung SLD_Program#15
// Offset 62
STR C1705
JMP SLD_Program.S2

// Rung SLD_Program#16
// Offset 64
NOP

// Rung SLD_Program#17
// Offset 65
SG SLD_Program.S2

// Rung SLD_Program#18
// Offset 67
STRGE V3201 18000
ANDLE V3201 21000
SET C1707

// Rung SLD_Program#19
// Offset 76
STRGE V3201 6000
ANDLE V3201 10000
SET C1708

// Rung SLD_Program#20
// Offset 85
STRGE V3201 21500
ANDLE V3201 25000
SET C1709

// Rung SLD_Program#21
// Offset 94
STR C1707
OR C1708
OR C1709
JMP SLD_Program.S3

// Rung SLD_Program#22
// Offset 98
SG SLD_Program.S3

// Rung SLD_Program#23
// Offset 100
STRN Y34
ANDN Y33
ANDN Y32
OUT Y30

// Rung SLD_Program#24
// Offset 104
STR C1705
ANDPD X36
SET C1706

// Rung SLD_Program#25
// Offset 108
STR C1706
AND C1708
ANDN MC450
SET C1701

// Rung SLD_Program#26
// Offset 112
STR C1706
AND C1708
OUT Y32

// Rung SLD_Program#27
// Offset 115
STR C1706
AND C1707
TMRDOWN T16 1100

// Rung SLD_Program#28
// Offset 119
STR T16.Done
ANDN MC450
SET C1700

// Rung SLD_Program#29
// Offset 122
STR T16.Done
OUT Y33

// Rung SLD_Program#30
// Offset 124
STR C1706
AND C1709
TMRDOWN T17 2200

// Rung SLD_Program#31
// Offset 128
STR T17.Done
ANDN MC450
SET C1702

// Rung SLD_Program#32
// Offset 131
STR T17.Done
OUT Y34

// Rung SLD_Program#33
// Offset 133
STR Y32
OR Y33
OR Y34
TMRDOWN T13 1000

// Rung SLD_Program#34
// Offset 138
STR T13.Done
JMP SLD_Program.S0

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SSC Program"
#END

NOP

// End of Code Block SSC_Program
$PGMEND SSC_Program

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SLD Program<br>"
#END

STR C2001
EXIT

// Rung HBW_Program#2
// Offset 2
STR ST1
CALL HBW_Copy_State_F 0x1 DST511 "3" "3"

// Rung HBW_Program#3
// Offset 10
STR ST1
ANDNE N300 0
ANDN C56
CALL HBW_get_X_Z 0x1 DST511 "3 N300 N200 1" "3 N203 N101 1 N204 N102 1"

// Rung HBW_Program#4
// Offset 29
STR ST1
CALL HBW_PWM_On 0x1 DST511 "3" "3"

// Rung HBW_Program#5
// Offset 37
NOP

// Rung HBW_Program#6
// Offset 38
NOP

// Rung HBW_Program#7
// Offset 39
#BEGIN FMT_COMMENT 
"Return to home location, UP/Right to zero encoders at the "
"start of program.  Ideally should already be close to this "
"when program ended if not already there."
#END

SG HBW_Program.S99

// Rung HBW_Program#8
// Offset 41
STRN X11
OUT Y7

// Rung HBW_Program#9
// Offset 43
STR X11
SET C110

// Rung HBW_Program#10
// Offset 45
STRN X0
AND C110
OUT Y51

// Rung HBW_Program#11
// Offset 48
STRN X3
AND C110
OUT Y5

// Rung HBW_Program#12
// Offset 51
STR X0
AND C110
OUT $HBW_Encoder_X.ResetLevel

// Rung HBW_Program#13
// Offset 54
STR X3
AND C110
OUT $HBW_Encoder_Z.ResetLevel

// Rung HBW_Program#14
// Offset 57
STR X0
AND X3
JMP HBW_Program.S97

// Rung HBW_Program#15
// Offset 60
NOP

// Rung HBW_Program#16
// Offset 61
#BEGIN FMT_COMMENT 
"WAIT for new input should get here at the beginning and "
"after finishing a loading sequence"
#END

SG HBW_Program.S97

// Rung HBW_Program#17
// Offset 63
STR C56
ANDGE V400 400
ANDLE V400 408
CALL HBW_get_X_Z 0x1 DST511 "3 N[V400] N200 1" "3 N203 N101 1 N204 N102 1"
INC V400
JMP HBW_Program.S0

// Rung HBW_Program#18
// Offset 88
STRNE N300 0
ANDN C56
JMP HBW_Program.S0
COPY 0x1 "4 0x0 0 MHR1 1 0x0 0 N300 1"

// Rung HBW_Program#19
// Offset 102
SG HBW_Program.S0

// Rung HBW_Program#20
// Offset 104
#BEGIN FMT_COMMENT 
"move left until X value reached assume lift in at this point"
#END

NOP

// Rung HBW_Program#21
// Offset 105
STRN C100
OUT Y50

// Rung HBW_Program#22
// Offset 107
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#23
// Offset 109
STRLE N101 $HBW_Encoder_X.Acc
SET C100

// Rung HBW_Program#24
// Offset 114
STR C100
JMP HBW_Program.S1
RST C100

// Rung HBW_Program#25
// Offset 117
#BEGIN FMT_COMMENT 
"Go to Item on Rack for Pickup"
#END

SG HBW_Program.S1

// Rung HBW_Program#26
// Offset 119
NOP

// Rung HBW_Program#27
// Offset 120
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#28
// Offset 122
STRLE $HBW_Encoder_Z.Acc N102
OUT Y4

// Rung HBW_Program#29
// Offset 127
STRGE $HBW_Encoder_Z.Acc N102
JMP HBW_Program.S2

// Rung HBW_Program#30
// Offset 132
#BEGIN FMT_COMMENT 
"Lift Sequence Rack"
#END

SG HBW_Program.S2

// Rung HBW_Program#31
// Offset 134
STR ST1
ANDN C102
CALL HBW_lift_seq 0x1 DST511 "3 N102 N202 1" "3 C202 C102 1"

// Rung HBW_Program#32
// Offset 147
STR X11
AND C102
JMP HBW_Program.S3
RST C102
RST C202

// Rung HBW_Program#33
// Offset 152
#BEGIN FMT_COMMENT 
"Load Conveyor"
#END

SG HBW_Program.S3

// Rung HBW_Program#34
// Offset 154
STR ST1
ANDN C103
CALL HBW_load_convyr 0x1 DST511 "3" "3 C203 C103 1"

// Rung HBW_Program#35
// Offset 165
STR C103
JMP HBW_Program.S4
RST C103
COPY 0x1 "4 0x0 0 N202 1"

// Rung HBW_Program#36
// Offset 174
#BEGIN FMT_COMMENT 
"Conveyor Factory"
#END

SG HBW_Program.S4

// Rung HBW_Program#37
// Offset 176
STR X2
OUT Y48

// Rung HBW_Program#38
// Offset 178
STRN X2
JMP HBW_Program.S5
SET C300

// Rung HBW_Program#39
// Offset 181
#BEGIN FMT_COMMENT 
"Conveyor Warehouse"
#END

SG HBW_Program.S5

// Rung HBW_Program#40
// Offset 183
STR X1
ANDN C300
OUT Y49

// Rung HBW_Program#41
// Offset 186
STRN X1
JMP HBW_Program.S6

// Rung HBW_Program#42
// Offset 188
#BEGIN FMT_COMMENT 
"Unload Conveyor Sequence"
#END

SG HBW_Program.S6

// Rung HBW_Program#43
// Offset 190
STR ST1
ANDN C103
CALL HBW_Unload_Conv 0x1 DST511 "3" "3 C205 C103 1"

// Rung HBW_Program#44
// Offset 201
STR C103
JMP HBW_Program.S7
RST C103

// Rung HBW_Program#45
// Offset 204
NOP

// Rung HBW_Program#46
// Offset 205
NOP

// Rung HBW_Program#47
// Offset 206
#BEGIN FMT_COMMENT 
"Go to open rack spot X-location for Unload Sequence"
#END

SG HBW_Program.S7

// Rung HBW_Program#48
// Offset 208
STRN C100
OUT Y50

// Rung HBW_Program#49
// Offset 210
STR ST1
OUT $HBW_Encoder_X.EnableCapture

// Rung HBW_Program#50
// Offset 212
STRLE N101 $HBW_Encoder_X.Acc
OUT C100

// Rung HBW_Program#51
// Offset 217
STR C100
JMP HBW_Program.S8

// Rung HBW_Program#52
// Offset 219
#BEGIN FMT_COMMENT 
"Go to open rack spot Z-height for Unload Sequence"
#END

SG HBW_Program.S8

// Rung HBW_Program#53
// Offset 221
STR ST1
OUT $HBW_Encoder_Z.EnableCapture

// Rung HBW_Program#54
// Offset 223
STR ST1
MATH N103 "N102 - 380"
MATH N104 "N102 - 390"

// Rung HBW_Program#55
// Offset 240
STRLE $HBW_Encoder_Z.Acc N104
OUT Y4

// Rung HBW_Program#56
// Offset 245
STRGE $HBW_Encoder_Z.Acc N103
OUT Y5

// Rung HBW_Program#57
// Offset 250
STRGE $HBW_Encoder_Z.Acc N104
ANDLE $HBW_Encoder_Z.Acc N103
JMP HBW_Program.S9

// Rung HBW_Program#58
// Offset 259
SG HBW_Program.S9

// Rung HBW_Program#59
// Offset 261
STRN C103
CALL HBW_Unload_Rack 0x1 DST511 "3 N104 N202 1" "3 C202 C103 1"

// Rung HBW_Program#60
// Offset 273
STR C103
JMP HBW_Program.S99
RST C103
RST C202
COPY 0x1 "4 0x0 0 N202 1"

// End of Code Block HBW_Program
$PGMEND HBW_Program

#BEGIN ELEMENT_DOC
"X0","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","NOP","",""
"C10","","","Software STOP"
"C28","stg","",""
"C31","","","SLD White Puck Ready for Pickup"
"C32","","","SLD Red Puck Ready for Pickup"
"C33","","","SLD Blue Puck Ready for Pickup"
"C34","","","Deliver puck HBW"
"C35","","","Deliver puck train depot"
"C36","","","Pickup from Train Depot"
"C37","","","Deliver to SSC"
"C38","","","Pickup SSC"
"C39","","","GoTo Standby Location"
"C56","Hands_Free_Mode","","Enables hands free autonomous operation"
"C100","","","Manual Horiz. Limit"
"C101","","","Manual Vert. Limit"
"C102","","","End of Lift Sequence Prg."
"C200","","","Lift Forward"
"C201","","","Retract Lift"
"C202","","","End of Lift Sequence Sub."
"C203","","","End of Conveyor Load Sub."
"C204","","","End Vertical Prep."
"C205","","","End Conveyor Unload Sequence"
"C300","","","HBW Raw Material on Conveyor Factory"
"C500","","","VGR programflag 1"
"C501","","","VGR programflag 2"
"C502","set","","VGR programflag 3"
"C550","","","Vacuum On"
"C600","","","VGR subflag 1"
"C601","","","VGR subflag 2"
"C602","","","VGR subflag 3"
"C603","","","VGR subflag 4"
"C604","","","VGR subflag 5"
"C605","","","VGR subflag 6"
"C610","","","VGR subflag 11"
"C611","","","VGR subflag 12"
"C612","","","VGR subflag 13"
"C613","","","VGR subflag 14"
"C700","","","Puck in MPO oven"
"C701","","","VGR clear of MPO pickup"
"C702","","","Puck at SSC color sensor"
"C703","","","Puck at train depot"
"C840","Saw_Enable","",""
"C841","MPO_Ready","",""
"C842","MPO_Reset","",""
"C900","Vacuum_Unloaded","","Set to on when the vacuum leaves the unload state. Reset once we jump from the turn table Idle state"
"C901","Entered_End_Belt","",""
"C1700","Color_Red","","SLD Red Puck Ready for Pickup"
"C1701","Color_White","","SLD White Puck Ready for Pickup"
"C1702","Color_Blue","","SLD Blue Puck Ready for Pickup"
"C1703","Entered_Inlet","",""
"C1704","Exit_Inlet","",""
"C1705","Color_Outlet_Ent","",""
"C1706","Color_Outlet_Exi","",""
"C1707","Local_Color_Red","",""
"C1708","Local_Color_Whit","",""
"C1709","Local_Color_Blue","",""
"C2000","Auto_Mode","","Automatic Mode Enabled"
"C2001","Manual_Mode","","Manual Mode Enabled"
"V400","Hands_Free_Index","","Index for the hands free array N400-408"
"V1600","Oven_Bake_Time","",""
"V3200","Color_Sensor_SLD","",""
"V3201","Low_Color_SLD","",""
"N101","","","HBW Col Encoder Value"
"N102","","","HBW Row Encoder Value"
"N400","","","Hands Free Array Row 1 Col 1"
"N401","","","Hands Free Array Row 1 Col 2"
"N402","","","Hands Free Array Row 1 Col 3"
"N403","","","Hands Free Array Row 2 Col 1"
"N404","","","Hands Free Array Row 2 Col 2"
"N405","","","Hands Free Array Row 2 Col 3"
"N406","","","Hands Free Array Row 3 Col 1"
"N407","","","Hands Free Array Row 3 Col 2"
"N408","","","Hands Free Array Row 3 Col 3"
"N1000","","","VGR subshort_int_1"
"N1001","","","VGR subshort_int_2"
"N1002","","","VGR subshort_int_3"
"R100","","","PWM HBW Conveyor Duty Cycle"
"R101","","","PWM HBW Horizontal Duty Cycle"
"R102","","","PWM HBW Vertical Duty Cycle"
"R103","","","PWM HBW Cantilever Duty Cycle"
"R900","","","PWM VGR Vertical Duty Cycle"
"R901","","","PWM VGR Horizontal Duty Cycle"
"R902","","","PWM VGR Rotate Duty Cycle"
"VGR_Program.S0","","","HBW Pickup"
"VGR_Program.S1","","","MPO Dropoff"
"VGR_Program.S2","","","SLD White Pickup"
"VGR_Program.S3","","","SLD Red Pickup"
"VGR_Program.S4","","","SLD Blue Pickup"
"VGR_Program.S5","","","Deliver puck HBW"
"VGR_Program.S6","","","Deliver puck train depot"
"VGR_Program.S7","","","Next_command_Queue"
"VGR_Program.S8","","","Pickup from Train Depot"
"VGR_Program.S9","","","Deliver to SSC"
"VGR_Program.S10","","","Pickup SSC"
"VGR_Program.S11","","","GoTo Standby Location"
"VGR_Program.S99","","","VGR Home"
"VGR_Program.S100","","","VGR Manual Mode"
"MPO_Program.S0","Init_MPO","",""
"MPO_Program.S1","Oven_Reset","",""
"MPO_Program.S2","Vacuum_Reset","",""
"MPO_Program.S3","TurnTable_Reset","",""
"MPO_Program.S4","Oven_Load","",""
"MPO_Program.S5","Vacuum_Move_Oven","",""
"MPO_Program.S6","TurnTable_Saw","",""
"MPO_Program.S7","Oven_Bake","",""
"MPO_Program.S8","Vacuum_Load","",""
"MPO_Program.S9","TurnTable_Unload","",""
"MPO_Program.S10","Oven_Unload","",""
"MPO_Program.S11","Vacuum_Move_Turn","",""
"MPO_Program.S12","TurnTable_Belt","",""
"MPO_Program.S13","Vacuum_Unload","",""
"SLD_Program.S0","Init_Sorter","",""
"SLD_Program.S1","Sorter_Belt","",""
"SLD_Program.S2","Sorter_Color","",""
"SLD_Program.S3","Sorter_Push","",""
"SLD_Program.S4","Sorter_Reset","",""
#END

